@page "/"
@using Brotal.FireflyBuddy.Core.Data
@using Brotal.FireflyBuddy.Core.Models.ViewModels
@using Brotal.FireflyBuddy.Core.Repositories
@using Microsoft.AspNetCore.Components.Web
@inject IIngestMessageRepository MessageRepository
@inject ITransactionDraftRepository DraftRepository
@inject NavigationManager Navigation
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Dashboard</PageTitle>

@if (viewModel == null)
{
    <div class="loading text-center">
        <div class="spinner"></div>
        <p class="text-secondary">Loading dashboard...</p>
    </div>
}
else
{
    <!-- Dashboard Overview -->
    <div class="dashboard-grid">
        <div class="dashboard-card">
            <div class="dashboard-card-header">
                <h3 class="dashboard-card-title">Recent Messages</h3>
                <i class="bi bi-chat-text dashboard-card-icon"></i>
            </div>
            <div class="card-body">
                @if (viewModel.RecentMessages.Any())
                {
                    @foreach (var message in viewModel.RecentMessages)
                    {
                        <div class="message-item">
                            <div class="message-content">
                                <p class="message-text" title="@message.Text">@message.Text</p>
                                <div class="message-meta">
                                    <span class="message-time">
                                        <i class="bi bi-clock"></i> @message.CreatedAt.ToString("MMM dd, HH:mm")
                                    </span>
                                    <span class="badge badge-@GetStatusColor(message.Status)">@message.Status</span>
                                </div>
                            </div>
                            <button class="btn btn-sm" @onclick="() => NavigateToMessage(message.Id)">
                                <i class="bi bi-eye"></i>
                            </button>
                        </div>
                    }
                    <div class="text-center mt-md">
                        <button class="btn btn-primary" @onclick="NavigateToMessages">
                            <i class="bi bi-list"></i> View All Messages
                        </button>
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <i class="bi bi-chat-text empty-icon"></i>
                        <p class="text-secondary">No messages yet</p>
                        <button class="btn btn-primary" @onclick="NavigateToCreateMessage">
                            <i class="bi bi-plus-circle"></i> Add your first message
                        </button>
                    </div>
                }
            </div>
        </div>

        <div class="dashboard-card">
            <div class="dashboard-card-header">
                <h3 class="dashboard-card-title">Recent Drafts</h3>
                <i class="bi bi-file-earmark-text dashboard-card-icon"></i>
            </div>
            <div class="card-body">
                @if (viewModel.RecentDrafts.Any())
                {
                    @foreach (var draft in viewModel.RecentDrafts)
                    {
                        <div class="draft-item">
                            <div class="draft-content">
                                <h4 class="draft-title">@draft.Description</h4>
                                <div class="draft-meta">
                                    <span class="badge badge-info">@draft.Type</span>
                                    <span class="draft-amount">@draft.Amount.ToString("C") @draft.CurrencyCode</span>
                                </div>
                                <div class="draft-footer">
                                    <span class="draft-time">
                                        <i class="bi bi-clock"></i> @draft.CreatedAt.ToString("MMM dd, HH:mm")
                                    </span>
                                    <span class="badge badge-@GetDraftStatusColor(draft.Status)">@draft.Status</span>
                                </div>
                            </div>
                            <button class="btn btn-sm" @onclick="() => NavigateToDraft(draft.Id)">
                                <i class="bi bi-eye"></i>
                            </button>
                        </div>
                    }
                    <div class="text-center mt-md">
                        <button class="btn btn-primary" @onclick="NavigateToDrafts">
                            <i class="bi bi-list"></i> View All Drafts
                        </button>
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <i class="bi bi-file-earmark-text empty-icon"></i>
                        <p class="text-secondary">No drafts yet</p>
                        <p class="text-tertiary">Messages will be processed automatically</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="quick-actions">
        <button class="quick-action-btn" @onclick="NavigateToCreateMessage">
            <i class="bi bi-plus-circle quick-action-icon"></i>
            <span class="quick-action-text">Add New Message</span>
        </button>
        <button class="quick-action-btn" @onclick="NavigateToMessages">
            <i class="bi bi-chat-text quick-action-icon"></i>
            <span class="quick-action-text">View Messages</span>
        </button>
        <button class="quick-action-btn" @onclick="NavigateToDrafts">
            <i class="bi bi-file-earmark-text quick-action-icon"></i>
            <span class="quick-action-text">Manage Drafts</span>
        </button>
    </div>
}

@code {
    private DashboardViewModel? viewModel;

    protected override async Task OnInitializedAsync()
    {
        var messages = await MessageRepository.GetAllAsync(0, 10, CancellationToken.None);
        var drafts = await DraftRepository.GetAllAsync(0, 10, CancellationToken.None);

        viewModel = new DashboardViewModel
        {
            RecentMessages = messages.ToList(),
            RecentDrafts = drafts.ToList()
        };
    }

    private void NavigateToMessage(Guid id) => Navigation.NavigateTo($"/messages/{id}");
    private void NavigateToDraft(Guid id) => Navigation.NavigateTo($"/drafts/{id}");
    private void NavigateToMessages() => Navigation.NavigateTo("/messages");
    private void NavigateToDrafts() => Navigation.NavigateTo("/drafts");
    private void NavigateToCreateMessage() => Navigation.NavigateTo("/messages/create");

    private static string GetStatusColor(MessageStatus status)
    {
        return status switch
        {
            MessageStatus.Pending => "warning",
            MessageStatus.Processing => "info",
            MessageStatus.Processed => "success",
            MessageStatus.Failed => "danger",
            MessageStatus.Skipped => "secondary",
            _ => "secondary"
        };
    }

    private static string GetDraftStatusColor(DraftStatus status)
    {
        return status switch
        {
            DraftStatus.Pending => "warning",
            DraftStatus.Ready => "success",
            DraftStatus.Submitted => "info",
            DraftStatus.Failed => "danger",
            DraftStatus.Cancelled => "secondary",
            _ => "secondary"
        };
    }
}
