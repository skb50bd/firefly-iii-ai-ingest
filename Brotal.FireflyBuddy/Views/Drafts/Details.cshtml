@model Brotal.FireflyBuddy.Data.TransactionDraft
@{
    ViewData["Title"] = "Draft Details";
}

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-file-earmark-text"></i> Transaction Draft Details
                </h5>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-sm-3"><strong>Description:</strong></div>
                    <div class="col-sm-9">@Model.Description</div>
                </div>
                <div class="row mb-3">
                    <div class="col-sm-3"><strong>Amount:</strong></div>
                    <div class="col-sm-9">
                        <span class="text-success fw-bold fs-5">@Model.Amount.ToString("C")</span>
                        <span class="text-muted">@Model.CurrencyCode</span>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-sm-3"><strong>Type:</strong></div>
                    <div class="col-sm-9">
                        <span class="badge bg-info fs-6">@Model.Type</span>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-sm-3"><strong>Date:</strong></div>
                    <div class="col-sm-9">@Model.Date.ToString("MMM dd, yyyy HH:mm")</div>
                </div>
                <div class="row mb-3">
                    <div class="col-sm-3"><strong>Status:</strong></div>
                    <div class="col-sm-9">
                        <span class="badge bg-@GetDraftStatusColor(Model.Status) fs-6">@Model.Status</span>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(Model.SourceAccountName))
                {
                    <div class="row mb-3">
                        <div class="col-sm-3"><strong>Source Account:</strong></div>
                        <div class="col-sm-9">@Model.SourceAccountName</div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model.DestinationAccountName))
                {
                    <div class="row mb-3">
                        <div class="col-sm-3"><strong>Destination Account:</strong></div>
                        <div class="col-sm-9">@Model.DestinationAccountName</div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model.CategoryName))
                {
                    <div class="row mb-3">
                        <div class="col-sm-3"><strong>Category:</strong></div>
                        <div class="col-sm-9">@Model.CategoryName</div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model.BudgetName))
                {
                    <div class="row mb-3">
                        <div class="col-sm-3"><strong>Budget:</strong></div>
                        <div class="col-sm-9">@Model.BudgetName</div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model.Tags))
                {
                    <div class="row mb-3">
                        <div class="col-sm-3"><strong>Tags:</strong></div>
                        <div class="col-sm-9">
                            @foreach (var tag in Model.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
                            {
                                <span class="badge bg-secondary me-1">@tag.Trim()</span>
                            }
                        </div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model.Notes))
                {
                    <div class="row mb-3">
                        <div class="col-sm-3"><strong>Notes:</strong></div>
                        <div class="col-sm-9">
                            <div class="border p-3 bg-light rounded">
                                @Model.Notes
                            </div>
                        </div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model.SubscriptionName))
                {
                    <div class="row mb-3">
                        <div class="col-sm-3"><strong>Subscription:</strong></div>
                        <div class="col-sm-9">@Model.SubscriptionName</div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model.ExternalUrl))
                {
                    <div class="row mb-3">
                        <div class="col-sm-3"><strong>External URL:</strong></div>
                        <div class="col-sm-9">
                            <a href="@Model.ExternalUrl" target="_blank" class="text-decoration-none">
                                @Model.ExternalUrl <i class="bi bi-box-arrow-up-right"></i>
                            </a>
                        </div>
                    </div>
                }
                <div class="row mb-3">
                    <div class="col-sm-3"><strong>Created:</strong></div>
                    <div class="col-sm-9">@Model.CreatedAt.ToString("MMM dd, yyyy HH:mm:ss")</div>
                </div>
                @if (Model.SubmittedAt.HasValue)
                {
                    <div class="row mb-3">
                        <div class="col-sm-3"><strong>Submitted:</strong></div>
                        <div class="col-sm-9">@Model.SubmittedAt.Value.ToString("MMM dd, yyyy HH:mm:ss")</div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model.FireflyTransactionId))
                {
                    <div class="row mb-3">
                        <div class="col-sm-3"><strong>Firefly Transaction ID:</strong></div>
                        <div class="col-sm-9">
                            <code>@Model.FireflyTransactionId</code>
                        </div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model.SubmissionError))
                {
                    <div class="row mb-3">
                        <div class="col-sm-3"><strong>Submission Error:</strong></div>
                        <div class="col-sm-9">
                            <div class="alert alert-danger">
                                @Model.SubmissionError
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        @if (Model.IngestMessage != null)
        {
            <div class="card mb-3">
                <div class="card-header">
                    <h6 class="card-title mb-0">
                        <i class="bi bi-chat-text"></i> Original Message
                    </h6>
                </div>
                <div class="card-body">
                    <div class="border p-3 bg-light rounded">
                        @Model.IngestMessage.Text
                    </div>
                    <div class="mt-2">
                        <small class="text-muted">
                            <i class="bi bi-clock"></i> @Model.IngestMessage.CreatedAt.ToString("MMM dd, HH:mm")
                        </small>
                        <span class="badge bg-@GetMessageStatusColor(Model.IngestMessage.Status) ms-2">@Model.IngestMessage.Status</span>
                    </div>
                    <div class="text-center mt-3">
                        <a href="@Url.Action("Details", "Messages", new { id = Model.IngestMessage.Id })" class="btn btn-sm btn-outline-primary">
                            <i class="bi bi-eye"></i> View Message
                        </a>
                    </div>
                </div>
            </div>
        }
        
        <div class="card">
            <div class="card-header">
                <h6 class="card-title mb-0">
                    <i class="bi bi-lightning"></i> Actions
                </h6>
            </div>
            <div class="card-body">
                @if (Model.Status == Brotal.FireflyBuddy.Data.DraftStatus.Pending || Model.Status == Brotal.FireflyBuddy.Data.DraftStatus.Ready)
                {
                    <div class="d-grid gap-2">
                        <a href="@Url.Action("Edit", new { id = Model.Id })" class="btn btn-warning">
                            <i class="bi bi-pencil"></i> Edit Draft
                        </a>
                        <form asp-action="Submit" method="post" class="d-grid">
                            <input type="hidden" name="id" value="@Model.Id" />
                            <button type="submit" class="btn btn-success" onclick="return confirm('Are you sure you want to submit this transaction to Firefly-III?')">
                                <i class="bi bi-send"></i> Submit to Firefly-III
                            </button>
                        </form>
                    </div>
                }
                else if (Model.Status == Brotal.FireflyBuddy.Data.DraftStatus.Submitted)
                {
                    <div class="alert alert-success">
                        <i class="bi bi-check-circle"></i> This draft has been successfully submitted to Firefly-III.
                    </div>
                }
                else if (Model.Status == Brotal.FireflyBuddy.Data.DraftStatus.Failed)
                {
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle"></i> Submission failed. You can try editing and resubmitting.
                    </div>
                    <div class="d-grid gap-2">
                        <a href="@Url.Action("Edit", new { id = Model.Id })" class="btn btn-warning">
                            <i class="bi bi-pencil"></i> Edit Draft
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="mt-3">
    <a href="@Url.Action("Index")" class="btn btn-secondary">
        <i class="bi bi-arrow-left"></i> Back to Drafts
    </a>
</div>

@functions {
    string GetDraftStatusColor(Brotal.FireflyBuddy.Data.DraftStatus status)
    {
        return status switch
        {
            Brotal.FireflyBuddy.Data.DraftStatus.Pending => "warning",
            Brotal.FireflyBuddy.Data.DraftStatus.Ready => "success",
            Brotal.FireflyBuddy.Data.DraftStatus.Submitted => "info",
            Brotal.FireflyBuddy.Data.DraftStatus.Failed => "danger",
            Brotal.FireflyBuddy.Data.DraftStatus.Cancelled => "secondary",
            _ => "secondary"
        };
    }
    
    string GetMessageStatusColor(Brotal.FireflyBuddy.Data.MessageStatus status)
    {
        return status switch
        {
            Brotal.FireflyBuddy.Data.MessageStatus.Pending => "warning",
            Brotal.FireflyBuddy.Data.MessageStatus.Processing => "info",
            Brotal.FireflyBuddy.Data.MessageStatus.Processed => "success",
            Brotal.FireflyBuddy.Data.MessageStatus.Failed => "danger",
            Brotal.FireflyBuddy.Data.MessageStatus.Skipped => "secondary",
            _ => "secondary"
        };
    }
}
