// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// BillPropertiesPaidDatesInner
    /// </summary>
    public partial class BillPropertiesPaidDatesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillPropertiesPaidDatesInner" /> class.
        /// </summary>
        /// <param name="transactionGroupId">Transaction group ID of the transaction linked to this subscription.</param>
        /// <param name="transactionJournalId">Transaction journal ID of the transaction linked to this subscription.</param>
        /// <param name="date">Date the bill was paid.</param>
        /// <param name="subscriptionId">ID of this subscription.</param>
        /// <param name="currencyId">The currency ID of the currency associated with this object.</param>
        /// <param name="currencyName">The currency name of the currency associated with this object.</param>
        /// <param name="currencyCode">The currency code of the currency associated with this object.</param>
        /// <param name="currencySymbol">currencySymbol</param>
        /// <param name="currencyDecimalPlaces">currencyDecimalPlaces</param>
        /// <param name="primaryCurrencyId">The currency ID of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyName">The currency name of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyCode">The currency code of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencySymbol">The currency symbol of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyDecimalPlaces">The currency decimal places of the administration&#39;s primary currency.</param>
        /// <param name="amount">The amount that was paid for this subscription in the subscription&#39;s currency.</param>
        /// <param name="pcAmount">The amount that was paid for this subscription in the administration&#39;s primary currency.</param>
        /// <param name="foreignAmount">The foreign amount that was paid for this subscription in the subscription&#39;s currency.</param>
        /// <param name="pcForeignAmount">The foreign amount that was paid for this subscription in the administration&#39;s primary currency.</param>
        [JsonConstructor]
        public BillPropertiesPaidDatesInner(Option<string?> transactionGroupId = default, Option<string?> transactionJournalId = default, Option<DateTime?> date = default, Option<string?> subscriptionId = default, Option<string?> currencyId = default, Option<string?> currencyName = default, Option<string?> currencyCode = default, Option<string?> currencySymbol = default, Option<int?> currencyDecimalPlaces = default, Option<string?> primaryCurrencyId = default, Option<string?> primaryCurrencyName = default, Option<string?> primaryCurrencyCode = default, Option<string?> primaryCurrencySymbol = default, Option<int?> primaryCurrencyDecimalPlaces = default, Option<string?> amount = default, Option<string?> pcAmount = default, Option<string?> foreignAmount = default, Option<string?> pcForeignAmount = default)
        {
            TransactionGroupIdOption = transactionGroupId;
            TransactionJournalIdOption = transactionJournalId;
            DateOption = date;
            SubscriptionIdOption = subscriptionId;
            CurrencyIdOption = currencyId;
            CurrencyNameOption = currencyName;
            CurrencyCodeOption = currencyCode;
            CurrencySymbolOption = currencySymbol;
            CurrencyDecimalPlacesOption = currencyDecimalPlaces;
            PrimaryCurrencyIdOption = primaryCurrencyId;
            PrimaryCurrencyNameOption = primaryCurrencyName;
            PrimaryCurrencyCodeOption = primaryCurrencyCode;
            PrimaryCurrencySymbolOption = primaryCurrencySymbol;
            PrimaryCurrencyDecimalPlacesOption = primaryCurrencyDecimalPlaces;
            AmountOption = amount;
            PcAmountOption = pcAmount;
            ForeignAmountOption = foreignAmount;
            PcForeignAmountOption = pcForeignAmount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of TransactionGroupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TransactionGroupIdOption { get; }

        /// <summary>
        /// Transaction group ID of the transaction linked to this subscription.
        /// </summary>
        /// <value>Transaction group ID of the transaction linked to this subscription.</value>
        /* <example>123</example> */
        [JsonPropertyName("transaction_group_id")]
        public string? TransactionGroupId { get { return this.TransactionGroupIdOption; } }

        /// <summary>
        /// Used to track the state of TransactionJournalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TransactionJournalIdOption { get; }

        /// <summary>
        /// Transaction journal ID of the transaction linked to this subscription.
        /// </summary>
        /// <value>Transaction journal ID of the transaction linked to this subscription.</value>
        /* <example>123</example> */
        [JsonPropertyName("transaction_journal_id")]
        public string? TransactionJournalId { get { return this.TransactionJournalIdOption; } }

        /// <summary>
        /// Used to track the state of Date
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DateOption { get; }

        /// <summary>
        /// Date the bill was paid.
        /// </summary>
        /// <value>Date the bill was paid.</value>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("date")]
        public DateTime? Date { get { return this.DateOption; } }

        /// <summary>
        /// Used to track the state of SubscriptionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubscriptionIdOption { get; }

        /// <summary>
        /// ID of this subscription.
        /// </summary>
        /// <value>ID of this subscription.</value>
        /* <example>123</example> */
        [JsonPropertyName("subscription_id")]
        public string? SubscriptionId { get { return this.SubscriptionIdOption; } }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyIdOption { get; private set; }

        /// <summary>
        /// The currency ID of the currency associated with this object.
        /// </summary>
        /// <value>The currency ID of the currency associated with this object.</value>
        /* <example>5</example> */
        [JsonPropertyName("currency_id")]
        public string? CurrencyId { get { return this.CurrencyIdOption; } set { this.CurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyNameOption { get; private set; }

        /// <summary>
        /// The currency name of the currency associated with this object.
        /// </summary>
        /// <value>The currency name of the currency associated with this object.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("currency_name")]
        public string? CurrencyName { get { return this.CurrencyNameOption; } set { this.CurrencyNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The currency code of the currency associated with this object.
        /// </summary>
        /// <value>The currency code of the currency associated with this object.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("currency_code")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencySymbolOption { get; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        /* <example>$</example> */
        [JsonPropertyName("currency_symbol")]
        public string? CurrencySymbol { get { return this.CurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of CurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// Gets or Sets CurrencyDecimalPlaces
        /// </summary>
        /* <example>2</example> */
        [JsonPropertyName("currency_decimal_places")]
        public int? CurrencyDecimalPlaces { get { return this.CurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyIdOption { get; }

        /// <summary>
        /// The currency ID of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency ID of the administration&#39;s primary currency.</value>
        /* <example>5</example> */
        [JsonPropertyName("primary_currency_id")]
        public string? PrimaryCurrencyId { get { return this.PrimaryCurrencyIdOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyNameOption { get; }

        /// <summary>
        /// The currency name of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency name of the administration&#39;s primary currency.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("primary_currency_name")]
        public string? PrimaryCurrencyName { get { return this.PrimaryCurrencyNameOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyCodeOption { get; }

        /// <summary>
        /// The currency code of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency code of the administration&#39;s primary currency.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("primary_currency_code")]
        public string? PrimaryCurrencyCode { get { return this.PrimaryCurrencyCodeOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencySymbolOption { get; }

        /// <summary>
        /// The currency symbol of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency symbol of the administration&#39;s primary currency.</value>
        /* <example>$</example> */
        [JsonPropertyName("primary_currency_symbol")]
        public string? PrimaryCurrencySymbol { get { return this.PrimaryCurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PrimaryCurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// The currency decimal places of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency decimal places of the administration&#39;s primary currency.</value>
        /* <example>2</example> */
        [JsonPropertyName("primary_currency_decimal_places")]
        public int? PrimaryCurrencyDecimalPlaces { get { return this.PrimaryCurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AmountOption { get; private set; }

        /// <summary>
        /// The amount that was paid for this subscription in the subscription&#39;s currency.
        /// </summary>
        /// <value>The amount that was paid for this subscription in the subscription&#39;s currency.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("amount")]
        public string? Amount { get { return this.AmountOption; } set { this.AmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of PcAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcAmountOption { get; private set; }

        /// <summary>
        /// The amount that was paid for this subscription in the administration&#39;s primary currency.
        /// </summary>
        /// <value>The amount that was paid for this subscription in the administration&#39;s primary currency.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("pc_amount")]
        public string? PcAmount { get { return this.PcAmountOption; } set { this.PcAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForeignAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForeignAmountOption { get; private set; }

        /// <summary>
        /// The foreign amount that was paid for this subscription in the subscription&#39;s currency.
        /// </summary>
        /// <value>The foreign amount that was paid for this subscription in the subscription&#39;s currency.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("foreign_amount")]
        public string? ForeignAmount { get { return this.ForeignAmountOption; } set { this.ForeignAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of PcForeignAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcForeignAmountOption { get; private set; }

        /// <summary>
        /// The foreign amount that was paid for this subscription in the administration&#39;s primary currency.
        /// </summary>
        /// <value>The foreign amount that was paid for this subscription in the administration&#39;s primary currency.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("pc_foreign_amount")]
        public string? PcForeignAmount { get { return this.PcForeignAmountOption; } set { this.PcForeignAmountOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BillPropertiesPaidDatesInner {\n");
            sb.Append("  TransactionGroupId: ").Append(TransactionGroupId).Append("\n");
            sb.Append("  TransactionJournalId: ").Append(TransactionJournalId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  CurrencyDecimalPlaces: ").Append(CurrencyDecimalPlaces).Append("\n");
            sb.Append("  PrimaryCurrencyId: ").Append(PrimaryCurrencyId).Append("\n");
            sb.Append("  PrimaryCurrencyName: ").Append(PrimaryCurrencyName).Append("\n");
            sb.Append("  PrimaryCurrencyCode: ").Append(PrimaryCurrencyCode).Append("\n");
            sb.Append("  PrimaryCurrencySymbol: ").Append(PrimaryCurrencySymbol).Append("\n");
            sb.Append("  PrimaryCurrencyDecimalPlaces: ").Append(PrimaryCurrencyDecimalPlaces).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PcAmount: ").Append(PcAmount).Append("\n");
            sb.Append("  ForeignAmount: ").Append(ForeignAmount).Append("\n");
            sb.Append("  PcForeignAmount: ").Append(PcForeignAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BillPropertiesPaidDatesInner" />
    /// </summary>
    public class BillPropertiesPaidDatesInnerJsonConverter : JsonConverter<BillPropertiesPaidDatesInner>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="BillPropertiesPaidDatesInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BillPropertiesPaidDatesInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> transactionGroupId = default;
            Option<string?> transactionJournalId = default;
            Option<DateTime?> date = default;
            Option<string?> subscriptionId = default;
            Option<string?> currencyId = default;
            Option<string?> currencyName = default;
            Option<string?> currencyCode = default;
            Option<string?> currencySymbol = default;
            Option<int?> currencyDecimalPlaces = default;
            Option<string?> primaryCurrencyId = default;
            Option<string?> primaryCurrencyName = default;
            Option<string?> primaryCurrencyCode = default;
            Option<string?> primaryCurrencySymbol = default;
            Option<int?> primaryCurrencyDecimalPlaces = default;
            Option<string?> amount = default;
            Option<string?> pcAmount = default;
            Option<string?> foreignAmount = default;
            Option<string?> pcForeignAmount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "transaction_group_id":
                            transactionGroupId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "transaction_journal_id":
                            transactionJournalId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "date":
                            date = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "subscription_id":
                            subscriptionId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_name":
                            currencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_symbol":
                            currencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_decimal_places":
                            currencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "primary_currency_id":
                            primaryCurrencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_name":
                            primaryCurrencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_code":
                            primaryCurrencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_symbol":
                            primaryCurrencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_decimal_places":
                            primaryCurrencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "amount":
                            amount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pc_amount":
                            pcAmount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "foreign_amount":
                            foreignAmount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pc_foreign_amount":
                            pcForeignAmount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (transactionGroupId.IsSet && transactionGroupId.Value == null)
                throw new ArgumentNullException(nameof(transactionGroupId), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            if (transactionJournalId.IsSet && transactionJournalId.Value == null)
                throw new ArgumentNullException(nameof(transactionJournalId), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            if (date.IsSet && date.Value == null)
                throw new ArgumentNullException(nameof(date), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            if (subscriptionId.IsSet && subscriptionId.Value == null)
                throw new ArgumentNullException(nameof(subscriptionId), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            if (currencyName.IsSet && currencyName.Value == null)
                throw new ArgumentNullException(nameof(currencyName), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            if (currencySymbol.IsSet && currencySymbol.Value == null)
                throw new ArgumentNullException(nameof(currencySymbol), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            if (currencyDecimalPlaces.IsSet && currencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(currencyDecimalPlaces), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            if (primaryCurrencyId.IsSet && primaryCurrencyId.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyId), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            if (primaryCurrencyName.IsSet && primaryCurrencyName.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyName), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            if (primaryCurrencyCode.IsSet && primaryCurrencyCode.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyCode), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            if (primaryCurrencySymbol.IsSet && primaryCurrencySymbol.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencySymbol), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            if (primaryCurrencyDecimalPlaces.IsSet && primaryCurrencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyDecimalPlaces), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            if (pcAmount.IsSet && pcAmount.Value == null)
                throw new ArgumentNullException(nameof(pcAmount), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            if (foreignAmount.IsSet && foreignAmount.Value == null)
                throw new ArgumentNullException(nameof(foreignAmount), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            if (pcForeignAmount.IsSet && pcForeignAmount.Value == null)
                throw new ArgumentNullException(nameof(pcForeignAmount), "Property is not nullable for class BillPropertiesPaidDatesInner.");

            return new BillPropertiesPaidDatesInner(transactionGroupId, transactionJournalId, date, subscriptionId, currencyId, currencyName, currencyCode, currencySymbol, currencyDecimalPlaces, primaryCurrencyId, primaryCurrencyName, primaryCurrencyCode, primaryCurrencySymbol, primaryCurrencyDecimalPlaces, amount, pcAmount, foreignAmount, pcForeignAmount);
        }

        /// <summary>
        /// Serializes a <see cref="BillPropertiesPaidDatesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billPropertiesPaidDatesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BillPropertiesPaidDatesInner billPropertiesPaidDatesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, billPropertiesPaidDatesInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BillPropertiesPaidDatesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billPropertiesPaidDatesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BillPropertiesPaidDatesInner billPropertiesPaidDatesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (billPropertiesPaidDatesInner.TransactionGroupIdOption.IsSet && billPropertiesPaidDatesInner.TransactionGroupId == null)
                throw new ArgumentNullException(nameof(billPropertiesPaidDatesInner.TransactionGroupId), "Property is required for class BillPropertiesPaidDatesInner.");

            if (billPropertiesPaidDatesInner.TransactionJournalIdOption.IsSet && billPropertiesPaidDatesInner.TransactionJournalId == null)
                throw new ArgumentNullException(nameof(billPropertiesPaidDatesInner.TransactionJournalId), "Property is required for class BillPropertiesPaidDatesInner.");

            if (billPropertiesPaidDatesInner.SubscriptionIdOption.IsSet && billPropertiesPaidDatesInner.SubscriptionId == null)
                throw new ArgumentNullException(nameof(billPropertiesPaidDatesInner.SubscriptionId), "Property is required for class BillPropertiesPaidDatesInner.");

            if (billPropertiesPaidDatesInner.CurrencyIdOption.IsSet && billPropertiesPaidDatesInner.CurrencyId == null)
                throw new ArgumentNullException(nameof(billPropertiesPaidDatesInner.CurrencyId), "Property is required for class BillPropertiesPaidDatesInner.");

            if (billPropertiesPaidDatesInner.CurrencyNameOption.IsSet && billPropertiesPaidDatesInner.CurrencyName == null)
                throw new ArgumentNullException(nameof(billPropertiesPaidDatesInner.CurrencyName), "Property is required for class BillPropertiesPaidDatesInner.");

            if (billPropertiesPaidDatesInner.CurrencyCodeOption.IsSet && billPropertiesPaidDatesInner.CurrencyCode == null)
                throw new ArgumentNullException(nameof(billPropertiesPaidDatesInner.CurrencyCode), "Property is required for class BillPropertiesPaidDatesInner.");

            if (billPropertiesPaidDatesInner.CurrencySymbolOption.IsSet && billPropertiesPaidDatesInner.CurrencySymbol == null)
                throw new ArgumentNullException(nameof(billPropertiesPaidDatesInner.CurrencySymbol), "Property is required for class BillPropertiesPaidDatesInner.");

            if (billPropertiesPaidDatesInner.PrimaryCurrencyIdOption.IsSet && billPropertiesPaidDatesInner.PrimaryCurrencyId == null)
                throw new ArgumentNullException(nameof(billPropertiesPaidDatesInner.PrimaryCurrencyId), "Property is required for class BillPropertiesPaidDatesInner.");

            if (billPropertiesPaidDatesInner.PrimaryCurrencyNameOption.IsSet && billPropertiesPaidDatesInner.PrimaryCurrencyName == null)
                throw new ArgumentNullException(nameof(billPropertiesPaidDatesInner.PrimaryCurrencyName), "Property is required for class BillPropertiesPaidDatesInner.");

            if (billPropertiesPaidDatesInner.PrimaryCurrencyCodeOption.IsSet && billPropertiesPaidDatesInner.PrimaryCurrencyCode == null)
                throw new ArgumentNullException(nameof(billPropertiesPaidDatesInner.PrimaryCurrencyCode), "Property is required for class BillPropertiesPaidDatesInner.");

            if (billPropertiesPaidDatesInner.PrimaryCurrencySymbolOption.IsSet && billPropertiesPaidDatesInner.PrimaryCurrencySymbol == null)
                throw new ArgumentNullException(nameof(billPropertiesPaidDatesInner.PrimaryCurrencySymbol), "Property is required for class BillPropertiesPaidDatesInner.");

            if (billPropertiesPaidDatesInner.AmountOption.IsSet && billPropertiesPaidDatesInner.Amount == null)
                throw new ArgumentNullException(nameof(billPropertiesPaidDatesInner.Amount), "Property is required for class BillPropertiesPaidDatesInner.");

            if (billPropertiesPaidDatesInner.PcAmountOption.IsSet && billPropertiesPaidDatesInner.PcAmount == null)
                throw new ArgumentNullException(nameof(billPropertiesPaidDatesInner.PcAmount), "Property is required for class BillPropertiesPaidDatesInner.");

            if (billPropertiesPaidDatesInner.ForeignAmountOption.IsSet && billPropertiesPaidDatesInner.ForeignAmount == null)
                throw new ArgumentNullException(nameof(billPropertiesPaidDatesInner.ForeignAmount), "Property is required for class BillPropertiesPaidDatesInner.");

            if (billPropertiesPaidDatesInner.PcForeignAmountOption.IsSet && billPropertiesPaidDatesInner.PcForeignAmount == null)
                throw new ArgumentNullException(nameof(billPropertiesPaidDatesInner.PcForeignAmount), "Property is required for class BillPropertiesPaidDatesInner.");

            if (billPropertiesPaidDatesInner.TransactionGroupIdOption.IsSet)
                writer.WriteString("transaction_group_id", billPropertiesPaidDatesInner.TransactionGroupId);

            if (billPropertiesPaidDatesInner.TransactionJournalIdOption.IsSet)
                writer.WriteString("transaction_journal_id", billPropertiesPaidDatesInner.TransactionJournalId);

            if (billPropertiesPaidDatesInner.DateOption.IsSet)
                writer.WriteString("date", billPropertiesPaidDatesInner.DateOption.Value!.Value.ToString(DateFormat));

            if (billPropertiesPaidDatesInner.SubscriptionIdOption.IsSet)
                writer.WriteString("subscription_id", billPropertiesPaidDatesInner.SubscriptionId);

            if (billPropertiesPaidDatesInner.CurrencyIdOption.IsSet)
                writer.WriteString("currency_id", billPropertiesPaidDatesInner.CurrencyId);

            if (billPropertiesPaidDatesInner.CurrencyNameOption.IsSet)
                writer.WriteString("currency_name", billPropertiesPaidDatesInner.CurrencyName);

            if (billPropertiesPaidDatesInner.CurrencyCodeOption.IsSet)
                writer.WriteString("currency_code", billPropertiesPaidDatesInner.CurrencyCode);

            if (billPropertiesPaidDatesInner.CurrencySymbolOption.IsSet)
                writer.WriteString("currency_symbol", billPropertiesPaidDatesInner.CurrencySymbol);

            if (billPropertiesPaidDatesInner.CurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("currency_decimal_places", billPropertiesPaidDatesInner.CurrencyDecimalPlacesOption.Value!.Value);

            if (billPropertiesPaidDatesInner.PrimaryCurrencyIdOption.IsSet)
                writer.WriteString("primary_currency_id", billPropertiesPaidDatesInner.PrimaryCurrencyId);

            if (billPropertiesPaidDatesInner.PrimaryCurrencyNameOption.IsSet)
                writer.WriteString("primary_currency_name", billPropertiesPaidDatesInner.PrimaryCurrencyName);

            if (billPropertiesPaidDatesInner.PrimaryCurrencyCodeOption.IsSet)
                writer.WriteString("primary_currency_code", billPropertiesPaidDatesInner.PrimaryCurrencyCode);

            if (billPropertiesPaidDatesInner.PrimaryCurrencySymbolOption.IsSet)
                writer.WriteString("primary_currency_symbol", billPropertiesPaidDatesInner.PrimaryCurrencySymbol);

            if (billPropertiesPaidDatesInner.PrimaryCurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("primary_currency_decimal_places", billPropertiesPaidDatesInner.PrimaryCurrencyDecimalPlacesOption.Value!.Value);

            if (billPropertiesPaidDatesInner.AmountOption.IsSet)
                writer.WriteString("amount", billPropertiesPaidDatesInner.Amount);

            if (billPropertiesPaidDatesInner.PcAmountOption.IsSet)
                writer.WriteString("pc_amount", billPropertiesPaidDatesInner.PcAmount);

            if (billPropertiesPaidDatesInner.ForeignAmountOption.IsSet)
                writer.WriteString("foreign_amount", billPropertiesPaidDatesInner.ForeignAmount);

            if (billPropertiesPaidDatesInner.PcForeignAmountOption.IsSet)
                writer.WriteString("pc_foreign_amount", billPropertiesPaidDatesInner.PcForeignAmount);
        }
    }
}
