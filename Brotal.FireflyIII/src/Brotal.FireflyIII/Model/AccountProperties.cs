// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// AccountProperties
    /// </summary>
    public partial class AccountProperties : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountProperties" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="type">type</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="active">active (default to true)</param>
        /// <param name="order">Order of the account. Is NULL if account is not asset or liability.</param>
        /// <param name="accountRole">accountRole</param>
        /// <param name="objectGroupId">The group ID of the group this object is part of. NULL if no group.</param>
        /// <param name="objectGroupOrder">The order of the group. At least 1, for the highest sorting.</param>
        /// <param name="objectGroupTitle">The name of the group. NULL if no group.</param>
        /// <param name="objectHasCurrencySetting">Indicates whether the account has a currency setting. If false, the account uses the administration&#39;s primary currency. Asset accounts and liability accounts always have a currency setting, while expense and revenue accounts do not.</param>
        /// <param name="currencyId">The currency ID of the currency associated with this object.</param>
        /// <param name="currencyName">The currency name of the currency associated with this object.</param>
        /// <param name="currencyCode">The currency code of the currency associated with this object.</param>
        /// <param name="currencySymbol">currencySymbol</param>
        /// <param name="currencyDecimalPlaces">currencyDecimalPlaces</param>
        /// <param name="primaryCurrencyId">The currency ID of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyName">The currency name of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyCode">The currency code of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencySymbol">The currency symbol of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyDecimalPlaces">The currency decimal places of the administration&#39;s primary currency.</param>
        /// <param name="currentBalance">The current balance of the account in the account&#39;s currency. If the account has no currency, this is the balance in the administration&#39;s primary currency. Either way, the &#x60;currency_*&#x60; fields reflect the currency used.</param>
        /// <param name="pcCurrentBalance">The current balance of the account in the administration&#39;s primary currency. The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.</param>
        /// <param name="openingBalance">Represents the opening balance, the initial amount this account holds in the currency of the account or the administration&#39;s primary currency if the account has no currency. Either way, the &#x60;currency_*&#x60; fields reflect the currency used.</param>
        /// <param name="pcOpeningBalance">The opening balance of the account in the administration&#39;s primary currency (pc). The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.</param>
        /// <param name="virtualBalance">The virtual balance of the account in the account&#39;s currency or the administration&#39;s primary currency if the account has no currency.</param>
        /// <param name="pcVirtualBalance">The virtual balance of the account in the administration&#39;s primary currency (pc). The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.</param>
        /// <param name="debtAmount">In liability accounts (loans, debts and mortgages), this is the amount of debt in the account&#39;s currency (see the &#x60;currency_*&#x60; fields). In asset accounts, this is NULL.</param>
        /// <param name="pcDebtAmount">In liability accounts (loans, debts and mortgages), this is the amount of debt in the administration&#39;s primary currency (see the &#x60;currency_*&#x60; fields. In asset accounts, this is NULL.</param>
        /// <param name="currentBalanceDate">The timestamp for this date is always 23:59:59, to indicate it&#39;s the balance at the very END of that particular day.</param>
        /// <param name="notes">notes</param>
        /// <param name="monthlyPaymentDate">Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank.</param>
        /// <param name="creditCardType">creditCardType</param>
        /// <param name="accountNumber">accountNumber</param>
        /// <param name="iban">iban</param>
        /// <param name="bic">bic</param>
        /// <param name="openingBalanceDate">Represents the date of the opening balance.</param>
        /// <param name="liabilityType">liabilityType</param>
        /// <param name="liabilityDirection">liabilityDirection</param>
        /// <param name="interest">Mandatory when type is liability. Interest percentage.</param>
        /// <param name="interestPeriod">interestPeriod</param>
        /// <param name="includeNetWorth">includeNetWorth (default to true)</param>
        /// <param name="longitude">Latitude of the accounts&#39;s location, if applicable. Can be used to draw a map.</param>
        /// <param name="latitude">Latitude of the accounts&#39;s location, if applicable. Can be used to draw a map.</param>
        /// <param name="zoomLevel">Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.</param>
        /// <param name="lastActivity">Last activity of the account.</param>
        [JsonConstructor]
        public AccountProperties(string name, ShortAccountTypeProperty type, Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default, Option<bool?> active = default, Option<int?> order = default, Option<AccountRoleProperty?> accountRole = default, Option<string?> objectGroupId = default, Option<int?> objectGroupOrder = default, Option<string?> objectGroupTitle = default, Option<bool?> objectHasCurrencySetting = default, Option<string?> currencyId = default, Option<string?> currencyName = default, Option<string?> currencyCode = default, Option<string?> currencySymbol = default, Option<int?> currencyDecimalPlaces = default, Option<string?> primaryCurrencyId = default, Option<string?> primaryCurrencyName = default, Option<string?> primaryCurrencyCode = default, Option<string?> primaryCurrencySymbol = default, Option<int?> primaryCurrencyDecimalPlaces = default, Option<string?> currentBalance = default, Option<string?> pcCurrentBalance = default, Option<string?> openingBalance = default, Option<string?> pcOpeningBalance = default, Option<string?> virtualBalance = default, Option<string?> pcVirtualBalance = default, Option<string?> debtAmount = default, Option<string?> pcDebtAmount = default, Option<DateTime?> currentBalanceDate = default, Option<string?> notes = default, Option<DateTime?> monthlyPaymentDate = default, Option<CreditCardTypeProperty?> creditCardType = default, Option<string?> accountNumber = default, Option<string?> iban = default, Option<string?> bic = default, Option<DateTime?> openingBalanceDate = default, Option<LiabilityTypeProperty?> liabilityType = default, Option<LiabilityDirectionProperty?> liabilityDirection = default, Option<string?> interest = default, Option<InterestPeriodProperty?> interestPeriod = default, Option<bool?> includeNetWorth = default, Option<double?> longitude = default, Option<double?> latitude = default, Option<int?> zoomLevel = default, Option<DateTime?> lastActivity = default)
        {
            Name = name;
            Type = type;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            ActiveOption = active;
            OrderOption = order;
            AccountRoleOption = accountRole;
            ObjectGroupIdOption = objectGroupId;
            ObjectGroupOrderOption = objectGroupOrder;
            ObjectGroupTitleOption = objectGroupTitle;
            ObjectHasCurrencySettingOption = objectHasCurrencySetting;
            CurrencyIdOption = currencyId;
            CurrencyNameOption = currencyName;
            CurrencyCodeOption = currencyCode;
            CurrencySymbolOption = currencySymbol;
            CurrencyDecimalPlacesOption = currencyDecimalPlaces;
            PrimaryCurrencyIdOption = primaryCurrencyId;
            PrimaryCurrencyNameOption = primaryCurrencyName;
            PrimaryCurrencyCodeOption = primaryCurrencyCode;
            PrimaryCurrencySymbolOption = primaryCurrencySymbol;
            PrimaryCurrencyDecimalPlacesOption = primaryCurrencyDecimalPlaces;
            CurrentBalanceOption = currentBalance;
            PcCurrentBalanceOption = pcCurrentBalance;
            OpeningBalanceOption = openingBalance;
            PcOpeningBalanceOption = pcOpeningBalance;
            VirtualBalanceOption = virtualBalance;
            PcVirtualBalanceOption = pcVirtualBalance;
            DebtAmountOption = debtAmount;
            PcDebtAmountOption = pcDebtAmount;
            CurrentBalanceDateOption = currentBalanceDate;
            NotesOption = notes;
            MonthlyPaymentDateOption = monthlyPaymentDate;
            CreditCardTypeOption = creditCardType;
            AccountNumberOption = accountNumber;
            IbanOption = iban;
            BicOption = bic;
            OpeningBalanceDateOption = openingBalanceDate;
            LiabilityTypeOption = liabilityType;
            LiabilityDirectionOption = liabilityDirection;
            InterestOption = interest;
            InterestPeriodOption = interestPeriod;
            IncludeNetWorthOption = includeNetWorth;
            LongitudeOption = longitude;
            LatitudeOption = latitude;
            ZoomLevelOption = zoomLevel;
            LastActivityOption = lastActivity;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public ShortAccountTypeProperty Type { get; set; }

        /// <summary>
        /// Used to track the state of AccountRole
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccountRoleProperty?> AccountRoleOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccountRole
        /// </summary>
        [JsonPropertyName("account_role")]
        public AccountRoleProperty? AccountRole { get { return this.AccountRoleOption; } set { this.AccountRoleOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreditCardType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreditCardTypeProperty?> CreditCardTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreditCardType
        /// </summary>
        [JsonPropertyName("credit_card_type")]
        public CreditCardTypeProperty? CreditCardType { get { return this.CreditCardTypeOption; } set { this.CreditCardTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of LiabilityType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<LiabilityTypeProperty?> LiabilityTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets LiabilityType
        /// </summary>
        [JsonPropertyName("liability_type")]
        public LiabilityTypeProperty? LiabilityType { get { return this.LiabilityTypeOption; } set { this.LiabilityTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of LiabilityDirection
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<LiabilityDirectionProperty?> LiabilityDirectionOption { get; private set; }

        /// <summary>
        /// Gets or Sets LiabilityDirection
        /// </summary>
        [JsonPropertyName("liability_direction")]
        public LiabilityDirectionProperty? LiabilityDirection { get { return this.LiabilityDirectionOption; } set { this.LiabilityDirectionOption = new(value); } }

        /// <summary>
        /// Used to track the state of InterestPeriod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InterestPeriodProperty?> InterestPeriodOption { get; private set; }

        /// <summary>
        /// Gets or Sets InterestPeriod
        /// </summary>
        [JsonPropertyName("interest_period")]
        public InterestPeriodProperty? InterestPeriod { get { return this.InterestPeriodOption; } set { this.InterestPeriodOption = new(value); } }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>My checking account</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Order
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OrderOption { get; private set; }

        /// <summary>
        /// Order of the account. Is NULL if account is not asset or liability.
        /// </summary>
        /// <value>Order of the account. Is NULL if account is not asset or liability.</value>
        /* <example>1</example> */
        [JsonPropertyName("order")]
        public int? Order { get { return this.OrderOption; } set { this.OrderOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectGroupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ObjectGroupIdOption { get; private set; }

        /// <summary>
        /// The group ID of the group this object is part of. NULL if no group.
        /// </summary>
        /// <value>The group ID of the group this object is part of. NULL if no group.</value>
        /* <example>5</example> */
        [JsonPropertyName("object_group_id")]
        public string? ObjectGroupId { get { return this.ObjectGroupIdOption; } set { this.ObjectGroupIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectGroupOrder
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ObjectGroupOrderOption { get; }

        /// <summary>
        /// The order of the group. At least 1, for the highest sorting.
        /// </summary>
        /// <value>The order of the group. At least 1, for the highest sorting.</value>
        /* <example>5</example> */
        [JsonPropertyName("object_group_order")]
        public int? ObjectGroupOrder { get { return this.ObjectGroupOrderOption; } }

        /// <summary>
        /// Used to track the state of ObjectGroupTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ObjectGroupTitleOption { get; private set; }

        /// <summary>
        /// The name of the group. NULL if no group.
        /// </summary>
        /// <value>The name of the group. NULL if no group.</value>
        /* <example>Example Group</example> */
        [JsonPropertyName("object_group_title")]
        public string? ObjectGroupTitle { get { return this.ObjectGroupTitleOption; } set { this.ObjectGroupTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectHasCurrencySetting
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ObjectHasCurrencySettingOption { get; }

        /// <summary>
        /// Indicates whether the account has a currency setting. If false, the account uses the administration&#39;s primary currency. Asset accounts and liability accounts always have a currency setting, while expense and revenue accounts do not.
        /// </summary>
        /// <value>Indicates whether the account has a currency setting. If false, the account uses the administration&#39;s primary currency. Asset accounts and liability accounts always have a currency setting, while expense and revenue accounts do not.</value>
        /* <example>true</example> */
        [JsonPropertyName("object_has_currency_setting")]
        public bool? ObjectHasCurrencySetting { get { return this.ObjectHasCurrencySettingOption; } }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyIdOption { get; private set; }

        /// <summary>
        /// The currency ID of the currency associated with this object.
        /// </summary>
        /// <value>The currency ID of the currency associated with this object.</value>
        /* <example>5</example> */
        [JsonPropertyName("currency_id")]
        public string? CurrencyId { get { return this.CurrencyIdOption; } set { this.CurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyNameOption { get; private set; }

        /// <summary>
        /// The currency name of the currency associated with this object.
        /// </summary>
        /// <value>The currency name of the currency associated with this object.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("currency_name")]
        public string? CurrencyName { get { return this.CurrencyNameOption; } set { this.CurrencyNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The currency code of the currency associated with this object.
        /// </summary>
        /// <value>The currency code of the currency associated with this object.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("currency_code")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencySymbolOption { get; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        /* <example>$</example> */
        [JsonPropertyName("currency_symbol")]
        public string? CurrencySymbol { get { return this.CurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of CurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// Gets or Sets CurrencyDecimalPlaces
        /// </summary>
        /* <example>2</example> */
        [JsonPropertyName("currency_decimal_places")]
        public int? CurrencyDecimalPlaces { get { return this.CurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyIdOption { get; }

        /// <summary>
        /// The currency ID of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency ID of the administration&#39;s primary currency.</value>
        /* <example>5</example> */
        [JsonPropertyName("primary_currency_id")]
        public string? PrimaryCurrencyId { get { return this.PrimaryCurrencyIdOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyNameOption { get; }

        /// <summary>
        /// The currency name of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency name of the administration&#39;s primary currency.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("primary_currency_name")]
        public string? PrimaryCurrencyName { get { return this.PrimaryCurrencyNameOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyCodeOption { get; }

        /// <summary>
        /// The currency code of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency code of the administration&#39;s primary currency.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("primary_currency_code")]
        public string? PrimaryCurrencyCode { get { return this.PrimaryCurrencyCodeOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencySymbolOption { get; }

        /// <summary>
        /// The currency symbol of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency symbol of the administration&#39;s primary currency.</value>
        /* <example>$</example> */
        [JsonPropertyName("primary_currency_symbol")]
        public string? PrimaryCurrencySymbol { get { return this.PrimaryCurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PrimaryCurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// The currency decimal places of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency decimal places of the administration&#39;s primary currency.</value>
        /* <example>2</example> */
        [JsonPropertyName("primary_currency_decimal_places")]
        public int? PrimaryCurrencyDecimalPlaces { get { return this.PrimaryCurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of CurrentBalance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrentBalanceOption { get; }

        /// <summary>
        /// The current balance of the account in the account&#39;s currency. If the account has no currency, this is the balance in the administration&#39;s primary currency. Either way, the &#x60;currency_*&#x60; fields reflect the currency used.
        /// </summary>
        /// <value>The current balance of the account in the account&#39;s currency. If the account has no currency, this is the balance in the administration&#39;s primary currency. Either way, the &#x60;currency_*&#x60; fields reflect the currency used.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("current_balance")]
        public string? CurrentBalance { get { return this.CurrentBalanceOption; } }

        /// <summary>
        /// Used to track the state of PcCurrentBalance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcCurrentBalanceOption { get; }

        /// <summary>
        /// The current balance of the account in the administration&#39;s primary currency. The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.
        /// </summary>
        /// <value>The current balance of the account in the administration&#39;s primary currency. The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("pc_current_balance")]
        public string? PcCurrentBalance { get { return this.PcCurrentBalanceOption; } }

        /// <summary>
        /// Used to track the state of OpeningBalance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OpeningBalanceOption { get; private set; }

        /// <summary>
        /// Represents the opening balance, the initial amount this account holds in the currency of the account or the administration&#39;s primary currency if the account has no currency. Either way, the &#x60;currency_*&#x60; fields reflect the currency used.
        /// </summary>
        /// <value>Represents the opening balance, the initial amount this account holds in the currency of the account or the administration&#39;s primary currency if the account has no currency. Either way, the &#x60;currency_*&#x60; fields reflect the currency used.</value>
        /* <example>-1012.12</example> */
        [JsonPropertyName("opening_balance")]
        public string? OpeningBalance { get { return this.OpeningBalanceOption; } set { this.OpeningBalanceOption = new(value); } }

        /// <summary>
        /// Used to track the state of PcOpeningBalance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcOpeningBalanceOption { get; private set; }

        /// <summary>
        /// The opening balance of the account in the administration&#39;s primary currency (pc). The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.
        /// </summary>
        /// <value>The opening balance of the account in the administration&#39;s primary currency (pc). The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.</value>
        /* <example>-1012.12</example> */
        [JsonPropertyName("pc_opening_balance")]
        public string? PcOpeningBalance { get { return this.PcOpeningBalanceOption; } set { this.PcOpeningBalanceOption = new(value); } }

        /// <summary>
        /// Used to track the state of VirtualBalance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VirtualBalanceOption { get; private set; }

        /// <summary>
        /// The virtual balance of the account in the account&#39;s currency or the administration&#39;s primary currency if the account has no currency.
        /// </summary>
        /// <value>The virtual balance of the account in the account&#39;s currency or the administration&#39;s primary currency if the account has no currency.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("virtual_balance")]
        public string? VirtualBalance { get { return this.VirtualBalanceOption; } set { this.VirtualBalanceOption = new(value); } }

        /// <summary>
        /// Used to track the state of PcVirtualBalance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcVirtualBalanceOption { get; private set; }

        /// <summary>
        /// The virtual balance of the account in the administration&#39;s primary currency (pc). The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.
        /// </summary>
        /// <value>The virtual balance of the account in the administration&#39;s primary currency (pc). The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("pc_virtual_balance")]
        public string? PcVirtualBalance { get { return this.PcVirtualBalanceOption; } set { this.PcVirtualBalanceOption = new(value); } }

        /// <summary>
        /// Used to track the state of DebtAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DebtAmountOption { get; private set; }

        /// <summary>
        /// In liability accounts (loans, debts and mortgages), this is the amount of debt in the account&#39;s currency (see the &#x60;currency_*&#x60; fields). In asset accounts, this is NULL.
        /// </summary>
        /// <value>In liability accounts (loans, debts and mortgages), this is the amount of debt in the account&#39;s currency (see the &#x60;currency_*&#x60; fields). In asset accounts, this is NULL.</value>
        /* <example>1012.12</example> */
        [JsonPropertyName("debt_amount")]
        public string? DebtAmount { get { return this.DebtAmountOption; } set { this.DebtAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of PcDebtAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcDebtAmountOption { get; private set; }

        /// <summary>
        /// In liability accounts (loans, debts and mortgages), this is the amount of debt in the administration&#39;s primary currency (see the &#x60;currency_*&#x60; fields. In asset accounts, this is NULL.
        /// </summary>
        /// <value>In liability accounts (loans, debts and mortgages), this is the amount of debt in the administration&#39;s primary currency (see the &#x60;currency_*&#x60; fields. In asset accounts, this is NULL.</value>
        /* <example>1012.12</example> */
        [JsonPropertyName("pc_debt_amount")]
        public string? PcDebtAmount { get { return this.PcDebtAmountOption; } set { this.PcDebtAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrentBalanceDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CurrentBalanceDateOption { get; }

        /// <summary>
        /// The timestamp for this date is always 23:59:59, to indicate it&#39;s the balance at the very END of that particular day.
        /// </summary>
        /// <value>The timestamp for this date is always 23:59:59, to indicate it&#39;s the balance at the very END of that particular day.</value>
        /* <example>2025-08-31T23:59:59Z</example> */
        [JsonPropertyName("current_balance_date")]
        public DateTime? CurrentBalanceDate { get { return this.CurrentBalanceDateOption; } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        /* <example>Some example notes</example> */
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Used to track the state of MonthlyPaymentDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> MonthlyPaymentDateOption { get; private set; }

        /// <summary>
        /// Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank.
        /// </summary>
        /// <value>Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank.</value>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("monthly_payment_date")]
        public DateTime? MonthlyPaymentDate { get { return this.MonthlyPaymentDateOption; } set { this.MonthlyPaymentDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AccountNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        /* <example>7009312345678</example> */
        [JsonPropertyName("account_number")]
        public string? AccountNumber { get { return this.AccountNumberOption; } set { this.AccountNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Iban
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IbanOption { get; private set; }

        /// <summary>
        /// Gets or Sets Iban
        /// </summary>
        /* <example>GB98MIDL07009312345678</example> */
        [JsonPropertyName("iban")]
        public string? Iban { get { return this.IbanOption; } set { this.IbanOption = new(value); } }

        /// <summary>
        /// Used to track the state of Bic
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BicOption { get; private set; }

        /// <summary>
        /// Gets or Sets Bic
        /// </summary>
        /* <example>BOFAUS3N</example> */
        [JsonPropertyName("bic")]
        public string? Bic { get { return this.BicOption; } set { this.BicOption = new(value); } }

        /// <summary>
        /// Used to track the state of OpeningBalanceDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> OpeningBalanceDateOption { get; private set; }

        /// <summary>
        /// Represents the date of the opening balance.
        /// </summary>
        /// <value>Represents the date of the opening balance.</value>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("opening_balance_date")]
        public DateTime? OpeningBalanceDate { get { return this.OpeningBalanceDateOption; } set { this.OpeningBalanceDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Interest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InterestOption { get; private set; }

        /// <summary>
        /// Mandatory when type is liability. Interest percentage.
        /// </summary>
        /// <value>Mandatory when type is liability. Interest percentage.</value>
        /* <example>5.3</example> */
        [JsonPropertyName("interest")]
        public string? Interest { get { return this.InterestOption; } set { this.InterestOption = new(value); } }

        /// <summary>
        /// Used to track the state of IncludeNetWorth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IncludeNetWorthOption { get; private set; }

        /// <summary>
        /// Gets or Sets IncludeNetWorth
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("include_net_worth")]
        public bool? IncludeNetWorth { get { return this.IncludeNetWorthOption; } set { this.IncludeNetWorthOption = new(value); } }

        /// <summary>
        /// Used to track the state of Longitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> LongitudeOption { get; private set; }

        /// <summary>
        /// Latitude of the accounts&#39;s location, if applicable. Can be used to draw a map.
        /// </summary>
        /// <value>Latitude of the accounts&#39;s location, if applicable. Can be used to draw a map.</value>
        /* <example>5.916667</example> */
        [JsonPropertyName("longitude")]
        public double? Longitude { get { return this.LongitudeOption; } set { this.LongitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Latitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> LatitudeOption { get; private set; }

        /// <summary>
        /// Latitude of the accounts&#39;s location, if applicable. Can be used to draw a map.
        /// </summary>
        /// <value>Latitude of the accounts&#39;s location, if applicable. Can be used to draw a map.</value>
        /* <example>51.983333</example> */
        [JsonPropertyName("latitude")]
        public double? Latitude { get { return this.LatitudeOption; } set { this.LatitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ZoomLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ZoomLevelOption { get; private set; }

        /// <summary>
        /// Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.
        /// </summary>
        /// <value>Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.</value>
        /* <example>6</example> */
        [JsonPropertyName("zoom_level")]
        public int? ZoomLevel { get { return this.ZoomLevelOption; } set { this.ZoomLevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastActivity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastActivityOption { get; private set; }

        /// <summary>
        /// Last activity of the account.
        /// </summary>
        /// <value>Last activity of the account.</value>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("last_activity")]
        public DateTime? LastActivity { get { return this.LastActivityOption; } set { this.LastActivityOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountProperties {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  AccountRole: ").Append(AccountRole).Append("\n");
            sb.Append("  ObjectGroupId: ").Append(ObjectGroupId).Append("\n");
            sb.Append("  ObjectGroupOrder: ").Append(ObjectGroupOrder).Append("\n");
            sb.Append("  ObjectGroupTitle: ").Append(ObjectGroupTitle).Append("\n");
            sb.Append("  ObjectHasCurrencySetting: ").Append(ObjectHasCurrencySetting).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  CurrencyDecimalPlaces: ").Append(CurrencyDecimalPlaces).Append("\n");
            sb.Append("  PrimaryCurrencyId: ").Append(PrimaryCurrencyId).Append("\n");
            sb.Append("  PrimaryCurrencyName: ").Append(PrimaryCurrencyName).Append("\n");
            sb.Append("  PrimaryCurrencyCode: ").Append(PrimaryCurrencyCode).Append("\n");
            sb.Append("  PrimaryCurrencySymbol: ").Append(PrimaryCurrencySymbol).Append("\n");
            sb.Append("  PrimaryCurrencyDecimalPlaces: ").Append(PrimaryCurrencyDecimalPlaces).Append("\n");
            sb.Append("  CurrentBalance: ").Append(CurrentBalance).Append("\n");
            sb.Append("  PcCurrentBalance: ").Append(PcCurrentBalance).Append("\n");
            sb.Append("  OpeningBalance: ").Append(OpeningBalance).Append("\n");
            sb.Append("  PcOpeningBalance: ").Append(PcOpeningBalance).Append("\n");
            sb.Append("  VirtualBalance: ").Append(VirtualBalance).Append("\n");
            sb.Append("  PcVirtualBalance: ").Append(PcVirtualBalance).Append("\n");
            sb.Append("  DebtAmount: ").Append(DebtAmount).Append("\n");
            sb.Append("  PcDebtAmount: ").Append(PcDebtAmount).Append("\n");
            sb.Append("  CurrentBalanceDate: ").Append(CurrentBalanceDate).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  MonthlyPaymentDate: ").Append(MonthlyPaymentDate).Append("\n");
            sb.Append("  CreditCardType: ").Append(CreditCardType).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  Bic: ").Append(Bic).Append("\n");
            sb.Append("  OpeningBalanceDate: ").Append(OpeningBalanceDate).Append("\n");
            sb.Append("  LiabilityType: ").Append(LiabilityType).Append("\n");
            sb.Append("  LiabilityDirection: ").Append(LiabilityDirection).Append("\n");
            sb.Append("  Interest: ").Append(Interest).Append("\n");
            sb.Append("  InterestPeriod: ").Append(InterestPeriod).Append("\n");
            sb.Append("  IncludeNetWorth: ").Append(IncludeNetWorth).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  ZoomLevel: ").Append(ZoomLevel).Append("\n");
            sb.Append("  LastActivity: ").Append(LastActivity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AccountProperties" />
    /// </summary>
    public class AccountPropertiesJsonConverter : JsonConverter<AccountProperties>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CurrentBalanceDate
        /// </summary>
        public static string CurrentBalanceDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize MonthlyPaymentDate
        /// </summary>
        public static string MonthlyPaymentDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize OpeningBalanceDate
        /// </summary>
        public static string OpeningBalanceDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastActivity
        /// </summary>
        public static string LastActivityFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AccountProperties" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AccountProperties Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<ShortAccountTypeProperty?> type = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<bool?> active = default;
            Option<int?> order = default;
            Option<AccountRoleProperty?> accountRole = default;
            Option<string?> objectGroupId = default;
            Option<int?> objectGroupOrder = default;
            Option<string?> objectGroupTitle = default;
            Option<bool?> objectHasCurrencySetting = default;
            Option<string?> currencyId = default;
            Option<string?> currencyName = default;
            Option<string?> currencyCode = default;
            Option<string?> currencySymbol = default;
            Option<int?> currencyDecimalPlaces = default;
            Option<string?> primaryCurrencyId = default;
            Option<string?> primaryCurrencyName = default;
            Option<string?> primaryCurrencyCode = default;
            Option<string?> primaryCurrencySymbol = default;
            Option<int?> primaryCurrencyDecimalPlaces = default;
            Option<string?> currentBalance = default;
            Option<string?> pcCurrentBalance = default;
            Option<string?> openingBalance = default;
            Option<string?> pcOpeningBalance = default;
            Option<string?> virtualBalance = default;
            Option<string?> pcVirtualBalance = default;
            Option<string?> debtAmount = default;
            Option<string?> pcDebtAmount = default;
            Option<DateTime?> currentBalanceDate = default;
            Option<string?> notes = default;
            Option<DateTime?> monthlyPaymentDate = default;
            Option<CreditCardTypeProperty?> creditCardType = default;
            Option<string?> accountNumber = default;
            Option<string?> iban = default;
            Option<string?> bic = default;
            Option<DateTime?> openingBalanceDate = default;
            Option<LiabilityTypeProperty?> liabilityType = default;
            Option<LiabilityDirectionProperty?> liabilityDirection = default;
            Option<string?> interest = default;
            Option<InterestPeriodProperty?> interestPeriod = default;
            Option<bool?> includeNetWorth = default;
            Option<double?> longitude = default;
            Option<double?> latitude = default;
            Option<int?> zoomLevel = default;
            Option<DateTime?> lastActivity = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ShortAccountTypeProperty?>(ShortAccountTypePropertyValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "active":
                            active = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "order":
                            order = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "account_role":
                            string? accountRoleRawValue = utf8JsonReader.GetString();
                            if (accountRoleRawValue != null)
                                accountRole = new Option<AccountRoleProperty?>(AccountRolePropertyValueConverter.FromStringOrDefault(accountRoleRawValue));
                            break;
                        case "object_group_id":
                            objectGroupId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "object_group_order":
                            objectGroupOrder = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "object_group_title":
                            objectGroupTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "object_has_currency_setting":
                            objectHasCurrencySetting = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_name":
                            currencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_symbol":
                            currencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_decimal_places":
                            currencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "primary_currency_id":
                            primaryCurrencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_name":
                            primaryCurrencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_code":
                            primaryCurrencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_symbol":
                            primaryCurrencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_decimal_places":
                            primaryCurrencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "current_balance":
                            currentBalance = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pc_current_balance":
                            pcCurrentBalance = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "opening_balance":
                            openingBalance = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pc_opening_balance":
                            pcOpeningBalance = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "virtual_balance":
                            virtualBalance = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pc_virtual_balance":
                            pcVirtualBalance = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "debt_amount":
                            debtAmount = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "pc_debt_amount":
                            pcDebtAmount = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "current_balance_date":
                            currentBalanceDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "monthly_payment_date":
                            monthlyPaymentDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "credit_card_type":
                            string? creditCardTypeRawValue = utf8JsonReader.GetString();
                            if (creditCardTypeRawValue != null)
                                creditCardType = new Option<CreditCardTypeProperty?>(CreditCardTypePropertyValueConverter.FromStringOrDefault(creditCardTypeRawValue));
                            break;
                        case "account_number":
                            accountNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "iban":
                            iban = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "bic":
                            bic = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "opening_balance_date":
                            openingBalanceDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "liability_type":
                            string? liabilityTypeRawValue = utf8JsonReader.GetString();
                            if (liabilityTypeRawValue != null)
                                liabilityType = new Option<LiabilityTypeProperty?>(LiabilityTypePropertyValueConverter.FromStringOrDefault(liabilityTypeRawValue));
                            break;
                        case "liability_direction":
                            string? liabilityDirectionRawValue = utf8JsonReader.GetString();
                            if (liabilityDirectionRawValue != null)
                                liabilityDirection = new Option<LiabilityDirectionProperty?>(LiabilityDirectionPropertyValueConverter.FromStringOrDefault(liabilityDirectionRawValue));
                            break;
                        case "interest":
                            interest = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "interest_period":
                            string? interestPeriodRawValue = utf8JsonReader.GetString();
                            if (interestPeriodRawValue != null)
                                interestPeriod = new Option<InterestPeriodProperty?>(InterestPeriodPropertyValueConverter.FromStringOrDefault(interestPeriodRawValue));
                            break;
                        case "include_net_worth":
                            includeNetWorth = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "longitude":
                            longitude = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "latitude":
                            latitude = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "zoom_level":
                            zoomLevel = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "last_activity":
                            lastActivity = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class AccountProperties.", nameof(name));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class AccountProperties.", nameof(type));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class AccountProperties.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class AccountProperties.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class AccountProperties.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class AccountProperties.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class AccountProperties.");

            if (objectHasCurrencySetting.IsSet && objectHasCurrencySetting.Value == null)
                throw new ArgumentNullException(nameof(objectHasCurrencySetting), "Property is not nullable for class AccountProperties.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class AccountProperties.");

            if (currencyName.IsSet && currencyName.Value == null)
                throw new ArgumentNullException(nameof(currencyName), "Property is not nullable for class AccountProperties.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class AccountProperties.");

            if (currencySymbol.IsSet && currencySymbol.Value == null)
                throw new ArgumentNullException(nameof(currencySymbol), "Property is not nullable for class AccountProperties.");

            if (currencyDecimalPlaces.IsSet && currencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(currencyDecimalPlaces), "Property is not nullable for class AccountProperties.");

            if (primaryCurrencyId.IsSet && primaryCurrencyId.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyId), "Property is not nullable for class AccountProperties.");

            if (primaryCurrencyName.IsSet && primaryCurrencyName.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyName), "Property is not nullable for class AccountProperties.");

            if (primaryCurrencyCode.IsSet && primaryCurrencyCode.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyCode), "Property is not nullable for class AccountProperties.");

            if (primaryCurrencySymbol.IsSet && primaryCurrencySymbol.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencySymbol), "Property is not nullable for class AccountProperties.");

            if (primaryCurrencyDecimalPlaces.IsSet && primaryCurrencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyDecimalPlaces), "Property is not nullable for class AccountProperties.");

            if (currentBalance.IsSet && currentBalance.Value == null)
                throw new ArgumentNullException(nameof(currentBalance), "Property is not nullable for class AccountProperties.");

            if (openingBalance.IsSet && openingBalance.Value == null)
                throw new ArgumentNullException(nameof(openingBalance), "Property is not nullable for class AccountProperties.");

            if (pcOpeningBalance.IsSet && pcOpeningBalance.Value == null)
                throw new ArgumentNullException(nameof(pcOpeningBalance), "Property is not nullable for class AccountProperties.");

            if (virtualBalance.IsSet && virtualBalance.Value == null)
                throw new ArgumentNullException(nameof(virtualBalance), "Property is not nullable for class AccountProperties.");

            if (pcVirtualBalance.IsSet && pcVirtualBalance.Value == null)
                throw new ArgumentNullException(nameof(pcVirtualBalance), "Property is not nullable for class AccountProperties.");

            if (currentBalanceDate.IsSet && currentBalanceDate.Value == null)
                throw new ArgumentNullException(nameof(currentBalanceDate), "Property is not nullable for class AccountProperties.");

            if (includeNetWorth.IsSet && includeNetWorth.Value == null)
                throw new ArgumentNullException(nameof(includeNetWorth), "Property is not nullable for class AccountProperties.");

            return new AccountProperties(name.Value!, type.Value!.Value!, createdAt, updatedAt, active, order, accountRole, objectGroupId, objectGroupOrder, objectGroupTitle, objectHasCurrencySetting, currencyId, currencyName, currencyCode, currencySymbol, currencyDecimalPlaces, primaryCurrencyId, primaryCurrencyName, primaryCurrencyCode, primaryCurrencySymbol, primaryCurrencyDecimalPlaces, currentBalance, pcCurrentBalance, openingBalance, pcOpeningBalance, virtualBalance, pcVirtualBalance, debtAmount, pcDebtAmount, currentBalanceDate, notes, monthlyPaymentDate, creditCardType, accountNumber, iban, bic, openingBalanceDate, liabilityType, liabilityDirection, interest, interestPeriod, includeNetWorth, longitude, latitude, zoomLevel, lastActivity);
        }

        /// <summary>
        /// Serializes a <see cref="AccountProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AccountProperties accountProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, accountProperties, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AccountProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AccountProperties accountProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            if (accountProperties.Name == null)
                throw new ArgumentNullException(nameof(accountProperties.Name), "Property is required for class AccountProperties.");

            if (accountProperties.CurrencyIdOption.IsSet && accountProperties.CurrencyId == null)
                throw new ArgumentNullException(nameof(accountProperties.CurrencyId), "Property is required for class AccountProperties.");

            if (accountProperties.CurrencyNameOption.IsSet && accountProperties.CurrencyName == null)
                throw new ArgumentNullException(nameof(accountProperties.CurrencyName), "Property is required for class AccountProperties.");

            if (accountProperties.CurrencyCodeOption.IsSet && accountProperties.CurrencyCode == null)
                throw new ArgumentNullException(nameof(accountProperties.CurrencyCode), "Property is required for class AccountProperties.");

            if (accountProperties.CurrencySymbolOption.IsSet && accountProperties.CurrencySymbol == null)
                throw new ArgumentNullException(nameof(accountProperties.CurrencySymbol), "Property is required for class AccountProperties.");

            if (accountProperties.PrimaryCurrencyIdOption.IsSet && accountProperties.PrimaryCurrencyId == null)
                throw new ArgumentNullException(nameof(accountProperties.PrimaryCurrencyId), "Property is required for class AccountProperties.");

            if (accountProperties.PrimaryCurrencyNameOption.IsSet && accountProperties.PrimaryCurrencyName == null)
                throw new ArgumentNullException(nameof(accountProperties.PrimaryCurrencyName), "Property is required for class AccountProperties.");

            if (accountProperties.PrimaryCurrencyCodeOption.IsSet && accountProperties.PrimaryCurrencyCode == null)
                throw new ArgumentNullException(nameof(accountProperties.PrimaryCurrencyCode), "Property is required for class AccountProperties.");

            if (accountProperties.PrimaryCurrencySymbolOption.IsSet && accountProperties.PrimaryCurrencySymbol == null)
                throw new ArgumentNullException(nameof(accountProperties.PrimaryCurrencySymbol), "Property is required for class AccountProperties.");

            if (accountProperties.CurrentBalanceOption.IsSet && accountProperties.CurrentBalance == null)
                throw new ArgumentNullException(nameof(accountProperties.CurrentBalance), "Property is required for class AccountProperties.");

            if (accountProperties.OpeningBalanceOption.IsSet && accountProperties.OpeningBalance == null)
                throw new ArgumentNullException(nameof(accountProperties.OpeningBalance), "Property is required for class AccountProperties.");

            if (accountProperties.PcOpeningBalanceOption.IsSet && accountProperties.PcOpeningBalance == null)
                throw new ArgumentNullException(nameof(accountProperties.PcOpeningBalance), "Property is required for class AccountProperties.");

            if (accountProperties.VirtualBalanceOption.IsSet && accountProperties.VirtualBalance == null)
                throw new ArgumentNullException(nameof(accountProperties.VirtualBalance), "Property is required for class AccountProperties.");

            if (accountProperties.PcVirtualBalanceOption.IsSet && accountProperties.PcVirtualBalance == null)
                throw new ArgumentNullException(nameof(accountProperties.PcVirtualBalance), "Property is required for class AccountProperties.");

            writer.WriteString("name", accountProperties.Name);

            var typeRawValue = ShortAccountTypePropertyValueConverter.ToJsonValue(accountProperties.Type);
            writer.WriteString("type", typeRawValue);

            if (accountProperties.CreatedAtOption.IsSet)
                writer.WriteString("created_at", accountProperties.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (accountProperties.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", accountProperties.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));

            if (accountProperties.ActiveOption.IsSet)
                writer.WriteBoolean("active", accountProperties.ActiveOption.Value!.Value);

            if (accountProperties.OrderOption.IsSet)
                if (accountProperties.OrderOption.Value != null)
                    writer.WriteNumber("order", accountProperties.OrderOption.Value!.Value);
                else
                    writer.WriteNull("order");

            if (accountProperties.AccountRoleOption.IsSet)
                if (accountProperties.AccountRoleOption!.Value != null)
                {
                    var accountRoleRawValue = AccountRolePropertyValueConverter.ToJsonValue(accountProperties.AccountRoleOption.Value!.Value);
                    writer.WriteString("account_role", accountRoleRawValue);
                }
                else
                    writer.WriteNull("account_role");
            if (accountProperties.ObjectGroupIdOption.IsSet)
                if (accountProperties.ObjectGroupIdOption.Value != null)
                    writer.WriteString("object_group_id", accountProperties.ObjectGroupId);
                else
                    writer.WriteNull("object_group_id");

            if (accountProperties.ObjectGroupOrderOption.IsSet)
                if (accountProperties.ObjectGroupOrderOption.Value != null)
                    writer.WriteNumber("object_group_order", accountProperties.ObjectGroupOrderOption.Value!.Value);
                else
                    writer.WriteNull("object_group_order");

            if (accountProperties.ObjectGroupTitleOption.IsSet)
                if (accountProperties.ObjectGroupTitleOption.Value != null)
                    writer.WriteString("object_group_title", accountProperties.ObjectGroupTitle);
                else
                    writer.WriteNull("object_group_title");

            if (accountProperties.ObjectHasCurrencySettingOption.IsSet)
                writer.WriteBoolean("object_has_currency_setting", accountProperties.ObjectHasCurrencySettingOption.Value!.Value);

            if (accountProperties.CurrencyIdOption.IsSet)
                writer.WriteString("currency_id", accountProperties.CurrencyId);

            if (accountProperties.CurrencyNameOption.IsSet)
                writer.WriteString("currency_name", accountProperties.CurrencyName);

            if (accountProperties.CurrencyCodeOption.IsSet)
                writer.WriteString("currency_code", accountProperties.CurrencyCode);

            if (accountProperties.CurrencySymbolOption.IsSet)
                writer.WriteString("currency_symbol", accountProperties.CurrencySymbol);

            if (accountProperties.CurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("currency_decimal_places", accountProperties.CurrencyDecimalPlacesOption.Value!.Value);

            if (accountProperties.PrimaryCurrencyIdOption.IsSet)
                writer.WriteString("primary_currency_id", accountProperties.PrimaryCurrencyId);

            if (accountProperties.PrimaryCurrencyNameOption.IsSet)
                writer.WriteString("primary_currency_name", accountProperties.PrimaryCurrencyName);

            if (accountProperties.PrimaryCurrencyCodeOption.IsSet)
                writer.WriteString("primary_currency_code", accountProperties.PrimaryCurrencyCode);

            if (accountProperties.PrimaryCurrencySymbolOption.IsSet)
                writer.WriteString("primary_currency_symbol", accountProperties.PrimaryCurrencySymbol);

            if (accountProperties.PrimaryCurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("primary_currency_decimal_places", accountProperties.PrimaryCurrencyDecimalPlacesOption.Value!.Value);

            if (accountProperties.CurrentBalanceOption.IsSet)
                writer.WriteString("current_balance", accountProperties.CurrentBalance);

            if (accountProperties.PcCurrentBalanceOption.IsSet)
                if (accountProperties.PcCurrentBalanceOption.Value != null)
                    writer.WriteString("pc_current_balance", accountProperties.PcCurrentBalance);
                else
                    writer.WriteNull("pc_current_balance");

            if (accountProperties.OpeningBalanceOption.IsSet)
                writer.WriteString("opening_balance", accountProperties.OpeningBalance);

            if (accountProperties.PcOpeningBalanceOption.IsSet)
                writer.WriteString("pc_opening_balance", accountProperties.PcOpeningBalance);

            if (accountProperties.VirtualBalanceOption.IsSet)
                writer.WriteString("virtual_balance", accountProperties.VirtualBalance);

            if (accountProperties.PcVirtualBalanceOption.IsSet)
                writer.WriteString("pc_virtual_balance", accountProperties.PcVirtualBalance);

            if (accountProperties.DebtAmountOption.IsSet)
                if (accountProperties.DebtAmountOption.Value != null)
                    writer.WriteString("debt_amount", accountProperties.DebtAmount);
                else
                    writer.WriteNull("debt_amount");

            if (accountProperties.PcDebtAmountOption.IsSet)
                if (accountProperties.PcDebtAmountOption.Value != null)
                    writer.WriteString("pc_debt_amount", accountProperties.PcDebtAmount);
                else
                    writer.WriteNull("pc_debt_amount");

            if (accountProperties.CurrentBalanceDateOption.IsSet)
                writer.WriteString("current_balance_date", accountProperties.CurrentBalanceDateOption.Value!.Value.ToString(CurrentBalanceDateFormat));

            if (accountProperties.NotesOption.IsSet)
                if (accountProperties.NotesOption.Value != null)
                    writer.WriteString("notes", accountProperties.Notes);
                else
                    writer.WriteNull("notes");

            if (accountProperties.MonthlyPaymentDateOption.IsSet)
                if (accountProperties.MonthlyPaymentDateOption.Value != null)
                    writer.WriteString("monthly_payment_date", accountProperties.MonthlyPaymentDateOption.Value!.Value.ToString(MonthlyPaymentDateFormat));
                else
                    writer.WriteNull("monthly_payment_date");

            if (accountProperties.CreditCardTypeOption.IsSet)
                if (accountProperties.CreditCardTypeOption!.Value != null)
                {
                    var creditCardTypeRawValue = CreditCardTypePropertyValueConverter.ToJsonValue(accountProperties.CreditCardTypeOption.Value!.Value);
                    writer.WriteString("credit_card_type", creditCardTypeRawValue);
                }
                else
                    writer.WriteNull("credit_card_type");
            if (accountProperties.AccountNumberOption.IsSet)
                if (accountProperties.AccountNumberOption.Value != null)
                    writer.WriteString("account_number", accountProperties.AccountNumber);
                else
                    writer.WriteNull("account_number");

            if (accountProperties.IbanOption.IsSet)
                if (accountProperties.IbanOption.Value != null)
                    writer.WriteString("iban", accountProperties.Iban);
                else
                    writer.WriteNull("iban");

            if (accountProperties.BicOption.IsSet)
                if (accountProperties.BicOption.Value != null)
                    writer.WriteString("bic", accountProperties.Bic);
                else
                    writer.WriteNull("bic");

            if (accountProperties.OpeningBalanceDateOption.IsSet)
                if (accountProperties.OpeningBalanceDateOption.Value != null)
                    writer.WriteString("opening_balance_date", accountProperties.OpeningBalanceDateOption.Value!.Value.ToString(OpeningBalanceDateFormat));
                else
                    writer.WriteNull("opening_balance_date");

            if (accountProperties.LiabilityTypeOption.IsSet)
                if (accountProperties.LiabilityTypeOption!.Value != null)
                {
                    var liabilityTypeRawValue = LiabilityTypePropertyValueConverter.ToJsonValue(accountProperties.LiabilityTypeOption.Value!.Value);
                    writer.WriteString("liability_type", liabilityTypeRawValue);
                }
                else
                    writer.WriteNull("liability_type");
            if (accountProperties.LiabilityDirectionOption.IsSet)
                if (accountProperties.LiabilityDirectionOption!.Value != null)
                {
                    var liabilityDirectionRawValue = LiabilityDirectionPropertyValueConverter.ToJsonValue(accountProperties.LiabilityDirectionOption.Value!.Value);
                    writer.WriteString("liability_direction", liabilityDirectionRawValue);
                }
                else
                    writer.WriteNull("liability_direction");
            if (accountProperties.InterestOption.IsSet)
                if (accountProperties.InterestOption.Value != null)
                    writer.WriteString("interest", accountProperties.Interest);
                else
                    writer.WriteNull("interest");

            if (accountProperties.InterestPeriodOption.IsSet)
                if (accountProperties.InterestPeriodOption!.Value != null)
                {
                    var interestPeriodRawValue = InterestPeriodPropertyValueConverter.ToJsonValue(accountProperties.InterestPeriodOption.Value!.Value);
                    writer.WriteString("interest_period", interestPeriodRawValue);
                }
                else
                    writer.WriteNull("interest_period");
            if (accountProperties.IncludeNetWorthOption.IsSet)
                writer.WriteBoolean("include_net_worth", accountProperties.IncludeNetWorthOption.Value!.Value);

            if (accountProperties.LongitudeOption.IsSet)
                if (accountProperties.LongitudeOption.Value != null)
                    writer.WriteNumber("longitude", accountProperties.LongitudeOption.Value!.Value);
                else
                    writer.WriteNull("longitude");

            if (accountProperties.LatitudeOption.IsSet)
                if (accountProperties.LatitudeOption.Value != null)
                    writer.WriteNumber("latitude", accountProperties.LatitudeOption.Value!.Value);
                else
                    writer.WriteNull("latitude");

            if (accountProperties.ZoomLevelOption.IsSet)
                if (accountProperties.ZoomLevelOption.Value != null)
                    writer.WriteNumber("zoom_level", accountProperties.ZoomLevelOption.Value!.Value);
                else
                    writer.WriteNull("zoom_level");

            if (accountProperties.LastActivityOption.IsSet)
                if (accountProperties.LastActivityOption.Value != null)
                    writer.WriteString("last_activity", accountProperties.LastActivityOption.Value!.Value.ToString(LastActivityFormat));
                else
                    writer.WriteNull("last_activity");
        }
    }
}
