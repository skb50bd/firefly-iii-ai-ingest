// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// BillProperties
    /// </summary>
    public partial class BillProperties : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillProperties" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="name">The name of the subscription.</param>
        /// <param name="objectHasCurrencySetting">Indicates whether the object has a currency setting. If false, the object uses the administration&#39;s primary currency.</param>
        /// <param name="currencyId">The currency ID of the currency associated with this object.</param>
        /// <param name="currencyName">The currency name of the currency associated with this object.</param>
        /// <param name="currencyCode">The currency code of the currency associated with this object.</param>
        /// <param name="currencySymbol">currencySymbol</param>
        /// <param name="currencyDecimalPlaces">currencyDecimalPlaces</param>
        /// <param name="primaryCurrencyId">The currency ID of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyName">The currency name of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyCode">The currency code of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencySymbol">The currency symbol of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyDecimalPlaces">The currency decimal places of the administration&#39;s primary currency.</param>
        /// <param name="amountMin">The minimum amount that is expected for this subscription in the subscription&#39;s currency.</param>
        /// <param name="pcAmountMin">The minimum amount that is expected for this subscription in the administration&#39;s primary currency.</param>
        /// <param name="amountMax">The maximum amount that is expected for this subscription in the subscription&#39;s currency.</param>
        /// <param name="pcAmountMax">The maximum amount that is expected for this subscription in the administration&#39;s primary currency.</param>
        /// <param name="amountAvg">The average amount that is expected for this subscription in the subscription&#39;s currency.</param>
        /// <param name="pcAmountAvg">The average amount that is expected for this subscription in the administration&#39;s primary currency.</param>
        /// <param name="date">date</param>
        /// <param name="endDate">The date after which this subscription is no longer valid or applicable</param>
        /// <param name="extensionDate">The date before which the subscription must be renewed (or cancelled)</param>
        /// <param name="repeatFreq">repeatFreq</param>
        /// <param name="skip">How often the subscription will be skipped. 1 means a bi-monthly subscription.</param>
        /// <param name="active">If the subscription is active.</param>
        /// <param name="order">Order of the subscription.</param>
        /// <param name="notes">notes</param>
        /// <param name="objectGroupId">The group ID of the group this object is part of. NULL if no group.</param>
        /// <param name="objectGroupOrder">The order of the group. At least 1, for the highest sorting.</param>
        /// <param name="objectGroupTitle">The name of the group. NULL if no group.</param>
        /// <param name="paidDates">Array of past transactions when the subscription was paid.</param>
        /// <param name="payDates">Array of future dates when the bill is expected to be paid. Autogenerated.</param>
        /// <param name="nextExpectedMatch">When the subscription is expected to be due.</param>
        /// <param name="nextExpectedMatchDiff">Formatted (locally) when the subscription is due.</param>
        [JsonConstructor]
        public BillProperties(Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default, Option<string?> name = default, Option<bool?> objectHasCurrencySetting = default, Option<string?> currencyId = default, Option<string?> currencyName = default, Option<string?> currencyCode = default, Option<string?> currencySymbol = default, Option<int?> currencyDecimalPlaces = default, Option<string?> primaryCurrencyId = default, Option<string?> primaryCurrencyName = default, Option<string?> primaryCurrencyCode = default, Option<string?> primaryCurrencySymbol = default, Option<int?> primaryCurrencyDecimalPlaces = default, Option<string?> amountMin = default, Option<string?> pcAmountMin = default, Option<string?> amountMax = default, Option<string?> pcAmountMax = default, Option<string?> amountAvg = default, Option<string?> pcAmountAvg = default, Option<DateTime?> date = default, Option<DateTime?> endDate = default, Option<DateTime?> extensionDate = default, Option<BillRepeatFrequency?> repeatFreq = default, Option<int?> skip = default, Option<bool?> active = default, Option<int?> order = default, Option<string?> notes = default, Option<int?> objectGroupId = default, Option<int?> objectGroupOrder = default, Option<string?> objectGroupTitle = default, Option<List<BillPropertiesPaidDatesInner>?> paidDates = default, Option<List<DateTime>?> payDates = default, Option<DateTime?> nextExpectedMatch = default, Option<string?> nextExpectedMatchDiff = default)
        {
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            NameOption = name;
            ObjectHasCurrencySettingOption = objectHasCurrencySetting;
            CurrencyIdOption = currencyId;
            CurrencyNameOption = currencyName;
            CurrencyCodeOption = currencyCode;
            CurrencySymbolOption = currencySymbol;
            CurrencyDecimalPlacesOption = currencyDecimalPlaces;
            PrimaryCurrencyIdOption = primaryCurrencyId;
            PrimaryCurrencyNameOption = primaryCurrencyName;
            PrimaryCurrencyCodeOption = primaryCurrencyCode;
            PrimaryCurrencySymbolOption = primaryCurrencySymbol;
            PrimaryCurrencyDecimalPlacesOption = primaryCurrencyDecimalPlaces;
            AmountMinOption = amountMin;
            PcAmountMinOption = pcAmountMin;
            AmountMaxOption = amountMax;
            PcAmountMaxOption = pcAmountMax;
            AmountAvgOption = amountAvg;
            PcAmountAvgOption = pcAmountAvg;
            DateOption = date;
            EndDateOption = endDate;
            ExtensionDateOption = extensionDate;
            RepeatFreqOption = repeatFreq;
            SkipOption = skip;
            ActiveOption = active;
            OrderOption = order;
            NotesOption = notes;
            ObjectGroupIdOption = objectGroupId;
            ObjectGroupOrderOption = objectGroupOrder;
            ObjectGroupTitleOption = objectGroupTitle;
            PaidDatesOption = paidDates;
            PayDatesOption = payDates;
            NextExpectedMatchOption = nextExpectedMatch;
            NextExpectedMatchDiffOption = nextExpectedMatchDiff;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of RepeatFreq
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BillRepeatFrequency?> RepeatFreqOption { get; private set; }

        /// <summary>
        /// Gets or Sets RepeatFreq
        /// </summary>
        [JsonPropertyName("repeat_freq")]
        public BillRepeatFrequency? RepeatFreq { get { return this.RepeatFreqOption; } set { this.RepeatFreqOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The name of the subscription.
        /// </summary>
        /// <value>The name of the subscription.</value>
        /* <example>Rent</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectHasCurrencySetting
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ObjectHasCurrencySettingOption { get; }

        /// <summary>
        /// Indicates whether the object has a currency setting. If false, the object uses the administration&#39;s primary currency.
        /// </summary>
        /// <value>Indicates whether the object has a currency setting. If false, the object uses the administration&#39;s primary currency.</value>
        /* <example>true</example> */
        [JsonPropertyName("object_has_currency_setting")]
        public bool? ObjectHasCurrencySetting { get { return this.ObjectHasCurrencySettingOption; } }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyIdOption { get; private set; }

        /// <summary>
        /// The currency ID of the currency associated with this object.
        /// </summary>
        /// <value>The currency ID of the currency associated with this object.</value>
        /* <example>5</example> */
        [JsonPropertyName("currency_id")]
        public string? CurrencyId { get { return this.CurrencyIdOption; } set { this.CurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyNameOption { get; private set; }

        /// <summary>
        /// The currency name of the currency associated with this object.
        /// </summary>
        /// <value>The currency name of the currency associated with this object.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("currency_name")]
        public string? CurrencyName { get { return this.CurrencyNameOption; } set { this.CurrencyNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The currency code of the currency associated with this object.
        /// </summary>
        /// <value>The currency code of the currency associated with this object.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("currency_code")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencySymbolOption { get; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        /* <example>$</example> */
        [JsonPropertyName("currency_symbol")]
        public string? CurrencySymbol { get { return this.CurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of CurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// Gets or Sets CurrencyDecimalPlaces
        /// </summary>
        /* <example>2</example> */
        [JsonPropertyName("currency_decimal_places")]
        public int? CurrencyDecimalPlaces { get { return this.CurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyIdOption { get; }

        /// <summary>
        /// The currency ID of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency ID of the administration&#39;s primary currency.</value>
        /* <example>5</example> */
        [JsonPropertyName("primary_currency_id")]
        public string? PrimaryCurrencyId { get { return this.PrimaryCurrencyIdOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyNameOption { get; }

        /// <summary>
        /// The currency name of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency name of the administration&#39;s primary currency.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("primary_currency_name")]
        public string? PrimaryCurrencyName { get { return this.PrimaryCurrencyNameOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyCodeOption { get; }

        /// <summary>
        /// The currency code of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency code of the administration&#39;s primary currency.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("primary_currency_code")]
        public string? PrimaryCurrencyCode { get { return this.PrimaryCurrencyCodeOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencySymbolOption { get; }

        /// <summary>
        /// The currency symbol of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency symbol of the administration&#39;s primary currency.</value>
        /* <example>$</example> */
        [JsonPropertyName("primary_currency_symbol")]
        public string? PrimaryCurrencySymbol { get { return this.PrimaryCurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PrimaryCurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// The currency decimal places of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency decimal places of the administration&#39;s primary currency.</value>
        /* <example>2</example> */
        [JsonPropertyName("primary_currency_decimal_places")]
        public int? PrimaryCurrencyDecimalPlaces { get { return this.PrimaryCurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of AmountMin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AmountMinOption { get; private set; }

        /// <summary>
        /// The minimum amount that is expected for this subscription in the subscription&#39;s currency.
        /// </summary>
        /// <value>The minimum amount that is expected for this subscription in the subscription&#39;s currency.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("amount_min")]
        public string? AmountMin { get { return this.AmountMinOption; } set { this.AmountMinOption = new(value); } }

        /// <summary>
        /// Used to track the state of PcAmountMin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcAmountMinOption { get; private set; }

        /// <summary>
        /// The minimum amount that is expected for this subscription in the administration&#39;s primary currency.
        /// </summary>
        /// <value>The minimum amount that is expected for this subscription in the administration&#39;s primary currency.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("pc_amount_min")]
        public string? PcAmountMin { get { return this.PcAmountMinOption; } set { this.PcAmountMinOption = new(value); } }

        /// <summary>
        /// Used to track the state of AmountMax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AmountMaxOption { get; private set; }

        /// <summary>
        /// The maximum amount that is expected for this subscription in the subscription&#39;s currency.
        /// </summary>
        /// <value>The maximum amount that is expected for this subscription in the subscription&#39;s currency.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("amount_max")]
        public string? AmountMax { get { return this.AmountMaxOption; } set { this.AmountMaxOption = new(value); } }

        /// <summary>
        /// Used to track the state of PcAmountMax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcAmountMaxOption { get; private set; }

        /// <summary>
        /// The maximum amount that is expected for this subscription in the administration&#39;s primary currency.
        /// </summary>
        /// <value>The maximum amount that is expected for this subscription in the administration&#39;s primary currency.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("pc_amount_max")]
        public string? PcAmountMax { get { return this.PcAmountMaxOption; } set { this.PcAmountMaxOption = new(value); } }

        /// <summary>
        /// Used to track the state of AmountAvg
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AmountAvgOption { get; private set; }

        /// <summary>
        /// The average amount that is expected for this subscription in the subscription&#39;s currency.
        /// </summary>
        /// <value>The average amount that is expected for this subscription in the subscription&#39;s currency.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("amount_avg")]
        public string? AmountAvg { get { return this.AmountAvgOption; } set { this.AmountAvgOption = new(value); } }

        /// <summary>
        /// Used to track the state of PcAmountAvg
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcAmountAvgOption { get; private set; }

        /// <summary>
        /// The average amount that is expected for this subscription in the administration&#39;s primary currency.
        /// </summary>
        /// <value>The average amount that is expected for this subscription in the administration&#39;s primary currency.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("pc_amount_avg")]
        public string? PcAmountAvg { get { return this.PcAmountAvgOption; } set { this.PcAmountAvgOption = new(value); } }

        /// <summary>
        /// Used to track the state of Date
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("date")]
        public DateTime? Date { get { return this.DateOption; } set { this.DateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> EndDateOption { get; private set; }

        /// <summary>
        /// The date after which this subscription is no longer valid or applicable
        /// </summary>
        /// <value>The date after which this subscription is no longer valid or applicable</value>
        /* <example>2025-08-31T23:59:59Z</example> */
        [JsonPropertyName("end_date")]
        public DateTime? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExtensionDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ExtensionDateOption { get; private set; }

        /// <summary>
        /// The date before which the subscription must be renewed (or cancelled)
        /// </summary>
        /// <value>The date before which the subscription must be renewed (or cancelled)</value>
        /* <example>2025-08-31T23:59:59Z</example> */
        [JsonPropertyName("extension_date")]
        public DateTime? ExtensionDate { get { return this.ExtensionDateOption; } set { this.ExtensionDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Skip
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SkipOption { get; private set; }

        /// <summary>
        /// How often the subscription will be skipped. 1 means a bi-monthly subscription.
        /// </summary>
        /// <value>How often the subscription will be skipped. 1 means a bi-monthly subscription.</value>
        /* <example>0</example> */
        [JsonPropertyName("skip")]
        public int? Skip { get { return this.SkipOption; } set { this.SkipOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// If the subscription is active.
        /// </summary>
        /// <value>If the subscription is active.</value>
        /* <example>true</example> */
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Order
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OrderOption { get; private set; }

        /// <summary>
        /// Order of the subscription.
        /// </summary>
        /// <value>Order of the subscription.</value>
        /* <example>1</example> */
        [JsonPropertyName("order")]
        public int? Order { get { return this.OrderOption; } set { this.OrderOption = new(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        /* <example>Some example notes</example> */
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectGroupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ObjectGroupIdOption { get; private set; }

        /// <summary>
        /// The group ID of the group this object is part of. NULL if no group.
        /// </summary>
        /// <value>The group ID of the group this object is part of. NULL if no group.</value>
        /* <example>5</example> */
        [JsonPropertyName("object_group_id")]
        public int? ObjectGroupId { get { return this.ObjectGroupIdOption; } set { this.ObjectGroupIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectGroupOrder
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ObjectGroupOrderOption { get; }

        /// <summary>
        /// The order of the group. At least 1, for the highest sorting.
        /// </summary>
        /// <value>The order of the group. At least 1, for the highest sorting.</value>
        /* <example>5</example> */
        [JsonPropertyName("object_group_order")]
        public int? ObjectGroupOrder { get { return this.ObjectGroupOrderOption; } }

        /// <summary>
        /// Used to track the state of ObjectGroupTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ObjectGroupTitleOption { get; private set; }

        /// <summary>
        /// The name of the group. NULL if no group.
        /// </summary>
        /// <value>The name of the group. NULL if no group.</value>
        /* <example>Example Group</example> */
        [JsonPropertyName("object_group_title")]
        public string? ObjectGroupTitle { get { return this.ObjectGroupTitleOption; } set { this.ObjectGroupTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of PaidDates
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<BillPropertiesPaidDatesInner>?> PaidDatesOption { get; }

        /// <summary>
        /// Array of past transactions when the subscription was paid.
        /// </summary>
        /// <value>Array of past transactions when the subscription was paid.</value>
        [JsonPropertyName("paid_dates")]
        public List<BillPropertiesPaidDatesInner>? PaidDates { get { return this.PaidDatesOption; } }

        /// <summary>
        /// Used to track the state of PayDates
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DateTime>?> PayDatesOption { get; }

        /// <summary>
        /// Array of future dates when the bill is expected to be paid. Autogenerated.
        /// </summary>
        /// <value>Array of future dates when the bill is expected to be paid. Autogenerated.</value>
        [JsonPropertyName("pay_dates")]
        public List<DateTime>? PayDates { get { return this.PayDatesOption; } }

        /// <summary>
        /// Used to track the state of NextExpectedMatch
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> NextExpectedMatchOption { get; }

        /// <summary>
        /// When the subscription is expected to be due.
        /// </summary>
        /// <value>When the subscription is expected to be due.</value>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("next_expected_match")]
        public DateTime? NextExpectedMatch { get { return this.NextExpectedMatchOption; } }

        /// <summary>
        /// Used to track the state of NextExpectedMatchDiff
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NextExpectedMatchDiffOption { get; }

        /// <summary>
        /// Formatted (locally) when the subscription is due.
        /// </summary>
        /// <value>Formatted (locally) when the subscription is due.</value>
        /* <example>today</example> */
        [JsonPropertyName("next_expected_match_diff")]
        public string? NextExpectedMatchDiff { get { return this.NextExpectedMatchDiffOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BillProperties {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ObjectHasCurrencySetting: ").Append(ObjectHasCurrencySetting).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  CurrencyDecimalPlaces: ").Append(CurrencyDecimalPlaces).Append("\n");
            sb.Append("  PrimaryCurrencyId: ").Append(PrimaryCurrencyId).Append("\n");
            sb.Append("  PrimaryCurrencyName: ").Append(PrimaryCurrencyName).Append("\n");
            sb.Append("  PrimaryCurrencyCode: ").Append(PrimaryCurrencyCode).Append("\n");
            sb.Append("  PrimaryCurrencySymbol: ").Append(PrimaryCurrencySymbol).Append("\n");
            sb.Append("  PrimaryCurrencyDecimalPlaces: ").Append(PrimaryCurrencyDecimalPlaces).Append("\n");
            sb.Append("  AmountMin: ").Append(AmountMin).Append("\n");
            sb.Append("  PcAmountMin: ").Append(PcAmountMin).Append("\n");
            sb.Append("  AmountMax: ").Append(AmountMax).Append("\n");
            sb.Append("  PcAmountMax: ").Append(PcAmountMax).Append("\n");
            sb.Append("  AmountAvg: ").Append(AmountAvg).Append("\n");
            sb.Append("  PcAmountAvg: ").Append(PcAmountAvg).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ExtensionDate: ").Append(ExtensionDate).Append("\n");
            sb.Append("  RepeatFreq: ").Append(RepeatFreq).Append("\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ObjectGroupId: ").Append(ObjectGroupId).Append("\n");
            sb.Append("  ObjectGroupOrder: ").Append(ObjectGroupOrder).Append("\n");
            sb.Append("  ObjectGroupTitle: ").Append(ObjectGroupTitle).Append("\n");
            sb.Append("  PaidDates: ").Append(PaidDates).Append("\n");
            sb.Append("  PayDates: ").Append(PayDates).Append("\n");
            sb.Append("  NextExpectedMatch: ").Append(NextExpectedMatch).Append("\n");
            sb.Append("  NextExpectedMatchDiff: ").Append(NextExpectedMatchDiff).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BillProperties" />
    /// </summary>
    public class BillPropertiesJsonConverter : JsonConverter<BillProperties>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ExtensionDate
        /// </summary>
        public static string ExtensionDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize NextExpectedMatch
        /// </summary>
        public static string NextExpectedMatchFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="BillProperties" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BillProperties Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<string?> name = default;
            Option<bool?> objectHasCurrencySetting = default;
            Option<string?> currencyId = default;
            Option<string?> currencyName = default;
            Option<string?> currencyCode = default;
            Option<string?> currencySymbol = default;
            Option<int?> currencyDecimalPlaces = default;
            Option<string?> primaryCurrencyId = default;
            Option<string?> primaryCurrencyName = default;
            Option<string?> primaryCurrencyCode = default;
            Option<string?> primaryCurrencySymbol = default;
            Option<int?> primaryCurrencyDecimalPlaces = default;
            Option<string?> amountMin = default;
            Option<string?> pcAmountMin = default;
            Option<string?> amountMax = default;
            Option<string?> pcAmountMax = default;
            Option<string?> amountAvg = default;
            Option<string?> pcAmountAvg = default;
            Option<DateTime?> date = default;
            Option<DateTime?> endDate = default;
            Option<DateTime?> extensionDate = default;
            Option<BillRepeatFrequency?> repeatFreq = default;
            Option<int?> skip = default;
            Option<bool?> active = default;
            Option<int?> order = default;
            Option<string?> notes = default;
            Option<int?> objectGroupId = default;
            Option<int?> objectGroupOrder = default;
            Option<string?> objectGroupTitle = default;
            Option<List<BillPropertiesPaidDatesInner>?> paidDates = default;
            Option<List<DateTime>?> payDates = default;
            Option<DateTime?> nextExpectedMatch = default;
            Option<string?> nextExpectedMatchDiff = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "object_has_currency_setting":
                            objectHasCurrencySetting = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_name":
                            currencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_symbol":
                            currencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_decimal_places":
                            currencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "primary_currency_id":
                            primaryCurrencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_name":
                            primaryCurrencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_code":
                            primaryCurrencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_symbol":
                            primaryCurrencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_decimal_places":
                            primaryCurrencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "amount_min":
                            amountMin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pc_amount_min":
                            pcAmountMin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "amount_max":
                            amountMax = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pc_amount_max":
                            pcAmountMax = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "amount_avg":
                            amountAvg = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pc_amount_avg":
                            pcAmountAvg = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "date":
                            date = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "end_date":
                            endDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "extension_date":
                            extensionDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "repeat_freq":
                            string? repeatFreqRawValue = utf8JsonReader.GetString();
                            if (repeatFreqRawValue != null)
                                repeatFreq = new Option<BillRepeatFrequency?>(BillRepeatFrequencyValueConverter.FromStringOrDefault(repeatFreqRawValue));
                            break;
                        case "skip":
                            skip = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "active":
                            active = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "order":
                            order = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "object_group_id":
                            objectGroupId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "object_group_order":
                            objectGroupOrder = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "object_group_title":
                            objectGroupTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "paid_dates":
                            paidDates = new Option<List<BillPropertiesPaidDatesInner>?>(JsonSerializer.Deserialize<List<BillPropertiesPaidDatesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pay_dates":
                            payDates = new Option<List<DateTime>?>(JsonSerializer.Deserialize<List<DateTime>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "next_expected_match":
                            nextExpectedMatch = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "next_expected_match_diff":
                            nextExpectedMatchDiff = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class BillProperties.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class BillProperties.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class BillProperties.");

            if (objectHasCurrencySetting.IsSet && objectHasCurrencySetting.Value == null)
                throw new ArgumentNullException(nameof(objectHasCurrencySetting), "Property is not nullable for class BillProperties.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class BillProperties.");

            if (currencyName.IsSet && currencyName.Value == null)
                throw new ArgumentNullException(nameof(currencyName), "Property is not nullable for class BillProperties.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class BillProperties.");

            if (currencySymbol.IsSet && currencySymbol.Value == null)
                throw new ArgumentNullException(nameof(currencySymbol), "Property is not nullable for class BillProperties.");

            if (currencyDecimalPlaces.IsSet && currencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(currencyDecimalPlaces), "Property is not nullable for class BillProperties.");

            if (primaryCurrencyId.IsSet && primaryCurrencyId.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyId), "Property is not nullable for class BillProperties.");

            if (primaryCurrencyName.IsSet && primaryCurrencyName.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyName), "Property is not nullable for class BillProperties.");

            if (primaryCurrencyCode.IsSet && primaryCurrencyCode.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyCode), "Property is not nullable for class BillProperties.");

            if (primaryCurrencySymbol.IsSet && primaryCurrencySymbol.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencySymbol), "Property is not nullable for class BillProperties.");

            if (primaryCurrencyDecimalPlaces.IsSet && primaryCurrencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyDecimalPlaces), "Property is not nullable for class BillProperties.");

            if (amountMin.IsSet && amountMin.Value == null)
                throw new ArgumentNullException(nameof(amountMin), "Property is not nullable for class BillProperties.");

            if (pcAmountMin.IsSet && pcAmountMin.Value == null)
                throw new ArgumentNullException(nameof(pcAmountMin), "Property is not nullable for class BillProperties.");

            if (amountMax.IsSet && amountMax.Value == null)
                throw new ArgumentNullException(nameof(amountMax), "Property is not nullable for class BillProperties.");

            if (pcAmountMax.IsSet && pcAmountMax.Value == null)
                throw new ArgumentNullException(nameof(pcAmountMax), "Property is not nullable for class BillProperties.");

            if (amountAvg.IsSet && amountAvg.Value == null)
                throw new ArgumentNullException(nameof(amountAvg), "Property is not nullable for class BillProperties.");

            if (pcAmountAvg.IsSet && pcAmountAvg.Value == null)
                throw new ArgumentNullException(nameof(pcAmountAvg), "Property is not nullable for class BillProperties.");

            if (date.IsSet && date.Value == null)
                throw new ArgumentNullException(nameof(date), "Property is not nullable for class BillProperties.");

            if (repeatFreq.IsSet && repeatFreq.Value == null)
                throw new ArgumentNullException(nameof(repeatFreq), "Property is not nullable for class BillProperties.");

            if (skip.IsSet && skip.Value == null)
                throw new ArgumentNullException(nameof(skip), "Property is not nullable for class BillProperties.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class BillProperties.");

            if (order.IsSet && order.Value == null)
                throw new ArgumentNullException(nameof(order), "Property is not nullable for class BillProperties.");

            if (paidDates.IsSet && paidDates.Value == null)
                throw new ArgumentNullException(nameof(paidDates), "Property is not nullable for class BillProperties.");

            if (payDates.IsSet && payDates.Value == null)
                throw new ArgumentNullException(nameof(payDates), "Property is not nullable for class BillProperties.");

            return new BillProperties(createdAt, updatedAt, name, objectHasCurrencySetting, currencyId, currencyName, currencyCode, currencySymbol, currencyDecimalPlaces, primaryCurrencyId, primaryCurrencyName, primaryCurrencyCode, primaryCurrencySymbol, primaryCurrencyDecimalPlaces, amountMin, pcAmountMin, amountMax, pcAmountMax, amountAvg, pcAmountAvg, date, endDate, extensionDate, repeatFreq, skip, active, order, notes, objectGroupId, objectGroupOrder, objectGroupTitle, paidDates, payDates, nextExpectedMatch, nextExpectedMatchDiff);
        }

        /// <summary>
        /// Serializes a <see cref="BillProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BillProperties billProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, billProperties, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BillProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BillProperties billProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            if (billProperties.NameOption.IsSet && billProperties.Name == null)
                throw new ArgumentNullException(nameof(billProperties.Name), "Property is required for class BillProperties.");

            if (billProperties.CurrencyIdOption.IsSet && billProperties.CurrencyId == null)
                throw new ArgumentNullException(nameof(billProperties.CurrencyId), "Property is required for class BillProperties.");

            if (billProperties.CurrencyNameOption.IsSet && billProperties.CurrencyName == null)
                throw new ArgumentNullException(nameof(billProperties.CurrencyName), "Property is required for class BillProperties.");

            if (billProperties.CurrencyCodeOption.IsSet && billProperties.CurrencyCode == null)
                throw new ArgumentNullException(nameof(billProperties.CurrencyCode), "Property is required for class BillProperties.");

            if (billProperties.CurrencySymbolOption.IsSet && billProperties.CurrencySymbol == null)
                throw new ArgumentNullException(nameof(billProperties.CurrencySymbol), "Property is required for class BillProperties.");

            if (billProperties.PrimaryCurrencyIdOption.IsSet && billProperties.PrimaryCurrencyId == null)
                throw new ArgumentNullException(nameof(billProperties.PrimaryCurrencyId), "Property is required for class BillProperties.");

            if (billProperties.PrimaryCurrencyNameOption.IsSet && billProperties.PrimaryCurrencyName == null)
                throw new ArgumentNullException(nameof(billProperties.PrimaryCurrencyName), "Property is required for class BillProperties.");

            if (billProperties.PrimaryCurrencyCodeOption.IsSet && billProperties.PrimaryCurrencyCode == null)
                throw new ArgumentNullException(nameof(billProperties.PrimaryCurrencyCode), "Property is required for class BillProperties.");

            if (billProperties.PrimaryCurrencySymbolOption.IsSet && billProperties.PrimaryCurrencySymbol == null)
                throw new ArgumentNullException(nameof(billProperties.PrimaryCurrencySymbol), "Property is required for class BillProperties.");

            if (billProperties.AmountMinOption.IsSet && billProperties.AmountMin == null)
                throw new ArgumentNullException(nameof(billProperties.AmountMin), "Property is required for class BillProperties.");

            if (billProperties.PcAmountMinOption.IsSet && billProperties.PcAmountMin == null)
                throw new ArgumentNullException(nameof(billProperties.PcAmountMin), "Property is required for class BillProperties.");

            if (billProperties.AmountMaxOption.IsSet && billProperties.AmountMax == null)
                throw new ArgumentNullException(nameof(billProperties.AmountMax), "Property is required for class BillProperties.");

            if (billProperties.PcAmountMaxOption.IsSet && billProperties.PcAmountMax == null)
                throw new ArgumentNullException(nameof(billProperties.PcAmountMax), "Property is required for class BillProperties.");

            if (billProperties.AmountAvgOption.IsSet && billProperties.AmountAvg == null)
                throw new ArgumentNullException(nameof(billProperties.AmountAvg), "Property is required for class BillProperties.");

            if (billProperties.PcAmountAvgOption.IsSet && billProperties.PcAmountAvg == null)
                throw new ArgumentNullException(nameof(billProperties.PcAmountAvg), "Property is required for class BillProperties.");

            if (billProperties.PaidDatesOption.IsSet && billProperties.PaidDates == null)
                throw new ArgumentNullException(nameof(billProperties.PaidDates), "Property is required for class BillProperties.");

            if (billProperties.PayDatesOption.IsSet && billProperties.PayDates == null)
                throw new ArgumentNullException(nameof(billProperties.PayDates), "Property is required for class BillProperties.");

            if (billProperties.CreatedAtOption.IsSet)
                writer.WriteString("created_at", billProperties.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (billProperties.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", billProperties.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));

            if (billProperties.NameOption.IsSet)
                writer.WriteString("name", billProperties.Name);

            if (billProperties.ObjectHasCurrencySettingOption.IsSet)
                writer.WriteBoolean("object_has_currency_setting", billProperties.ObjectHasCurrencySettingOption.Value!.Value);

            if (billProperties.CurrencyIdOption.IsSet)
                writer.WriteString("currency_id", billProperties.CurrencyId);

            if (billProperties.CurrencyNameOption.IsSet)
                writer.WriteString("currency_name", billProperties.CurrencyName);

            if (billProperties.CurrencyCodeOption.IsSet)
                writer.WriteString("currency_code", billProperties.CurrencyCode);

            if (billProperties.CurrencySymbolOption.IsSet)
                writer.WriteString("currency_symbol", billProperties.CurrencySymbol);

            if (billProperties.CurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("currency_decimal_places", billProperties.CurrencyDecimalPlacesOption.Value!.Value);

            if (billProperties.PrimaryCurrencyIdOption.IsSet)
                writer.WriteString("primary_currency_id", billProperties.PrimaryCurrencyId);

            if (billProperties.PrimaryCurrencyNameOption.IsSet)
                writer.WriteString("primary_currency_name", billProperties.PrimaryCurrencyName);

            if (billProperties.PrimaryCurrencyCodeOption.IsSet)
                writer.WriteString("primary_currency_code", billProperties.PrimaryCurrencyCode);

            if (billProperties.PrimaryCurrencySymbolOption.IsSet)
                writer.WriteString("primary_currency_symbol", billProperties.PrimaryCurrencySymbol);

            if (billProperties.PrimaryCurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("primary_currency_decimal_places", billProperties.PrimaryCurrencyDecimalPlacesOption.Value!.Value);

            if (billProperties.AmountMinOption.IsSet)
                writer.WriteString("amount_min", billProperties.AmountMin);

            if (billProperties.PcAmountMinOption.IsSet)
                writer.WriteString("pc_amount_min", billProperties.PcAmountMin);

            if (billProperties.AmountMaxOption.IsSet)
                writer.WriteString("amount_max", billProperties.AmountMax);

            if (billProperties.PcAmountMaxOption.IsSet)
                writer.WriteString("pc_amount_max", billProperties.PcAmountMax);

            if (billProperties.AmountAvgOption.IsSet)
                writer.WriteString("amount_avg", billProperties.AmountAvg);

            if (billProperties.PcAmountAvgOption.IsSet)
                writer.WriteString("pc_amount_avg", billProperties.PcAmountAvg);

            if (billProperties.DateOption.IsSet)
                writer.WriteString("date", billProperties.DateOption.Value!.Value.ToString(DateFormat));

            if (billProperties.EndDateOption.IsSet)
                if (billProperties.EndDateOption.Value != null)
                    writer.WriteString("end_date", billProperties.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("end_date");

            if (billProperties.ExtensionDateOption.IsSet)
                if (billProperties.ExtensionDateOption.Value != null)
                    writer.WriteString("extension_date", billProperties.ExtensionDateOption.Value!.Value.ToString(ExtensionDateFormat));
                else
                    writer.WriteNull("extension_date");

            if (billProperties.RepeatFreqOption.IsSet)
            {
                var repeatFreqRawValue = BillRepeatFrequencyValueConverter.ToJsonValue(billProperties.RepeatFreq!.Value);
                writer.WriteString("repeat_freq", repeatFreqRawValue);
            }
            if (billProperties.SkipOption.IsSet)
                writer.WriteNumber("skip", billProperties.SkipOption.Value!.Value);

            if (billProperties.ActiveOption.IsSet)
                writer.WriteBoolean("active", billProperties.ActiveOption.Value!.Value);

            if (billProperties.OrderOption.IsSet)
                writer.WriteNumber("order", billProperties.OrderOption.Value!.Value);

            if (billProperties.NotesOption.IsSet)
                if (billProperties.NotesOption.Value != null)
                    writer.WriteString("notes", billProperties.Notes);
                else
                    writer.WriteNull("notes");

            if (billProperties.ObjectGroupIdOption.IsSet)
                if (billProperties.ObjectGroupIdOption.Value != null)
                    writer.WriteNumber("object_group_id", billProperties.ObjectGroupId!.Value);
                else
                    writer.WriteNull("object_group_id");

            if (billProperties.ObjectGroupOrderOption.IsSet)
                if (billProperties.ObjectGroupOrderOption.Value != null)
                    writer.WriteNumber("object_group_order", billProperties.ObjectGroupOrderOption.Value!.Value);
                else
                    writer.WriteNull("object_group_order");

            if (billProperties.ObjectGroupTitleOption.IsSet)
                if (billProperties.ObjectGroupTitleOption.Value != null)
                    writer.WriteString("object_group_title", billProperties.ObjectGroupTitle);
                else
                    writer.WriteNull("object_group_title");

            if (billProperties.PaidDatesOption.IsSet)
            {
                writer.WritePropertyName("paid_dates");
                JsonSerializer.Serialize(writer, billProperties.PaidDates, jsonSerializerOptions);
            }
            if (billProperties.PayDatesOption.IsSet)
            {
                writer.WritePropertyName("pay_dates");
                JsonSerializer.Serialize(writer, billProperties.PayDates, jsonSerializerOptions);
            }
            if (billProperties.NextExpectedMatchOption.IsSet)
                if (billProperties.NextExpectedMatchOption.Value != null)
                    writer.WriteString("next_expected_match", billProperties.NextExpectedMatchOption.Value!.Value.ToString(NextExpectedMatchFormat));
                else
                    writer.WriteNull("next_expected_match");

            if (billProperties.NextExpectedMatchDiffOption.IsSet)
                if (billProperties.NextExpectedMatchDiffOption.Value != null)
                    writer.WriteString("next_expected_match_diff", billProperties.NextExpectedMatchDiff);
                else
                    writer.WriteNull("next_expected_match_diff");
        }
    }
}
