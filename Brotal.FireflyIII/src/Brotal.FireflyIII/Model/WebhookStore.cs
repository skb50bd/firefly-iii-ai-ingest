// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// WebhookStore
    /// </summary>
    public partial class WebhookStore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookStore" /> class.
        /// </summary>
        /// <param name="title">A title for the webhook for easy recognition.</param>
        /// <param name="trigger">trigger</param>
        /// <param name="response">response</param>
        /// <param name="delivery">delivery</param>
        /// <param name="url">The URL of the webhook. Has to start with &#x60;https&#x60;.</param>
        /// <param name="active">Boolean to indicate if the webhook is active</param>
        [JsonConstructor]
        public WebhookStore(string title, WebhookTrigger trigger, WebhookResponse response, WebhookDelivery delivery, string url, Option<bool?> active = default)
        {
            Title = title;
            Trigger = trigger;
            Response = response;
            Delivery = delivery;
            Url = url;
            ActiveOption = active;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Trigger
        /// </summary>
        [JsonPropertyName("trigger")]
        public WebhookTrigger Trigger { get; set; }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [JsonPropertyName("response")]
        public WebhookResponse Response { get; set; }

        /// <summary>
        /// Gets or Sets Delivery
        /// </summary>
        [JsonPropertyName("delivery")]
        public WebhookDelivery Delivery { get; set; }

        /// <summary>
        /// A title for the webhook for easy recognition.
        /// </summary>
        /// <value>A title for the webhook for easy recognition.</value>
        /* <example>Update magic mirror on new transaction</example> */
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// The URL of the webhook. Has to start with &#x60;https&#x60;.
        /// </summary>
        /// <value>The URL of the webhook. Has to start with &#x60;https&#x60;.</value>
        /* <example>https://example.com</example> */
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// Boolean to indicate if the webhook is active
        /// </summary>
        /// <value>Boolean to indicate if the webhook is active</value>
        /* <example>false</example> */
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookStore {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  Delivery: ").Append(Delivery).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookStore" />
    /// </summary>
    public class WebhookStoreJsonConverter : JsonConverter<WebhookStore>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebhookStore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookStore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<WebhookTrigger?> trigger = default;
            Option<WebhookResponse?> response = default;
            Option<WebhookDelivery?> delivery = default;
            Option<string?> url = default;
            Option<bool?> active = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "trigger":
                            string? triggerRawValue = utf8JsonReader.GetString();
                            if (triggerRawValue != null)
                                trigger = new Option<WebhookTrigger?>(WebhookTriggerValueConverter.FromStringOrDefault(triggerRawValue));
                            break;
                        case "response":
                            string? responseRawValue = utf8JsonReader.GetString();
                            if (responseRawValue != null)
                                response = new Option<WebhookResponse?>(WebhookResponseValueConverter.FromStringOrDefault(responseRawValue));
                            break;
                        case "delivery":
                            string? deliveryRawValue = utf8JsonReader.GetString();
                            if (deliveryRawValue != null)
                                delivery = new Option<WebhookDelivery?>(WebhookDeliveryValueConverter.FromStringOrDefault(deliveryRawValue));
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "active":
                            active = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class WebhookStore.", nameof(title));

            if (!trigger.IsSet)
                throw new ArgumentException("Property is required for class WebhookStore.", nameof(trigger));

            if (!response.IsSet)
                throw new ArgumentException("Property is required for class WebhookStore.", nameof(response));

            if (!delivery.IsSet)
                throw new ArgumentException("Property is required for class WebhookStore.", nameof(delivery));

            if (!url.IsSet)
                throw new ArgumentException("Property is required for class WebhookStore.", nameof(url));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class WebhookStore.");

            if (trigger.IsSet && trigger.Value == null)
                throw new ArgumentNullException(nameof(trigger), "Property is not nullable for class WebhookStore.");

            if (response.IsSet && response.Value == null)
                throw new ArgumentNullException(nameof(response), "Property is not nullable for class WebhookStore.");

            if (delivery.IsSet && delivery.Value == null)
                throw new ArgumentNullException(nameof(delivery), "Property is not nullable for class WebhookStore.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class WebhookStore.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class WebhookStore.");

            return new WebhookStore(title.Value!, trigger.Value!.Value!, response.Value!.Value!, delivery.Value!.Value!, url.Value!, active);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookStore webhookStore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhookStore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhookStore webhookStore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookStore.Title == null)
                throw new ArgumentNullException(nameof(webhookStore.Title), "Property is required for class WebhookStore.");

            if (webhookStore.Url == null)
                throw new ArgumentNullException(nameof(webhookStore.Url), "Property is required for class WebhookStore.");

            writer.WriteString("title", webhookStore.Title);

            var triggerRawValue = WebhookTriggerValueConverter.ToJsonValue(webhookStore.Trigger);
            writer.WriteString("trigger", triggerRawValue);

            var responseRawValue = WebhookResponseValueConverter.ToJsonValue(webhookStore.Response);
            writer.WriteString("response", responseRawValue);

            var deliveryRawValue = WebhookDeliveryValueConverter.ToJsonValue(webhookStore.Delivery);
            writer.WriteString("delivery", deliveryRawValue);

            writer.WriteString("url", webhookStore.Url);

            if (webhookStore.ActiveOption.IsSet)
                writer.WriteBoolean("active", webhookStore.ActiveOption.Value!.Value);
        }
    }
}
