// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// Defines AccountTypeProperty
    /// </summary>
    public enum AccountTypeProperty
    {
        /// <summary>
        /// Enum DefaultAccount for value: Default account
        /// </summary>
        DefaultAccount = 1,

        /// <summary>
        /// Enum CashAccount for value: Cash account
        /// </summary>
        CashAccount = 2,

        /// <summary>
        /// Enum AssetAccount for value: Asset account
        /// </summary>
        AssetAccount = 3,

        /// <summary>
        /// Enum ExpenseAccount for value: Expense account
        /// </summary>
        ExpenseAccount = 4,

        /// <summary>
        /// Enum RevenueAccount for value: Revenue account
        /// </summary>
        RevenueAccount = 5,

        /// <summary>
        /// Enum InitialBalanceAccount for value: Initial balance account
        /// </summary>
        InitialBalanceAccount = 6,

        /// <summary>
        /// Enum BeneficiaryAccount for value: Beneficiary account
        /// </summary>
        BeneficiaryAccount = 7,

        /// <summary>
        /// Enum ImportAccount for value: Import account
        /// </summary>
        ImportAccount = 8,

        /// <summary>
        /// Enum ReconciliationAccount for value: Reconciliation account
        /// </summary>
        ReconciliationAccount = 9,

        /// <summary>
        /// Enum Loan for value: Loan
        /// </summary>
        Loan = 10,

        /// <summary>
        /// Enum Debt for value: Debt
        /// </summary>
        Debt = 11,

        /// <summary>
        /// Enum Mortgage for value: Mortgage
        /// </summary>
        Mortgage = 12
    }

    /// <summary>
    /// Converts <see cref="AccountTypeProperty"/> to and from the JSON value
    /// </summary>
    public static class AccountTypePropertyValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AccountTypeProperty"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AccountTypeProperty FromString(string value)
        {
            if (value.Equals("Default account"))
                return AccountTypeProperty.DefaultAccount;

            if (value.Equals("Cash account"))
                return AccountTypeProperty.CashAccount;

            if (value.Equals("Asset account"))
                return AccountTypeProperty.AssetAccount;

            if (value.Equals("Expense account"))
                return AccountTypeProperty.ExpenseAccount;

            if (value.Equals("Revenue account"))
                return AccountTypeProperty.RevenueAccount;

            if (value.Equals("Initial balance account"))
                return AccountTypeProperty.InitialBalanceAccount;

            if (value.Equals("Beneficiary account"))
                return AccountTypeProperty.BeneficiaryAccount;

            if (value.Equals("Import account"))
                return AccountTypeProperty.ImportAccount;

            if (value.Equals("Reconciliation account"))
                return AccountTypeProperty.ReconciliationAccount;

            if (value.Equals("Loan"))
                return AccountTypeProperty.Loan;

            if (value.Equals("Debt"))
                return AccountTypeProperty.Debt;

            if (value.Equals("Mortgage"))
                return AccountTypeProperty.Mortgage;

            throw new NotImplementedException($"Could not convert value to type AccountTypeProperty: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AccountTypeProperty"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AccountTypeProperty? FromStringOrDefault(string value)
        {
            if (value.Equals("Default account"))
                return AccountTypeProperty.DefaultAccount;

            if (value.Equals("Cash account"))
                return AccountTypeProperty.CashAccount;

            if (value.Equals("Asset account"))
                return AccountTypeProperty.AssetAccount;

            if (value.Equals("Expense account"))
                return AccountTypeProperty.ExpenseAccount;

            if (value.Equals("Revenue account"))
                return AccountTypeProperty.RevenueAccount;

            if (value.Equals("Initial balance account"))
                return AccountTypeProperty.InitialBalanceAccount;

            if (value.Equals("Beneficiary account"))
                return AccountTypeProperty.BeneficiaryAccount;

            if (value.Equals("Import account"))
                return AccountTypeProperty.ImportAccount;

            if (value.Equals("Reconciliation account"))
                return AccountTypeProperty.ReconciliationAccount;

            if (value.Equals("Loan"))
                return AccountTypeProperty.Loan;

            if (value.Equals("Debt"))
                return AccountTypeProperty.Debt;

            if (value.Equals("Mortgage"))
                return AccountTypeProperty.Mortgage;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AccountTypeProperty"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(AccountTypeProperty value)
        {
            if (value == AccountTypeProperty.DefaultAccount)
                return "Default account";

            if (value == AccountTypeProperty.CashAccount)
                return "Cash account";

            if (value == AccountTypeProperty.AssetAccount)
                return "Asset account";

            if (value == AccountTypeProperty.ExpenseAccount)
                return "Expense account";

            if (value == AccountTypeProperty.RevenueAccount)
                return "Revenue account";

            if (value == AccountTypeProperty.InitialBalanceAccount)
                return "Initial balance account";

            if (value == AccountTypeProperty.BeneficiaryAccount)
                return "Beneficiary account";

            if (value == AccountTypeProperty.ImportAccount)
                return "Import account";

            if (value == AccountTypeProperty.ReconciliationAccount)
                return "Reconciliation account";

            if (value == AccountTypeProperty.Loan)
                return "Loan";

            if (value == AccountTypeProperty.Debt)
                return "Debt";

            if (value == AccountTypeProperty.Mortgage)
                return "Mortgage";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AccountTypeProperty"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AccountTypePropertyJsonConverter : JsonConverter<AccountTypeProperty>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AccountTypeProperty Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AccountTypeProperty? result = rawValue == null
                ? null
                : AccountTypePropertyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AccountTypeProperty to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountTypeProperty"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AccountTypeProperty accountTypeProperty, JsonSerializerOptions options)
        {
            writer.WriteStringValue(AccountTypePropertyValueConverter.ToJsonValue(accountTypeProperty).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AccountTypeProperty"/>
    /// </summary>
    public class AccountTypePropertyNullableJsonConverter : JsonConverter<AccountTypeProperty?>
    {
        /// <summary>
        /// Returns a AccountTypeProperty from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AccountTypeProperty? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AccountTypeProperty? result = rawValue == null
                ? null
                : AccountTypePropertyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AccountTypeProperty to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountTypeProperty"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AccountTypeProperty? accountTypeProperty, JsonSerializerOptions options)
        {
            writer.WriteStringValue(accountTypeProperty.HasValue ? AccountTypePropertyValueConverter.ToJsonValue(accountTypeProperty.Value).ToString() : "null");
        }
    }
}
