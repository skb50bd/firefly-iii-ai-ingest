// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// BillStore
    /// </summary>
    public partial class BillStore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillStore" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="amountMin">amountMin</param>
        /// <param name="amountMax">amountMax</param>
        /// <param name="date">date</param>
        /// <param name="repeatFreq">repeatFreq</param>
        /// <param name="currencyId">Use either currency_id or currency_code</param>
        /// <param name="currencyCode">Use either currency_id or currency_code</param>
        /// <param name="endDate">The date after which this bill is no longer valid or applicable</param>
        /// <param name="extensionDate">The date before which the bill must be renewed (or cancelled)</param>
        /// <param name="skip">How often the bill must be skipped. 1 means a bi-monthly bill.</param>
        /// <param name="active">If the bill is active.</param>
        /// <param name="notes">notes</param>
        /// <param name="objectGroupId">The group ID of the group this object is part of. NULL if no group.</param>
        /// <param name="objectGroupTitle">The name of the group. NULL if no group.</param>
        [JsonConstructor]
        public BillStore(string name, string amountMin, string amountMax, DateTime date, BillRepeatFrequency repeatFreq, Option<string?> currencyId = default, Option<string?> currencyCode = default, Option<DateTime?> endDate = default, Option<DateTime?> extensionDate = default, Option<int?> skip = default, Option<bool?> active = default, Option<string?> notes = default, Option<string?> objectGroupId = default, Option<string?> objectGroupTitle = default)
        {
            Name = name;
            AmountMin = amountMin;
            AmountMax = amountMax;
            Date = date;
            RepeatFreq = repeatFreq;
            CurrencyIdOption = currencyId;
            CurrencyCodeOption = currencyCode;
            EndDateOption = endDate;
            ExtensionDateOption = extensionDate;
            SkipOption = skip;
            ActiveOption = active;
            NotesOption = notes;
            ObjectGroupIdOption = objectGroupId;
            ObjectGroupTitleOption = objectGroupTitle;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets RepeatFreq
        /// </summary>
        [JsonPropertyName("repeat_freq")]
        public BillRepeatFrequency RepeatFreq { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>Rent</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets AmountMin
        /// </summary>
        /* <example>123.45</example> */
        [JsonPropertyName("amount_min")]
        public string AmountMin { get; set; }

        /// <summary>
        /// Gets or Sets AmountMax
        /// </summary>
        /* <example>123.45</example> */
        [JsonPropertyName("amount_max")]
        public string AmountMax { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("date")]
        public DateTime Date { get; set; }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyIdOption { get; private set; }

        /// <summary>
        /// Use either currency_id or currency_code
        /// </summary>
        /// <value>Use either currency_id or currency_code</value>
        /* <example>5</example> */
        [JsonPropertyName("currency_id")]
        public string? CurrencyId { get { return this.CurrencyIdOption; } set { this.CurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// Use either currency_id or currency_code
        /// </summary>
        /// <value>Use either currency_id or currency_code</value>
        /* <example>EUR</example> */
        [JsonPropertyName("currency_code")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> EndDateOption { get; private set; }

        /// <summary>
        /// The date after which this bill is no longer valid or applicable
        /// </summary>
        /// <value>The date after which this bill is no longer valid or applicable</value>
        /* <example>2025-08-31T23:59:59Z</example> */
        [JsonPropertyName("end_date")]
        public DateTime? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExtensionDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ExtensionDateOption { get; private set; }

        /// <summary>
        /// The date before which the bill must be renewed (or cancelled)
        /// </summary>
        /// <value>The date before which the bill must be renewed (or cancelled)</value>
        /* <example>2025-08-31T23:59:59Z</example> */
        [JsonPropertyName("extension_date")]
        public DateTime? ExtensionDate { get { return this.ExtensionDateOption; } set { this.ExtensionDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Skip
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SkipOption { get; private set; }

        /// <summary>
        /// How often the bill must be skipped. 1 means a bi-monthly bill.
        /// </summary>
        /// <value>How often the bill must be skipped. 1 means a bi-monthly bill.</value>
        /* <example>0</example> */
        [JsonPropertyName("skip")]
        public int? Skip { get { return this.SkipOption; } set { this.SkipOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// If the bill is active.
        /// </summary>
        /// <value>If the bill is active.</value>
        /* <example>true</example> */
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        /* <example>Some example notes</example> */
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectGroupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ObjectGroupIdOption { get; private set; }

        /// <summary>
        /// The group ID of the group this object is part of. NULL if no group.
        /// </summary>
        /// <value>The group ID of the group this object is part of. NULL if no group.</value>
        /* <example>5</example> */
        [JsonPropertyName("object_group_id")]
        public string? ObjectGroupId { get { return this.ObjectGroupIdOption; } set { this.ObjectGroupIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectGroupTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ObjectGroupTitleOption { get; private set; }

        /// <summary>
        /// The name of the group. NULL if no group.
        /// </summary>
        /// <value>The name of the group. NULL if no group.</value>
        /* <example>Example Group</example> */
        [JsonPropertyName("object_group_title")]
        public string? ObjectGroupTitle { get { return this.ObjectGroupTitleOption; } set { this.ObjectGroupTitleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BillStore {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AmountMin: ").Append(AmountMin).Append("\n");
            sb.Append("  AmountMax: ").Append(AmountMax).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  RepeatFreq: ").Append(RepeatFreq).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ExtensionDate: ").Append(ExtensionDate).Append("\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ObjectGroupId: ").Append(ObjectGroupId).Append("\n");
            sb.Append("  ObjectGroupTitle: ").Append(ObjectGroupTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BillStore" />
    /// </summary>
    public class BillStoreJsonConverter : JsonConverter<BillStore>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ExtensionDate
        /// </summary>
        public static string ExtensionDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="BillStore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BillStore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> amountMin = default;
            Option<string?> amountMax = default;
            Option<DateTime?> date = default;
            Option<BillRepeatFrequency?> repeatFreq = default;
            Option<string?> currencyId = default;
            Option<string?> currencyCode = default;
            Option<DateTime?> endDate = default;
            Option<DateTime?> extensionDate = default;
            Option<int?> skip = default;
            Option<bool?> active = default;
            Option<string?> notes = default;
            Option<string?> objectGroupId = default;
            Option<string?> objectGroupTitle = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "amount_min":
                            amountMin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "amount_max":
                            amountMax = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "date":
                            date = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "repeat_freq":
                            string? repeatFreqRawValue = utf8JsonReader.GetString();
                            if (repeatFreqRawValue != null)
                                repeatFreq = new Option<BillRepeatFrequency?>(BillRepeatFrequencyValueConverter.FromStringOrDefault(repeatFreqRawValue));
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "end_date":
                            endDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "extension_date":
                            extensionDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "skip":
                            skip = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "active":
                            active = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "object_group_id":
                            objectGroupId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "object_group_title":
                            objectGroupTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class BillStore.", nameof(name));

            if (!amountMin.IsSet)
                throw new ArgumentException("Property is required for class BillStore.", nameof(amountMin));

            if (!amountMax.IsSet)
                throw new ArgumentException("Property is required for class BillStore.", nameof(amountMax));

            if (!date.IsSet)
                throw new ArgumentException("Property is required for class BillStore.", nameof(date));

            if (!repeatFreq.IsSet)
                throw new ArgumentException("Property is required for class BillStore.", nameof(repeatFreq));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class BillStore.");

            if (amountMin.IsSet && amountMin.Value == null)
                throw new ArgumentNullException(nameof(amountMin), "Property is not nullable for class BillStore.");

            if (amountMax.IsSet && amountMax.Value == null)
                throw new ArgumentNullException(nameof(amountMax), "Property is not nullable for class BillStore.");

            if (date.IsSet && date.Value == null)
                throw new ArgumentNullException(nameof(date), "Property is not nullable for class BillStore.");

            if (repeatFreq.IsSet && repeatFreq.Value == null)
                throw new ArgumentNullException(nameof(repeatFreq), "Property is not nullable for class BillStore.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class BillStore.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class BillStore.");

            if (endDate.IsSet && endDate.Value == null)
                throw new ArgumentNullException(nameof(endDate), "Property is not nullable for class BillStore.");

            if (extensionDate.IsSet && extensionDate.Value == null)
                throw new ArgumentNullException(nameof(extensionDate), "Property is not nullable for class BillStore.");

            if (skip.IsSet && skip.Value == null)
                throw new ArgumentNullException(nameof(skip), "Property is not nullable for class BillStore.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class BillStore.");

            return new BillStore(name.Value!, amountMin.Value!, amountMax.Value!, date.Value!.Value!, repeatFreq.Value!.Value!, currencyId, currencyCode, endDate, extensionDate, skip, active, notes, objectGroupId, objectGroupTitle);
        }

        /// <summary>
        /// Serializes a <see cref="BillStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BillStore billStore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, billStore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BillStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BillStore billStore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (billStore.Name == null)
                throw new ArgumentNullException(nameof(billStore.Name), "Property is required for class BillStore.");

            if (billStore.AmountMin == null)
                throw new ArgumentNullException(nameof(billStore.AmountMin), "Property is required for class BillStore.");

            if (billStore.AmountMax == null)
                throw new ArgumentNullException(nameof(billStore.AmountMax), "Property is required for class BillStore.");

            if (billStore.CurrencyIdOption.IsSet && billStore.CurrencyId == null)
                throw new ArgumentNullException(nameof(billStore.CurrencyId), "Property is required for class BillStore.");

            if (billStore.CurrencyCodeOption.IsSet && billStore.CurrencyCode == null)
                throw new ArgumentNullException(nameof(billStore.CurrencyCode), "Property is required for class BillStore.");

            writer.WriteString("name", billStore.Name);

            writer.WriteString("amount_min", billStore.AmountMin);

            writer.WriteString("amount_max", billStore.AmountMax);

            writer.WriteString("date", billStore.Date.ToString(DateFormat));

            var repeatFreqRawValue = BillRepeatFrequencyValueConverter.ToJsonValue(billStore.RepeatFreq);
            writer.WriteString("repeat_freq", repeatFreqRawValue);

            if (billStore.CurrencyIdOption.IsSet)
                writer.WriteString("currency_id", billStore.CurrencyId);

            if (billStore.CurrencyCodeOption.IsSet)
                writer.WriteString("currency_code", billStore.CurrencyCode);

            if (billStore.EndDateOption.IsSet)
                writer.WriteString("end_date", billStore.EndDateOption.Value!.Value.ToString(EndDateFormat));

            if (billStore.ExtensionDateOption.IsSet)
                writer.WriteString("extension_date", billStore.ExtensionDateOption.Value!.Value.ToString(ExtensionDateFormat));

            if (billStore.SkipOption.IsSet)
                writer.WriteNumber("skip", billStore.SkipOption.Value!.Value);

            if (billStore.ActiveOption.IsSet)
                writer.WriteBoolean("active", billStore.ActiveOption.Value!.Value);

            if (billStore.NotesOption.IsSet)
                if (billStore.NotesOption.Value != null)
                    writer.WriteString("notes", billStore.Notes);
                else
                    writer.WriteNull("notes");

            if (billStore.ObjectGroupIdOption.IsSet)
                if (billStore.ObjectGroupIdOption.Value != null)
                    writer.WriteString("object_group_id", billStore.ObjectGroupId);
                else
                    writer.WriteNull("object_group_id");

            if (billStore.ObjectGroupTitleOption.IsSet)
                if (billStore.ObjectGroupTitleOption.Value != null)
                    writer.WriteString("object_group_title", billStore.ObjectGroupTitle);
                else
                    writer.WriteNull("object_group_title");
        }
    }
}
