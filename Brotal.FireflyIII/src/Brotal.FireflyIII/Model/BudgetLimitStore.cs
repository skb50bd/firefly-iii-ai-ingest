// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// BudgetLimitStore
    /// </summary>
    public partial class BudgetLimitStore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetLimitStore" /> class.
        /// </summary>
        /// <param name="budgetId">The budget ID of the associated budget.</param>
        /// <param name="start">Start date of the budget limit.</param>
        /// <param name="end">End date of the budget limit.</param>
        /// <param name="amount">amount</param>
        /// <param name="currencyId">Use either currency_id or currency_code. Defaults to the user&#39;s primary currency.</param>
        /// <param name="currencyCode">Use either currency_id or currency_code. Defaults to the user&#39;s primary currency.</param>
        /// <param name="period">Period of the budget limit. Only used when auto-generated by auto-budget.</param>
        /// <param name="notes">Some notes for this specific budget limit.</param>
        [JsonConstructor]
        public BudgetLimitStore(string budgetId, DateOnly start, DateOnly end, string amount, Option<string?> currencyId = default, Option<string?> currencyCode = default, Option<string?> period = default, Option<string?> notes = default)
        {
            BudgetId = budgetId;
            Start = start;
            End = end;
            Amount = amount;
            CurrencyIdOption = currencyId;
            CurrencyCodeOption = currencyCode;
            PeriodOption = period;
            NotesOption = notes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The budget ID of the associated budget.
        /// </summary>
        /// <value>The budget ID of the associated budget.</value>
        /* <example>23</example> */
        [JsonPropertyName("budget_id")]
        public string BudgetId { get; }

        /// <summary>
        /// Start date of the budget limit.
        /// </summary>
        /// <value>Start date of the budget limit.</value>
        /* <example>Fri Aug 01 00:00:00 UTC 2025</example> */
        [JsonPropertyName("start")]
        public DateOnly Start { get; set; }

        /// <summary>
        /// End date of the budget limit.
        /// </summary>
        /// <value>End date of the budget limit.</value>
        /* <example>Sun Aug 31 00:00:00 UTC 2025</example> */
        [JsonPropertyName("end")]
        public DateOnly End { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        /* <example>123.45</example> */
        [JsonPropertyName("amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyIdOption { get; private set; }

        /// <summary>
        /// Use either currency_id or currency_code. Defaults to the user&#39;s primary currency.
        /// </summary>
        /// <value>Use either currency_id or currency_code. Defaults to the user&#39;s primary currency.</value>
        /* <example>5</example> */
        [JsonPropertyName("currency_id")]
        public string? CurrencyId { get { return this.CurrencyIdOption; } set { this.CurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// Use either currency_id or currency_code. Defaults to the user&#39;s primary currency.
        /// </summary>
        /// <value>Use either currency_id or currency_code. Defaults to the user&#39;s primary currency.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("currency_code")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Period
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PeriodOption { get; }

        /// <summary>
        /// Period of the budget limit. Only used when auto-generated by auto-budget.
        /// </summary>
        /// <value>Period of the budget limit. Only used when auto-generated by auto-budget.</value>
        /* <example>monthly</example> */
        [JsonPropertyName("period")]
        public string? Period { get { return this.PeriodOption; } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Some notes for this specific budget limit.
        /// </summary>
        /// <value>Some notes for this specific budget limit.</value>
        /* <example>Some example notes</example> */
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BudgetLimitStore {\n");
            sb.Append("  BudgetId: ").Append(BudgetId).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BudgetLimitStore" />
    /// </summary>
    public class BudgetLimitStoreJsonConverter : JsonConverter<BudgetLimitStore>
    {
        /// <summary>
        /// The format to use to serialize Start
        /// </summary>
        public static string StartFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize End
        /// </summary>
        public static string EndFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="BudgetLimitStore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BudgetLimitStore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> budgetId = default;
            Option<DateOnly?> start = default;
            Option<DateOnly?> end = default;
            Option<string?> amount = default;
            Option<string?> currencyId = default;
            Option<string?> currencyCode = default;
            Option<string?> period = default;
            Option<string?> notes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "budget_id":
                            budgetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "start":
                            start = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "end":
                            end = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "amount":
                            amount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "period":
                            period = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!budgetId.IsSet)
                throw new ArgumentException("Property is required for class BudgetLimitStore.", nameof(budgetId));

            if (!start.IsSet)
                throw new ArgumentException("Property is required for class BudgetLimitStore.", nameof(start));

            if (!end.IsSet)
                throw new ArgumentException("Property is required for class BudgetLimitStore.", nameof(end));

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class BudgetLimitStore.", nameof(amount));

            if (budgetId.IsSet && budgetId.Value == null)
                throw new ArgumentNullException(nameof(budgetId), "Property is not nullable for class BudgetLimitStore.");

            if (start.IsSet && start.Value == null)
                throw new ArgumentNullException(nameof(start), "Property is not nullable for class BudgetLimitStore.");

            if (end.IsSet && end.Value == null)
                throw new ArgumentNullException(nameof(end), "Property is not nullable for class BudgetLimitStore.");

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class BudgetLimitStore.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class BudgetLimitStore.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class BudgetLimitStore.");

            return new BudgetLimitStore(budgetId.Value!, start.Value!.Value!, end.Value!.Value!, amount.Value!, currencyId, currencyCode, period, notes);
        }

        /// <summary>
        /// Serializes a <see cref="BudgetLimitStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="budgetLimitStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BudgetLimitStore budgetLimitStore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, budgetLimitStore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BudgetLimitStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="budgetLimitStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BudgetLimitStore budgetLimitStore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (budgetLimitStore.BudgetId == null)
                throw new ArgumentNullException(nameof(budgetLimitStore.BudgetId), "Property is required for class BudgetLimitStore.");

            if (budgetLimitStore.Amount == null)
                throw new ArgumentNullException(nameof(budgetLimitStore.Amount), "Property is required for class BudgetLimitStore.");

            if (budgetLimitStore.CurrencyIdOption.IsSet && budgetLimitStore.CurrencyId == null)
                throw new ArgumentNullException(nameof(budgetLimitStore.CurrencyId), "Property is required for class BudgetLimitStore.");

            if (budgetLimitStore.CurrencyCodeOption.IsSet && budgetLimitStore.CurrencyCode == null)
                throw new ArgumentNullException(nameof(budgetLimitStore.CurrencyCode), "Property is required for class BudgetLimitStore.");

            writer.WriteString("budget_id", budgetLimitStore.BudgetId);

            writer.WriteString("start", budgetLimitStore.Start.ToString(StartFormat));

            writer.WriteString("end", budgetLimitStore.End.ToString(EndFormat));

            writer.WriteString("amount", budgetLimitStore.Amount);

            if (budgetLimitStore.CurrencyIdOption.IsSet)
                writer.WriteString("currency_id", budgetLimitStore.CurrencyId);

            if (budgetLimitStore.CurrencyCodeOption.IsSet)
                writer.WriteString("currency_code", budgetLimitStore.CurrencyCode);

            if (budgetLimitStore.PeriodOption.IsSet)
                if (budgetLimitStore.PeriodOption.Value != null)
                    writer.WriteString("period", budgetLimitStore.Period);
                else
                    writer.WriteNull("period");

            if (budgetLimitStore.NotesOption.IsSet)
                if (budgetLimitStore.NotesOption.Value != null)
                    writer.WriteString("notes", budgetLimitStore.Notes);
                else
                    writer.WriteNull("notes");
        }
    }
}
