// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// CronResultRow
    /// </summary>
    public partial class CronResultRow : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CronResultRow" /> class.
        /// </summary>
        /// <param name="jobFired">This value tells you if this specific cron job actually fired. It may not fire. Some cron jobs only fire every 24 hours, for example. </param>
        /// <param name="jobSucceeded">This value tells you if this specific cron job actually did something. The job may fire but not change anything. </param>
        /// <param name="jobErrored">If the cron job ran into some kind of an error, this value will be true.</param>
        /// <param name="message">If the cron job ran into some kind of an error, this value will be the error message. The success message if the job actually ran OK. </param>
        [JsonConstructor]
        public CronResultRow(Option<bool?> jobFired = default, Option<bool?> jobSucceeded = default, Option<bool?> jobErrored = default, Option<string?> message = default)
        {
            JobFiredOption = jobFired;
            JobSucceededOption = jobSucceeded;
            JobErroredOption = jobErrored;
            MessageOption = message;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of JobFired
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> JobFiredOption { get; private set; }

        /// <summary>
        /// This value tells you if this specific cron job actually fired. It may not fire. Some cron jobs only fire every 24 hours, for example. 
        /// </summary>
        /// <value>This value tells you if this specific cron job actually fired. It may not fire. Some cron jobs only fire every 24 hours, for example. </value>
        /* <example>true</example> */
        [JsonPropertyName("job_fired")]
        public bool? JobFired { get { return this.JobFiredOption; } set { this.JobFiredOption = new(value); } }

        /// <summary>
        /// Used to track the state of JobSucceeded
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> JobSucceededOption { get; private set; }

        /// <summary>
        /// This value tells you if this specific cron job actually did something. The job may fire but not change anything. 
        /// </summary>
        /// <value>This value tells you if this specific cron job actually did something. The job may fire but not change anything. </value>
        /* <example>true</example> */
        [JsonPropertyName("job_succeeded")]
        public bool? JobSucceeded { get { return this.JobSucceededOption; } set { this.JobSucceededOption = new(value); } }

        /// <summary>
        /// Used to track the state of JobErrored
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> JobErroredOption { get; private set; }

        /// <summary>
        /// If the cron job ran into some kind of an error, this value will be true.
        /// </summary>
        /// <value>If the cron job ran into some kind of an error, this value will be true.</value>
        /* <example>false</example> */
        [JsonPropertyName("job_errored")]
        public bool? JobErrored { get { return this.JobErroredOption; } set { this.JobErroredOption = new(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// If the cron job ran into some kind of an error, this value will be the error message. The success message if the job actually ran OK. 
        /// </summary>
        /// <value>If the cron job ran into some kind of an error, this value will be the error message. The success message if the job actually ran OK. </value>
        /* <example>Cron result message</example> */
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CronResultRow {\n");
            sb.Append("  JobFired: ").Append(JobFired).Append("\n");
            sb.Append("  JobSucceeded: ").Append(JobSucceeded).Append("\n");
            sb.Append("  JobErrored: ").Append(JobErrored).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CronResultRow" />
    /// </summary>
    public class CronResultRowJsonConverter : JsonConverter<CronResultRow>
    {
        /// <summary>
        /// Deserializes json to <see cref="CronResultRow" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CronResultRow Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> jobFired = default;
            Option<bool?> jobSucceeded = default;
            Option<bool?> jobErrored = default;
            Option<string?> message = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "job_fired":
                            jobFired = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "job_succeeded":
                            jobSucceeded = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "job_errored":
                            jobErrored = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new CronResultRow(jobFired, jobSucceeded, jobErrored, message);
        }

        /// <summary>
        /// Serializes a <see cref="CronResultRow" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cronResultRow"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CronResultRow cronResultRow, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, cronResultRow, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CronResultRow" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cronResultRow"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CronResultRow cronResultRow, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cronResultRow.JobFiredOption.IsSet)
                if (cronResultRow.JobFiredOption.Value != null)
                    writer.WriteBoolean("job_fired", cronResultRow.JobFiredOption.Value!.Value);
                else
                    writer.WriteNull("job_fired");

            if (cronResultRow.JobSucceededOption.IsSet)
                if (cronResultRow.JobSucceededOption.Value != null)
                    writer.WriteBoolean("job_succeeded", cronResultRow.JobSucceededOption.Value!.Value);
                else
                    writer.WriteNull("job_succeeded");

            if (cronResultRow.JobErroredOption.IsSet)
                if (cronResultRow.JobErroredOption.Value != null)
                    writer.WriteBoolean("job_errored", cronResultRow.JobErroredOption.Value!.Value);
                else
                    writer.WriteNull("job_errored");

            if (cronResultRow.MessageOption.IsSet)
                if (cronResultRow.MessageOption.Value != null)
                    writer.WriteString("message", cronResultRow.Message);
                else
                    writer.WriteNull("message");
        }
    }
}
