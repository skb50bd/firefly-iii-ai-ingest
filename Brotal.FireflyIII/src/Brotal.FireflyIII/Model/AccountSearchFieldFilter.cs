// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// Defines AccountSearchFieldFilter
    /// </summary>
    public enum AccountSearchFieldFilter
    {
        /// <summary>
        /// Enum All for value: all
        /// </summary>
        All = 1,

        /// <summary>
        /// Enum Iban for value: iban
        /// </summary>
        Iban = 2,

        /// <summary>
        /// Enum Name for value: name
        /// </summary>
        Name = 3,

        /// <summary>
        /// Enum Number for value: number
        /// </summary>
        Number = 4,

        /// <summary>
        /// Enum Id for value: id
        /// </summary>
        Id = 5
    }

    /// <summary>
    /// Converts <see cref="AccountSearchFieldFilter"/> to and from the JSON value
    /// </summary>
    public static class AccountSearchFieldFilterValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AccountSearchFieldFilter"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AccountSearchFieldFilter FromString(string value)
        {
            if (value.Equals("all"))
                return AccountSearchFieldFilter.All;

            if (value.Equals("iban"))
                return AccountSearchFieldFilter.Iban;

            if (value.Equals("name"))
                return AccountSearchFieldFilter.Name;

            if (value.Equals("number"))
                return AccountSearchFieldFilter.Number;

            if (value.Equals("id"))
                return AccountSearchFieldFilter.Id;

            throw new NotImplementedException($"Could not convert value to type AccountSearchFieldFilter: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AccountSearchFieldFilter"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AccountSearchFieldFilter? FromStringOrDefault(string value)
        {
            if (value.Equals("all"))
                return AccountSearchFieldFilter.All;

            if (value.Equals("iban"))
                return AccountSearchFieldFilter.Iban;

            if (value.Equals("name"))
                return AccountSearchFieldFilter.Name;

            if (value.Equals("number"))
                return AccountSearchFieldFilter.Number;

            if (value.Equals("id"))
                return AccountSearchFieldFilter.Id;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AccountSearchFieldFilter"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(AccountSearchFieldFilter value)
        {
            if (value == AccountSearchFieldFilter.All)
                return "all";

            if (value == AccountSearchFieldFilter.Iban)
                return "iban";

            if (value == AccountSearchFieldFilter.Name)
                return "name";

            if (value == AccountSearchFieldFilter.Number)
                return "number";

            if (value == AccountSearchFieldFilter.Id)
                return "id";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AccountSearchFieldFilter"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AccountSearchFieldFilterJsonConverter : JsonConverter<AccountSearchFieldFilter>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AccountSearchFieldFilter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AccountSearchFieldFilter? result = rawValue == null
                ? null
                : AccountSearchFieldFilterValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AccountSearchFieldFilter to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountSearchFieldFilter"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AccountSearchFieldFilter accountSearchFieldFilter, JsonSerializerOptions options)
        {
            writer.WriteStringValue(AccountSearchFieldFilterValueConverter.ToJsonValue(accountSearchFieldFilter).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AccountSearchFieldFilter"/>
    /// </summary>
    public class AccountSearchFieldFilterNullableJsonConverter : JsonConverter<AccountSearchFieldFilter?>
    {
        /// <summary>
        /// Returns a AccountSearchFieldFilter from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AccountSearchFieldFilter? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AccountSearchFieldFilter? result = rawValue == null
                ? null
                : AccountSearchFieldFilterValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AccountSearchFieldFilter to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountSearchFieldFilter"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AccountSearchFieldFilter? accountSearchFieldFilter, JsonSerializerOptions options)
        {
            writer.WriteStringValue(accountSearchFieldFilter.HasValue ? AccountSearchFieldFilterValueConverter.ToJsonValue(accountSearchFieldFilter.Value).ToString() : "null");
        }
    }
}
