// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// Defines TransactionTypeFilter
    /// </summary>
    public enum TransactionTypeFilter
    {
        /// <summary>
        /// Enum All for value: all
        /// </summary>
        All = 1,

        /// <summary>
        /// Enum Withdrawal for value: withdrawal
        /// </summary>
        Withdrawal = 2,

        /// <summary>
        /// Enum Withdrawals for value: withdrawals
        /// </summary>
        Withdrawals = 3,

        /// <summary>
        /// Enum Expense for value: expense
        /// </summary>
        Expense = 4,

        /// <summary>
        /// Enum Deposit for value: deposit
        /// </summary>
        Deposit = 5,

        /// <summary>
        /// Enum Deposits for value: deposits
        /// </summary>
        Deposits = 6,

        /// <summary>
        /// Enum Income for value: income
        /// </summary>
        Income = 7,

        /// <summary>
        /// Enum Transfer for value: transfer
        /// </summary>
        Transfer = 8,

        /// <summary>
        /// Enum Transfers for value: transfers
        /// </summary>
        Transfers = 9,

        /// <summary>
        /// Enum OpeningBalance for value: opening_balance
        /// </summary>
        OpeningBalance = 10,

        /// <summary>
        /// Enum Reconciliation for value: reconciliation
        /// </summary>
        Reconciliation = 11,

        /// <summary>
        /// Enum Special for value: special
        /// </summary>
        Special = 12,

        /// <summary>
        /// Enum Specials for value: specials
        /// </summary>
        Specials = 13,

        /// <summary>
        /// Enum Default for value: default
        /// </summary>
        Default = 14
    }

    /// <summary>
    /// Converts <see cref="TransactionTypeFilter"/> to and from the JSON value
    /// </summary>
    public static class TransactionTypeFilterValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="TransactionTypeFilter"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TransactionTypeFilter FromString(string value)
        {
            if (value.Equals("all"))
                return TransactionTypeFilter.All;

            if (value.Equals("withdrawal"))
                return TransactionTypeFilter.Withdrawal;

            if (value.Equals("withdrawals"))
                return TransactionTypeFilter.Withdrawals;

            if (value.Equals("expense"))
                return TransactionTypeFilter.Expense;

            if (value.Equals("deposit"))
                return TransactionTypeFilter.Deposit;

            if (value.Equals("deposits"))
                return TransactionTypeFilter.Deposits;

            if (value.Equals("income"))
                return TransactionTypeFilter.Income;

            if (value.Equals("transfer"))
                return TransactionTypeFilter.Transfer;

            if (value.Equals("transfers"))
                return TransactionTypeFilter.Transfers;

            if (value.Equals("opening_balance"))
                return TransactionTypeFilter.OpeningBalance;

            if (value.Equals("reconciliation"))
                return TransactionTypeFilter.Reconciliation;

            if (value.Equals("special"))
                return TransactionTypeFilter.Special;

            if (value.Equals("specials"))
                return TransactionTypeFilter.Specials;

            if (value.Equals("default"))
                return TransactionTypeFilter.Default;

            throw new NotImplementedException($"Could not convert value to type TransactionTypeFilter: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="TransactionTypeFilter"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TransactionTypeFilter? FromStringOrDefault(string value)
        {
            if (value.Equals("all"))
                return TransactionTypeFilter.All;

            if (value.Equals("withdrawal"))
                return TransactionTypeFilter.Withdrawal;

            if (value.Equals("withdrawals"))
                return TransactionTypeFilter.Withdrawals;

            if (value.Equals("expense"))
                return TransactionTypeFilter.Expense;

            if (value.Equals("deposit"))
                return TransactionTypeFilter.Deposit;

            if (value.Equals("deposits"))
                return TransactionTypeFilter.Deposits;

            if (value.Equals("income"))
                return TransactionTypeFilter.Income;

            if (value.Equals("transfer"))
                return TransactionTypeFilter.Transfer;

            if (value.Equals("transfers"))
                return TransactionTypeFilter.Transfers;

            if (value.Equals("opening_balance"))
                return TransactionTypeFilter.OpeningBalance;

            if (value.Equals("reconciliation"))
                return TransactionTypeFilter.Reconciliation;

            if (value.Equals("special"))
                return TransactionTypeFilter.Special;

            if (value.Equals("specials"))
                return TransactionTypeFilter.Specials;

            if (value.Equals("default"))
                return TransactionTypeFilter.Default;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TransactionTypeFilter"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(TransactionTypeFilter value)
        {
            if (value == TransactionTypeFilter.All)
                return "all";

            if (value == TransactionTypeFilter.Withdrawal)
                return "withdrawal";

            if (value == TransactionTypeFilter.Withdrawals)
                return "withdrawals";

            if (value == TransactionTypeFilter.Expense)
                return "expense";

            if (value == TransactionTypeFilter.Deposit)
                return "deposit";

            if (value == TransactionTypeFilter.Deposits)
                return "deposits";

            if (value == TransactionTypeFilter.Income)
                return "income";

            if (value == TransactionTypeFilter.Transfer)
                return "transfer";

            if (value == TransactionTypeFilter.Transfers)
                return "transfers";

            if (value == TransactionTypeFilter.OpeningBalance)
                return "opening_balance";

            if (value == TransactionTypeFilter.Reconciliation)
                return "reconciliation";

            if (value == TransactionTypeFilter.Special)
                return "special";

            if (value == TransactionTypeFilter.Specials)
                return "specials";

            if (value == TransactionTypeFilter.Default)
                return "default";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransactionTypeFilter"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class TransactionTypeFilterJsonConverter : JsonConverter<TransactionTypeFilter>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override TransactionTypeFilter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            TransactionTypeFilter? result = rawValue == null
                ? null
                : TransactionTypeFilterValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the TransactionTypeFilter to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionTypeFilter"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, TransactionTypeFilter transactionTypeFilter, JsonSerializerOptions options)
        {
            writer.WriteStringValue(TransactionTypeFilterValueConverter.ToJsonValue(transactionTypeFilter).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransactionTypeFilter"/>
    /// </summary>
    public class TransactionTypeFilterNullableJsonConverter : JsonConverter<TransactionTypeFilter?>
    {
        /// <summary>
        /// Returns a TransactionTypeFilter from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override TransactionTypeFilter? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            TransactionTypeFilter? result = rawValue == null
                ? null
                : TransactionTypeFilterValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the TransactionTypeFilter to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionTypeFilter"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, TransactionTypeFilter? transactionTypeFilter, JsonSerializerOptions options)
        {
            writer.WriteStringValue(transactionTypeFilter.HasValue ? TransactionTypeFilterValueConverter.ToJsonValue(transactionTypeFilter.Value).ToString() : "null");
        }
    }
}
