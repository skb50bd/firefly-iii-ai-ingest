// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// RecurrenceTransaction
    /// </summary>
    public partial class RecurrenceTransaction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrenceTransaction" /> class.
        /// </summary>
        /// <param name="description">description</param>
        /// <param name="amount">Amount of the transaction.</param>
        /// <param name="id">id</param>
        /// <param name="objectHasCurrencySetting">Indicates whether the object has a currency setting. If false, the object uses the administration&#39;s primary currency.</param>
        /// <param name="currencyId">The currency ID of the currency associated with this object.</param>
        /// <param name="currencyName">The currency name of the currency associated with this object.</param>
        /// <param name="currencyCode">The currency code of the currency associated with this object.</param>
        /// <param name="currencySymbol">currencySymbol</param>
        /// <param name="currencyDecimalPlaces">currencyDecimalPlaces</param>
        /// <param name="primaryCurrencyId">The currency ID of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyName">The currency name of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyCode">The currency code of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencySymbol">The currency symbol of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyDecimalPlaces">The currency decimal places of the administration&#39;s primary currency.</param>
        /// <param name="pcAmount">Amount of the transaction in primary currency.</param>
        /// <param name="foreignAmount">Foreign amount of the transaction.</param>
        /// <param name="pcForeignAmount">Foreign amount of the transaction.</param>
        /// <param name="foreignCurrencyId">foreignCurrencyId</param>
        /// <param name="foreignCurrencyName">foreignCurrencyName</param>
        /// <param name="foreignCurrencyCode">foreignCurrencyCode</param>
        /// <param name="foreignCurrencySymbol">foreignCurrencySymbol</param>
        /// <param name="foreignCurrencyDecimalPlaces">Number of decimals in the currency</param>
        /// <param name="budgetId">The budget ID for this transaction.</param>
        /// <param name="budgetName">The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.</param>
        /// <param name="categoryId">Category ID for this transaction.</param>
        /// <param name="categoryName">Category name for this transaction.</param>
        /// <param name="sourceId">ID of the source account. Submit either this or source_name.</param>
        /// <param name="sourceName">Name of the source account. Submit either this or source_id.</param>
        /// <param name="sourceIban">sourceIban</param>
        /// <param name="sourceType">sourceType</param>
        /// <param name="destinationId">ID of the destination account. Submit either this or destination_name.</param>
        /// <param name="destinationName">Name of the destination account. Submit either this or destination_id.</param>
        /// <param name="destinationIban">destinationIban</param>
        /// <param name="destinationType">destinationType</param>
        /// <param name="tags">Array of tags.</param>
        /// <param name="piggyBankId">piggyBankId</param>
        /// <param name="piggyBankName">piggyBankName</param>
        /// <param name="subscriptionId">subscriptionId</param>
        /// <param name="subscriptionName">subscriptionName</param>
        [JsonConstructor]
        public RecurrenceTransaction(string description, string amount, Option<string?> id = default, Option<bool?> objectHasCurrencySetting = default, Option<string?> currencyId = default, Option<string?> currencyName = default, Option<string?> currencyCode = default, Option<string?> currencySymbol = default, Option<int?> currencyDecimalPlaces = default, Option<string?> primaryCurrencyId = default, Option<string?> primaryCurrencyName = default, Option<string?> primaryCurrencyCode = default, Option<string?> primaryCurrencySymbol = default, Option<int?> primaryCurrencyDecimalPlaces = default, Option<string?> pcAmount = default, Option<string?> foreignAmount = default, Option<string?> pcForeignAmount = default, Option<string?> foreignCurrencyId = default, Option<string?> foreignCurrencyName = default, Option<string?> foreignCurrencyCode = default, Option<string?> foreignCurrencySymbol = default, Option<int?> foreignCurrencyDecimalPlaces = default, Option<string?> budgetId = default, Option<string?> budgetName = default, Option<string?> categoryId = default, Option<string?> categoryName = default, Option<string?> sourceId = default, Option<string?> sourceName = default, Option<string?> sourceIban = default, Option<AccountTypeProperty?> sourceType = default, Option<string?> destinationId = default, Option<string?> destinationName = default, Option<string?> destinationIban = default, Option<AccountTypeProperty?> destinationType = default, Option<List<string>?> tags = default, Option<string?> piggyBankId = default, Option<string?> piggyBankName = default, Option<string?> subscriptionId = default, Option<string?> subscriptionName = default)
        {
            Description = description;
            Amount = amount;
            IdOption = id;
            ObjectHasCurrencySettingOption = objectHasCurrencySetting;
            CurrencyIdOption = currencyId;
            CurrencyNameOption = currencyName;
            CurrencyCodeOption = currencyCode;
            CurrencySymbolOption = currencySymbol;
            CurrencyDecimalPlacesOption = currencyDecimalPlaces;
            PrimaryCurrencyIdOption = primaryCurrencyId;
            PrimaryCurrencyNameOption = primaryCurrencyName;
            PrimaryCurrencyCodeOption = primaryCurrencyCode;
            PrimaryCurrencySymbolOption = primaryCurrencySymbol;
            PrimaryCurrencyDecimalPlacesOption = primaryCurrencyDecimalPlaces;
            PcAmountOption = pcAmount;
            ForeignAmountOption = foreignAmount;
            PcForeignAmountOption = pcForeignAmount;
            ForeignCurrencyIdOption = foreignCurrencyId;
            ForeignCurrencyNameOption = foreignCurrencyName;
            ForeignCurrencyCodeOption = foreignCurrencyCode;
            ForeignCurrencySymbolOption = foreignCurrencySymbol;
            ForeignCurrencyDecimalPlacesOption = foreignCurrencyDecimalPlaces;
            BudgetIdOption = budgetId;
            BudgetNameOption = budgetName;
            CategoryIdOption = categoryId;
            CategoryNameOption = categoryName;
            SourceIdOption = sourceId;
            SourceNameOption = sourceName;
            SourceIbanOption = sourceIban;
            SourceTypeOption = sourceType;
            DestinationIdOption = destinationId;
            DestinationNameOption = destinationName;
            DestinationIbanOption = destinationIban;
            DestinationTypeOption = destinationType;
            TagsOption = tags;
            PiggyBankIdOption = piggyBankId;
            PiggyBankNameOption = piggyBankName;
            SubscriptionIdOption = subscriptionId;
            SubscriptionNameOption = subscriptionName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SourceType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccountTypeProperty?> SourceTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SourceType
        /// </summary>
        [JsonPropertyName("source_type")]
        public AccountTypeProperty? SourceType { get { return this.SourceTypeOption; } set { this.SourceTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DestinationType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccountTypeProperty?> DestinationTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets DestinationType
        /// </summary>
        [JsonPropertyName("destination_type")]
        public AccountTypeProperty? DestinationType { get { return this.DestinationTypeOption; } set { this.DestinationTypeOption = new(value); } }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /* <example>Rent for the current month</example> */
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Amount of the transaction.
        /// </summary>
        /// <value>Amount of the transaction.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /* <example>ID of the recurring transaction. Not to be confused with the ID of the recurrence itself.</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectHasCurrencySetting
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ObjectHasCurrencySettingOption { get; }

        /// <summary>
        /// Indicates whether the object has a currency setting. If false, the object uses the administration&#39;s primary currency.
        /// </summary>
        /// <value>Indicates whether the object has a currency setting. If false, the object uses the administration&#39;s primary currency.</value>
        /* <example>true</example> */
        [JsonPropertyName("object_has_currency_setting")]
        public bool? ObjectHasCurrencySetting { get { return this.ObjectHasCurrencySettingOption; } }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyIdOption { get; private set; }

        /// <summary>
        /// The currency ID of the currency associated with this object.
        /// </summary>
        /// <value>The currency ID of the currency associated with this object.</value>
        /* <example>5</example> */
        [JsonPropertyName("currency_id")]
        public string? CurrencyId { get { return this.CurrencyIdOption; } set { this.CurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyNameOption { get; private set; }

        /// <summary>
        /// The currency name of the currency associated with this object.
        /// </summary>
        /// <value>The currency name of the currency associated with this object.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("currency_name")]
        public string? CurrencyName { get { return this.CurrencyNameOption; } set { this.CurrencyNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The currency code of the currency associated with this object.
        /// </summary>
        /// <value>The currency code of the currency associated with this object.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("currency_code")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencySymbolOption { get; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        /* <example>$</example> */
        [JsonPropertyName("currency_symbol")]
        public string? CurrencySymbol { get { return this.CurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of CurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// Gets or Sets CurrencyDecimalPlaces
        /// </summary>
        /* <example>2</example> */
        [JsonPropertyName("currency_decimal_places")]
        public int? CurrencyDecimalPlaces { get { return this.CurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyIdOption { get; }

        /// <summary>
        /// The currency ID of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency ID of the administration&#39;s primary currency.</value>
        /* <example>5</example> */
        [JsonPropertyName("primary_currency_id")]
        public string? PrimaryCurrencyId { get { return this.PrimaryCurrencyIdOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyNameOption { get; }

        /// <summary>
        /// The currency name of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency name of the administration&#39;s primary currency.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("primary_currency_name")]
        public string? PrimaryCurrencyName { get { return this.PrimaryCurrencyNameOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyCodeOption { get; }

        /// <summary>
        /// The currency code of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency code of the administration&#39;s primary currency.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("primary_currency_code")]
        public string? PrimaryCurrencyCode { get { return this.PrimaryCurrencyCodeOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencySymbolOption { get; }

        /// <summary>
        /// The currency symbol of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency symbol of the administration&#39;s primary currency.</value>
        /* <example>$</example> */
        [JsonPropertyName("primary_currency_symbol")]
        public string? PrimaryCurrencySymbol { get { return this.PrimaryCurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PrimaryCurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// The currency decimal places of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency decimal places of the administration&#39;s primary currency.</value>
        /* <example>2</example> */
        [JsonPropertyName("primary_currency_decimal_places")]
        public int? PrimaryCurrencyDecimalPlaces { get { return this.PrimaryCurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of PcAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcAmountOption { get; private set; }

        /// <summary>
        /// Amount of the transaction in primary currency.
        /// </summary>
        /// <value>Amount of the transaction in primary currency.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("pc_amount")]
        public string? PcAmount { get { return this.PcAmountOption; } set { this.PcAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForeignAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForeignAmountOption { get; private set; }

        /// <summary>
        /// Foreign amount of the transaction.
        /// </summary>
        /// <value>Foreign amount of the transaction.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("foreign_amount")]
        public string? ForeignAmount { get { return this.ForeignAmountOption; } set { this.ForeignAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of PcForeignAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcForeignAmountOption { get; private set; }

        /// <summary>
        /// Foreign amount of the transaction.
        /// </summary>
        /// <value>Foreign amount of the transaction.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("pc_foreign_amount")]
        public string? PcForeignAmount { get { return this.PcForeignAmountOption; } set { this.PcForeignAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForeignCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForeignCurrencyIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ForeignCurrencyId
        /// </summary>
        /* <example>17</example> */
        [JsonPropertyName("foreign_currency_id")]
        public string? ForeignCurrencyId { get { return this.ForeignCurrencyIdOption; } set { this.ForeignCurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForeignCurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForeignCurrencyNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ForeignCurrencyName
        /// </summary>
        /* <example>British Pound</example> */
        [JsonPropertyName("foreign_currency_name")]
        public string? ForeignCurrencyName { get { return this.ForeignCurrencyNameOption; } set { this.ForeignCurrencyNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForeignCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForeignCurrencyCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ForeignCurrencyCode
        /// </summary>
        /* <example>GBP</example> */
        [JsonPropertyName("foreign_currency_code")]
        public string? ForeignCurrencyCode { get { return this.ForeignCurrencyCodeOption; } set { this.ForeignCurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForeignCurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForeignCurrencySymbolOption { get; }

        /// <summary>
        /// Gets or Sets ForeignCurrencySymbol
        /// </summary>
        /* <example>$</example> */
        [JsonPropertyName("foreign_currency_symbol")]
        public string? ForeignCurrencySymbol { get { return this.ForeignCurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of ForeignCurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ForeignCurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// Number of decimals in the currency
        /// </summary>
        /// <value>Number of decimals in the currency</value>
        /* <example>2</example> */
        [JsonPropertyName("foreign_currency_decimal_places")]
        public int? ForeignCurrencyDecimalPlaces { get { return this.ForeignCurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of BudgetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BudgetIdOption { get; private set; }

        /// <summary>
        /// The budget ID for this transaction.
        /// </summary>
        /// <value>The budget ID for this transaction.</value>
        /* <example>4</example> */
        [JsonPropertyName("budget_id")]
        public string? BudgetId { get { return this.BudgetIdOption; } set { this.BudgetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BudgetName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BudgetNameOption { get; }

        /// <summary>
        /// The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.
        /// </summary>
        /// <value>The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.</value>
        /* <example>Groceries</example> */
        [JsonPropertyName("budget_name")]
        public string? BudgetName { get { return this.BudgetNameOption; } }

        /// <summary>
        /// Used to track the state of CategoryId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CategoryIdOption { get; private set; }

        /// <summary>
        /// Category ID for this transaction.
        /// </summary>
        /// <value>Category ID for this transaction.</value>
        /* <example>211</example> */
        [JsonPropertyName("category_id")]
        public string? CategoryId { get { return this.CategoryIdOption; } set { this.CategoryIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CategoryName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CategoryNameOption { get; private set; }

        /// <summary>
        /// Category name for this transaction.
        /// </summary>
        /// <value>Category name for this transaction.</value>
        /* <example>Bills</example> */
        [JsonPropertyName("category_name")]
        public string? CategoryName { get { return this.CategoryNameOption; } set { this.CategoryNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceIdOption { get; private set; }

        /// <summary>
        /// ID of the source account. Submit either this or source_name.
        /// </summary>
        /// <value>ID of the source account. Submit either this or source_name.</value>
        /* <example>913</example> */
        [JsonPropertyName("source_id")]
        public string? SourceId { get { return this.SourceIdOption; } set { this.SourceIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceNameOption { get; private set; }

        /// <summary>
        /// Name of the source account. Submit either this or source_id.
        /// </summary>
        /// <value>Name of the source account. Submit either this or source_id.</value>
        /* <example>Checking account</example> */
        [JsonPropertyName("source_name")]
        public string? SourceName { get { return this.SourceNameOption; } set { this.SourceNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceIban
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceIbanOption { get; }

        /// <summary>
        /// Gets or Sets SourceIban
        /// </summary>
        /* <example>NL02ABNA0123456789</example> */
        [JsonPropertyName("source_iban")]
        public string? SourceIban { get { return this.SourceIbanOption; } }

        /// <summary>
        /// Used to track the state of DestinationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DestinationIdOption { get; private set; }

        /// <summary>
        /// ID of the destination account. Submit either this or destination_name.
        /// </summary>
        /// <value>ID of the destination account. Submit either this or destination_name.</value>
        /* <example>258</example> */
        [JsonPropertyName("destination_id")]
        public string? DestinationId { get { return this.DestinationIdOption; } set { this.DestinationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DestinationName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DestinationNameOption { get; private set; }

        /// <summary>
        /// Name of the destination account. Submit either this or destination_id.
        /// </summary>
        /// <value>Name of the destination account. Submit either this or destination_id.</value>
        /* <example>Buy and Large</example> */
        [JsonPropertyName("destination_name")]
        public string? DestinationName { get { return this.DestinationNameOption; } set { this.DestinationNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of DestinationIban
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DestinationIbanOption { get; }

        /// <summary>
        /// Gets or Sets DestinationIban
        /// </summary>
        /* <example>NL02ABNA0123456789</example> */
        [JsonPropertyName("destination_iban")]
        public string? DestinationIban { get { return this.DestinationIbanOption; } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TagsOption { get; private set; }

        /// <summary>
        /// Array of tags.
        /// </summary>
        /// <value>Array of tags.</value>
        [JsonPropertyName("tags")]
        public List<string>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PiggyBankId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PiggyBankIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets PiggyBankId
        /// </summary>
        /* <example>123</example> */
        [JsonPropertyName("piggy_bank_id")]
        public string? PiggyBankId { get { return this.PiggyBankIdOption; } set { this.PiggyBankIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PiggyBankName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PiggyBankNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets PiggyBankName
        /// </summary>
        [JsonPropertyName("piggy_bank_name")]
        public string? PiggyBankName { get { return this.PiggyBankNameOption; } set { this.PiggyBankNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubscriptionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubscriptionIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubscriptionId
        /// </summary>
        /* <example>123</example> */
        [JsonPropertyName("subscription_id")]
        public string? SubscriptionId { get { return this.SubscriptionIdOption; } set { this.SubscriptionIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubscriptionName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubscriptionNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubscriptionName
        /// </summary>
        [JsonPropertyName("subscription_name")]
        public string? SubscriptionName { get { return this.SubscriptionNameOption; } set { this.SubscriptionNameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecurrenceTransaction {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ObjectHasCurrencySetting: ").Append(ObjectHasCurrencySetting).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  CurrencyDecimalPlaces: ").Append(CurrencyDecimalPlaces).Append("\n");
            sb.Append("  PrimaryCurrencyId: ").Append(PrimaryCurrencyId).Append("\n");
            sb.Append("  PrimaryCurrencyName: ").Append(PrimaryCurrencyName).Append("\n");
            sb.Append("  PrimaryCurrencyCode: ").Append(PrimaryCurrencyCode).Append("\n");
            sb.Append("  PrimaryCurrencySymbol: ").Append(PrimaryCurrencySymbol).Append("\n");
            sb.Append("  PrimaryCurrencyDecimalPlaces: ").Append(PrimaryCurrencyDecimalPlaces).Append("\n");
            sb.Append("  PcAmount: ").Append(PcAmount).Append("\n");
            sb.Append("  ForeignAmount: ").Append(ForeignAmount).Append("\n");
            sb.Append("  PcForeignAmount: ").Append(PcForeignAmount).Append("\n");
            sb.Append("  ForeignCurrencyId: ").Append(ForeignCurrencyId).Append("\n");
            sb.Append("  ForeignCurrencyName: ").Append(ForeignCurrencyName).Append("\n");
            sb.Append("  ForeignCurrencyCode: ").Append(ForeignCurrencyCode).Append("\n");
            sb.Append("  ForeignCurrencySymbol: ").Append(ForeignCurrencySymbol).Append("\n");
            sb.Append("  ForeignCurrencyDecimalPlaces: ").Append(ForeignCurrencyDecimalPlaces).Append("\n");
            sb.Append("  BudgetId: ").Append(BudgetId).Append("\n");
            sb.Append("  BudgetName: ").Append(BudgetName).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  SourceName: ").Append(SourceName).Append("\n");
            sb.Append("  SourceIban: ").Append(SourceIban).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  DestinationId: ").Append(DestinationId).Append("\n");
            sb.Append("  DestinationName: ").Append(DestinationName).Append("\n");
            sb.Append("  DestinationIban: ").Append(DestinationIban).Append("\n");
            sb.Append("  DestinationType: ").Append(DestinationType).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  PiggyBankId: ").Append(PiggyBankId).Append("\n");
            sb.Append("  PiggyBankName: ").Append(PiggyBankName).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  SubscriptionName: ").Append(SubscriptionName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RecurrenceTransaction" />
    /// </summary>
    public class RecurrenceTransactionJsonConverter : JsonConverter<RecurrenceTransaction>
    {
        /// <summary>
        /// Deserializes json to <see cref="RecurrenceTransaction" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RecurrenceTransaction Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> description = default;
            Option<string?> amount = default;
            Option<string?> id = default;
            Option<bool?> objectHasCurrencySetting = default;
            Option<string?> currencyId = default;
            Option<string?> currencyName = default;
            Option<string?> currencyCode = default;
            Option<string?> currencySymbol = default;
            Option<int?> currencyDecimalPlaces = default;
            Option<string?> primaryCurrencyId = default;
            Option<string?> primaryCurrencyName = default;
            Option<string?> primaryCurrencyCode = default;
            Option<string?> primaryCurrencySymbol = default;
            Option<int?> primaryCurrencyDecimalPlaces = default;
            Option<string?> pcAmount = default;
            Option<string?> foreignAmount = default;
            Option<string?> pcForeignAmount = default;
            Option<string?> foreignCurrencyId = default;
            Option<string?> foreignCurrencyName = default;
            Option<string?> foreignCurrencyCode = default;
            Option<string?> foreignCurrencySymbol = default;
            Option<int?> foreignCurrencyDecimalPlaces = default;
            Option<string?> budgetId = default;
            Option<string?> budgetName = default;
            Option<string?> categoryId = default;
            Option<string?> categoryName = default;
            Option<string?> sourceId = default;
            Option<string?> sourceName = default;
            Option<string?> sourceIban = default;
            Option<AccountTypeProperty?> sourceType = default;
            Option<string?> destinationId = default;
            Option<string?> destinationName = default;
            Option<string?> destinationIban = default;
            Option<AccountTypeProperty?> destinationType = default;
            Option<List<string>?> tags = default;
            Option<string?> piggyBankId = default;
            Option<string?> piggyBankName = default;
            Option<string?> subscriptionId = default;
            Option<string?> subscriptionName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "amount":
                            amount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "object_has_currency_setting":
                            objectHasCurrencySetting = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_name":
                            currencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_symbol":
                            currencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_decimal_places":
                            currencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "primary_currency_id":
                            primaryCurrencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_name":
                            primaryCurrencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_code":
                            primaryCurrencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_symbol":
                            primaryCurrencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_decimal_places":
                            primaryCurrencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pc_amount":
                            pcAmount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "foreign_amount":
                            foreignAmount = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "pc_foreign_amount":
                            pcForeignAmount = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "foreign_currency_id":
                            foreignCurrencyId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "foreign_currency_name":
                            foreignCurrencyName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "foreign_currency_code":
                            foreignCurrencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "foreign_currency_symbol":
                            foreignCurrencySymbol = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "foreign_currency_decimal_places":
                            foreignCurrencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "budget_id":
                            budgetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "budget_name":
                            budgetName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "category_id":
                            categoryId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "category_name":
                            categoryName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "source_id":
                            sourceId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "source_name":
                            sourceName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "source_iban":
                            sourceIban = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "source_type":
                            string? sourceTypeRawValue = utf8JsonReader.GetString();
                            if (sourceTypeRawValue != null)
                                sourceType = new Option<AccountTypeProperty?>(AccountTypePropertyValueConverter.FromStringOrDefault(sourceTypeRawValue));
                            break;
                        case "destination_id":
                            destinationId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "destination_name":
                            destinationName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "destination_iban":
                            destinationIban = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "destination_type":
                            string? destinationTypeRawValue = utf8JsonReader.GetString();
                            if (destinationTypeRawValue != null)
                                destinationType = new Option<AccountTypeProperty?>(AccountTypePropertyValueConverter.FromStringOrDefault(destinationTypeRawValue));
                            break;
                        case "tags":
                            tags = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "piggy_bank_id":
                            piggyBankId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "piggy_bank_name":
                            piggyBankName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "subscription_id":
                            subscriptionId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "subscription_name":
                            subscriptionName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class RecurrenceTransaction.", nameof(description));

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class RecurrenceTransaction.", nameof(amount));

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class RecurrenceTransaction.");

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class RecurrenceTransaction.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class RecurrenceTransaction.");

            if (objectHasCurrencySetting.IsSet && objectHasCurrencySetting.Value == null)
                throw new ArgumentNullException(nameof(objectHasCurrencySetting), "Property is not nullable for class RecurrenceTransaction.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class RecurrenceTransaction.");

            if (currencyName.IsSet && currencyName.Value == null)
                throw new ArgumentNullException(nameof(currencyName), "Property is not nullable for class RecurrenceTransaction.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class RecurrenceTransaction.");

            if (currencySymbol.IsSet && currencySymbol.Value == null)
                throw new ArgumentNullException(nameof(currencySymbol), "Property is not nullable for class RecurrenceTransaction.");

            if (currencyDecimalPlaces.IsSet && currencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(currencyDecimalPlaces), "Property is not nullable for class RecurrenceTransaction.");

            if (primaryCurrencyId.IsSet && primaryCurrencyId.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyId), "Property is not nullable for class RecurrenceTransaction.");

            if (primaryCurrencyName.IsSet && primaryCurrencyName.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyName), "Property is not nullable for class RecurrenceTransaction.");

            if (primaryCurrencyCode.IsSet && primaryCurrencyCode.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyCode), "Property is not nullable for class RecurrenceTransaction.");

            if (primaryCurrencySymbol.IsSet && primaryCurrencySymbol.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencySymbol), "Property is not nullable for class RecurrenceTransaction.");

            if (primaryCurrencyDecimalPlaces.IsSet && primaryCurrencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyDecimalPlaces), "Property is not nullable for class RecurrenceTransaction.");

            if (pcAmount.IsSet && pcAmount.Value == null)
                throw new ArgumentNullException(nameof(pcAmount), "Property is not nullable for class RecurrenceTransaction.");

            if (budgetId.IsSet && budgetId.Value == null)
                throw new ArgumentNullException(nameof(budgetId), "Property is not nullable for class RecurrenceTransaction.");

            if (categoryId.IsSet && categoryId.Value == null)
                throw new ArgumentNullException(nameof(categoryId), "Property is not nullable for class RecurrenceTransaction.");

            if (categoryName.IsSet && categoryName.Value == null)
                throw new ArgumentNullException(nameof(categoryName), "Property is not nullable for class RecurrenceTransaction.");

            if (sourceId.IsSet && sourceId.Value == null)
                throw new ArgumentNullException(nameof(sourceId), "Property is not nullable for class RecurrenceTransaction.");

            if (sourceName.IsSet && sourceName.Value == null)
                throw new ArgumentNullException(nameof(sourceName), "Property is not nullable for class RecurrenceTransaction.");

            if (sourceType.IsSet && sourceType.Value == null)
                throw new ArgumentNullException(nameof(sourceType), "Property is not nullable for class RecurrenceTransaction.");

            if (destinationId.IsSet && destinationId.Value == null)
                throw new ArgumentNullException(nameof(destinationId), "Property is not nullable for class RecurrenceTransaction.");

            if (destinationName.IsSet && destinationName.Value == null)
                throw new ArgumentNullException(nameof(destinationName), "Property is not nullable for class RecurrenceTransaction.");

            if (destinationType.IsSet && destinationType.Value == null)
                throw new ArgumentNullException(nameof(destinationType), "Property is not nullable for class RecurrenceTransaction.");

            return new RecurrenceTransaction(description.Value!, amount.Value!, id, objectHasCurrencySetting, currencyId, currencyName, currencyCode, currencySymbol, currencyDecimalPlaces, primaryCurrencyId, primaryCurrencyName, primaryCurrencyCode, primaryCurrencySymbol, primaryCurrencyDecimalPlaces, pcAmount, foreignAmount, pcForeignAmount, foreignCurrencyId, foreignCurrencyName, foreignCurrencyCode, foreignCurrencySymbol, foreignCurrencyDecimalPlaces, budgetId, budgetName, categoryId, categoryName, sourceId, sourceName, sourceIban, sourceType, destinationId, destinationName, destinationIban, destinationType, tags, piggyBankId, piggyBankName, subscriptionId, subscriptionName);
        }

        /// <summary>
        /// Serializes a <see cref="RecurrenceTransaction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recurrenceTransaction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RecurrenceTransaction recurrenceTransaction, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, recurrenceTransaction, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RecurrenceTransaction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recurrenceTransaction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RecurrenceTransaction recurrenceTransaction, JsonSerializerOptions jsonSerializerOptions)
        {
            if (recurrenceTransaction.Description == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.Description), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.Amount == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.Amount), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.IdOption.IsSet && recurrenceTransaction.Id == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.Id), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.CurrencyIdOption.IsSet && recurrenceTransaction.CurrencyId == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.CurrencyId), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.CurrencyNameOption.IsSet && recurrenceTransaction.CurrencyName == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.CurrencyName), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.CurrencyCodeOption.IsSet && recurrenceTransaction.CurrencyCode == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.CurrencyCode), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.CurrencySymbolOption.IsSet && recurrenceTransaction.CurrencySymbol == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.CurrencySymbol), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.PrimaryCurrencyIdOption.IsSet && recurrenceTransaction.PrimaryCurrencyId == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.PrimaryCurrencyId), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.PrimaryCurrencyNameOption.IsSet && recurrenceTransaction.PrimaryCurrencyName == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.PrimaryCurrencyName), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.PrimaryCurrencyCodeOption.IsSet && recurrenceTransaction.PrimaryCurrencyCode == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.PrimaryCurrencyCode), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.PrimaryCurrencySymbolOption.IsSet && recurrenceTransaction.PrimaryCurrencySymbol == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.PrimaryCurrencySymbol), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.PcAmountOption.IsSet && recurrenceTransaction.PcAmount == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.PcAmount), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.BudgetIdOption.IsSet && recurrenceTransaction.BudgetId == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.BudgetId), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.CategoryIdOption.IsSet && recurrenceTransaction.CategoryId == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.CategoryId), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.CategoryNameOption.IsSet && recurrenceTransaction.CategoryName == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.CategoryName), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.SourceIdOption.IsSet && recurrenceTransaction.SourceId == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.SourceId), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.SourceNameOption.IsSet && recurrenceTransaction.SourceName == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.SourceName), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.DestinationIdOption.IsSet && recurrenceTransaction.DestinationId == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.DestinationId), "Property is required for class RecurrenceTransaction.");

            if (recurrenceTransaction.DestinationNameOption.IsSet && recurrenceTransaction.DestinationName == null)
                throw new ArgumentNullException(nameof(recurrenceTransaction.DestinationName), "Property is required for class RecurrenceTransaction.");

            writer.WriteString("description", recurrenceTransaction.Description);

            writer.WriteString("amount", recurrenceTransaction.Amount);

            if (recurrenceTransaction.IdOption.IsSet)
                writer.WriteString("id", recurrenceTransaction.Id);

            if (recurrenceTransaction.ObjectHasCurrencySettingOption.IsSet)
                writer.WriteBoolean("object_has_currency_setting", recurrenceTransaction.ObjectHasCurrencySettingOption.Value!.Value);

            if (recurrenceTransaction.CurrencyIdOption.IsSet)
                writer.WriteString("currency_id", recurrenceTransaction.CurrencyId);

            if (recurrenceTransaction.CurrencyNameOption.IsSet)
                writer.WriteString("currency_name", recurrenceTransaction.CurrencyName);

            if (recurrenceTransaction.CurrencyCodeOption.IsSet)
                writer.WriteString("currency_code", recurrenceTransaction.CurrencyCode);

            if (recurrenceTransaction.CurrencySymbolOption.IsSet)
                writer.WriteString("currency_symbol", recurrenceTransaction.CurrencySymbol);

            if (recurrenceTransaction.CurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("currency_decimal_places", recurrenceTransaction.CurrencyDecimalPlacesOption.Value!.Value);

            if (recurrenceTransaction.PrimaryCurrencyIdOption.IsSet)
                writer.WriteString("primary_currency_id", recurrenceTransaction.PrimaryCurrencyId);

            if (recurrenceTransaction.PrimaryCurrencyNameOption.IsSet)
                writer.WriteString("primary_currency_name", recurrenceTransaction.PrimaryCurrencyName);

            if (recurrenceTransaction.PrimaryCurrencyCodeOption.IsSet)
                writer.WriteString("primary_currency_code", recurrenceTransaction.PrimaryCurrencyCode);

            if (recurrenceTransaction.PrimaryCurrencySymbolOption.IsSet)
                writer.WriteString("primary_currency_symbol", recurrenceTransaction.PrimaryCurrencySymbol);

            if (recurrenceTransaction.PrimaryCurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("primary_currency_decimal_places", recurrenceTransaction.PrimaryCurrencyDecimalPlacesOption.Value!.Value);

            if (recurrenceTransaction.PcAmountOption.IsSet)
                writer.WriteString("pc_amount", recurrenceTransaction.PcAmount);

            if (recurrenceTransaction.ForeignAmountOption.IsSet)
                if (recurrenceTransaction.ForeignAmountOption.Value != null)
                    writer.WriteString("foreign_amount", recurrenceTransaction.ForeignAmount);
                else
                    writer.WriteNull("foreign_amount");

            if (recurrenceTransaction.PcForeignAmountOption.IsSet)
                if (recurrenceTransaction.PcForeignAmountOption.Value != null)
                    writer.WriteString("pc_foreign_amount", recurrenceTransaction.PcForeignAmount);
                else
                    writer.WriteNull("pc_foreign_amount");

            if (recurrenceTransaction.ForeignCurrencyIdOption.IsSet)
                if (recurrenceTransaction.ForeignCurrencyIdOption.Value != null)
                    writer.WriteString("foreign_currency_id", recurrenceTransaction.ForeignCurrencyId);
                else
                    writer.WriteNull("foreign_currency_id");

            if (recurrenceTransaction.ForeignCurrencyNameOption.IsSet)
                if (recurrenceTransaction.ForeignCurrencyNameOption.Value != null)
                    writer.WriteString("foreign_currency_name", recurrenceTransaction.ForeignCurrencyName);
                else
                    writer.WriteNull("foreign_currency_name");

            if (recurrenceTransaction.ForeignCurrencyCodeOption.IsSet)
                if (recurrenceTransaction.ForeignCurrencyCodeOption.Value != null)
                    writer.WriteString("foreign_currency_code", recurrenceTransaction.ForeignCurrencyCode);
                else
                    writer.WriteNull("foreign_currency_code");

            if (recurrenceTransaction.ForeignCurrencySymbolOption.IsSet)
                if (recurrenceTransaction.ForeignCurrencySymbolOption.Value != null)
                    writer.WriteString("foreign_currency_symbol", recurrenceTransaction.ForeignCurrencySymbol);
                else
                    writer.WriteNull("foreign_currency_symbol");

            if (recurrenceTransaction.ForeignCurrencyDecimalPlacesOption.IsSet)
                if (recurrenceTransaction.ForeignCurrencyDecimalPlacesOption.Value != null)
                    writer.WriteNumber("foreign_currency_decimal_places", recurrenceTransaction.ForeignCurrencyDecimalPlacesOption.Value!.Value);
                else
                    writer.WriteNull("foreign_currency_decimal_places");

            if (recurrenceTransaction.BudgetIdOption.IsSet)
                writer.WriteString("budget_id", recurrenceTransaction.BudgetId);

            if (recurrenceTransaction.BudgetNameOption.IsSet)
                if (recurrenceTransaction.BudgetNameOption.Value != null)
                    writer.WriteString("budget_name", recurrenceTransaction.BudgetName);
                else
                    writer.WriteNull("budget_name");

            if (recurrenceTransaction.CategoryIdOption.IsSet)
                writer.WriteString("category_id", recurrenceTransaction.CategoryId);

            if (recurrenceTransaction.CategoryNameOption.IsSet)
                writer.WriteString("category_name", recurrenceTransaction.CategoryName);

            if (recurrenceTransaction.SourceIdOption.IsSet)
                writer.WriteString("source_id", recurrenceTransaction.SourceId);

            if (recurrenceTransaction.SourceNameOption.IsSet)
                writer.WriteString("source_name", recurrenceTransaction.SourceName);

            if (recurrenceTransaction.SourceIbanOption.IsSet)
                if (recurrenceTransaction.SourceIbanOption.Value != null)
                    writer.WriteString("source_iban", recurrenceTransaction.SourceIban);
                else
                    writer.WriteNull("source_iban");

            if (recurrenceTransaction.SourceTypeOption.IsSet)
            {
                var sourceTypeRawValue = AccountTypePropertyValueConverter.ToJsonValue(recurrenceTransaction.SourceType!.Value);
                writer.WriteString("source_type", sourceTypeRawValue);
            }
            if (recurrenceTransaction.DestinationIdOption.IsSet)
                writer.WriteString("destination_id", recurrenceTransaction.DestinationId);

            if (recurrenceTransaction.DestinationNameOption.IsSet)
                writer.WriteString("destination_name", recurrenceTransaction.DestinationName);

            if (recurrenceTransaction.DestinationIbanOption.IsSet)
                if (recurrenceTransaction.DestinationIbanOption.Value != null)
                    writer.WriteString("destination_iban", recurrenceTransaction.DestinationIban);
                else
                    writer.WriteNull("destination_iban");

            if (recurrenceTransaction.DestinationTypeOption.IsSet)
            {
                var destinationTypeRawValue = AccountTypePropertyValueConverter.ToJsonValue(recurrenceTransaction.DestinationType!.Value);
                writer.WriteString("destination_type", destinationTypeRawValue);
            }
            if (recurrenceTransaction.TagsOption.IsSet)
                if (recurrenceTransaction.TagsOption.Value != null)
                {
                    writer.WritePropertyName("tags");
                    JsonSerializer.Serialize(writer, recurrenceTransaction.Tags, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("tags");
            if (recurrenceTransaction.PiggyBankIdOption.IsSet)
                if (recurrenceTransaction.PiggyBankIdOption.Value != null)
                    writer.WriteString("piggy_bank_id", recurrenceTransaction.PiggyBankId);
                else
                    writer.WriteNull("piggy_bank_id");

            if (recurrenceTransaction.PiggyBankNameOption.IsSet)
                if (recurrenceTransaction.PiggyBankNameOption.Value != null)
                    writer.WriteString("piggy_bank_name", recurrenceTransaction.PiggyBankName);
                else
                    writer.WriteNull("piggy_bank_name");

            if (recurrenceTransaction.SubscriptionIdOption.IsSet)
                if (recurrenceTransaction.SubscriptionIdOption.Value != null)
                    writer.WriteString("subscription_id", recurrenceTransaction.SubscriptionId);
                else
                    writer.WriteNull("subscription_id");

            if (recurrenceTransaction.SubscriptionNameOption.IsSet)
                if (recurrenceTransaction.SubscriptionNameOption.Value != null)
                    writer.WriteString("subscription_name", recurrenceTransaction.SubscriptionName);
                else
                    writer.WriteNull("subscription_name");
        }
    }
}
