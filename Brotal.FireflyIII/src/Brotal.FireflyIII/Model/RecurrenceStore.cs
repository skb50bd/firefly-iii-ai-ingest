// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// RecurrenceStore
    /// </summary>
    public partial class RecurrenceStore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrenceStore" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="title">title</param>
        /// <param name="firstDate">First time the recurring transaction will fire. Must be after today.</param>
        /// <param name="repetitions">repetitions</param>
        /// <param name="transactions">transactions</param>
        /// <param name="description">Not to be confused with the description of the actual transaction(s) being created.</param>
        /// <param name="repeatUntil">Date until the recurring transaction can fire. Use either this field or repetitions.</param>
        /// <param name="nrOfRepetitions">Max number of created transactions. Use either this field or repeat_until.</param>
        /// <param name="applyRules">Whether or not to fire the rules after the creation of a transaction.</param>
        /// <param name="active">If the recurrence is even active.</param>
        /// <param name="notes">notes</param>
        [JsonConstructor]
        public RecurrenceStore(RecurrenceTransactionType type, string title, DateOnly firstDate, List<RecurrenceRepetitionStore> repetitions, List<RecurrenceTransactionStore> transactions, Option<string?> description = default, DateOnly? repeatUntil = default, Option<int?> nrOfRepetitions = default, Option<bool?> applyRules = default, Option<bool?> active = default, Option<string?> notes = default)
        {
            Type = type;
            Title = title;
            FirstDate = firstDate;
            Repetitions = repetitions;
            Transactions = transactions;
            DescriptionOption = description;
            RepeatUntil = repeatUntil;
            NrOfRepetitionsOption = nrOfRepetitions;
            ApplyRulesOption = applyRules;
            ActiveOption = active;
            NotesOption = notes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public RecurrenceTransactionType Type { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        /* <example>Rent</example> */
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// First time the recurring transaction will fire. Must be after today.
        /// </summary>
        /// <value>First time the recurring transaction will fire. Must be after today.</value>
        /* <example>Sun Aug 31 00:00:00 UTC 2025</example> */
        [JsonPropertyName("first_date")]
        public DateOnly FirstDate { get; set; }

        /// <summary>
        /// Gets or Sets Repetitions
        /// </summary>
        [JsonPropertyName("repetitions")]
        public List<RecurrenceRepetitionStore> Repetitions { get; set; }

        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [JsonPropertyName("transactions")]
        public List<RecurrenceTransactionStore> Transactions { get; set; }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Not to be confused with the description of the actual transaction(s) being created.
        /// </summary>
        /// <value>Not to be confused with the description of the actual transaction(s) being created.</value>
        /* <example>Recurring transaction for the monthly rent</example> */
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Date until the recurring transaction can fire. Use either this field or repetitions.
        /// </summary>
        /// <value>Date until the recurring transaction can fire. Use either this field or repetitions.</value>
        /* <example>Sun Aug 31 00:00:00 UTC 2025</example> */
        [JsonPropertyName("repeat_until")]
        public DateOnly? RepeatUntil { get; set; }

        /// <summary>
        /// Used to track the state of NrOfRepetitions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NrOfRepetitionsOption { get; private set; }

        /// <summary>
        /// Max number of created transactions. Use either this field or repeat_until.
        /// </summary>
        /// <value>Max number of created transactions. Use either this field or repeat_until.</value>
        /* <example>5</example> */
        [JsonPropertyName("nr_of_repetitions")]
        public int? NrOfRepetitions { get { return this.NrOfRepetitionsOption; } set { this.NrOfRepetitionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ApplyRules
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ApplyRulesOption { get; private set; }

        /// <summary>
        /// Whether or not to fire the rules after the creation of a transaction.
        /// </summary>
        /// <value>Whether or not to fire the rules after the creation of a transaction.</value>
        /* <example>true</example> */
        [JsonPropertyName("apply_rules")]
        public bool? ApplyRules { get { return this.ApplyRulesOption; } set { this.ApplyRulesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// If the recurrence is even active.
        /// </summary>
        /// <value>If the recurrence is even active.</value>
        /* <example>true</example> */
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        /* <example>Some notes</example> */
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecurrenceStore {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  FirstDate: ").Append(FirstDate).Append("\n");
            sb.Append("  Repetitions: ").Append(Repetitions).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RepeatUntil: ").Append(RepeatUntil).Append("\n");
            sb.Append("  NrOfRepetitions: ").Append(NrOfRepetitions).Append("\n");
            sb.Append("  ApplyRules: ").Append(ApplyRules).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RecurrenceStore" />
    /// </summary>
    public class RecurrenceStoreJsonConverter : JsonConverter<RecurrenceStore>
    {
        /// <summary>
        /// The format to use to serialize FirstDate
        /// </summary>
        public static string FirstDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize RepeatUntil
        /// </summary>
        public static string RepeatUntilFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="RecurrenceStore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RecurrenceStore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<RecurrenceTransactionType?> type = default;
            Option<string?> title = default;
            Option<DateOnly?> firstDate = default;
            Option<List<RecurrenceRepetitionStore>?> repetitions = default;
            Option<List<RecurrenceTransactionStore>?> transactions = default;
            Option<string?> description = default;
            Option<DateOnly?> repeatUntil = default;
            Option<int?> nrOfRepetitions = default;
            Option<bool?> applyRules = default;
            Option<bool?> active = default;
            Option<string?> notes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<RecurrenceTransactionType?>(RecurrenceTransactionTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "first_date":
                            firstDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "repetitions":
                            repetitions = new Option<List<RecurrenceRepetitionStore>?>(JsonSerializer.Deserialize<List<RecurrenceRepetitionStore>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "transactions":
                            transactions = new Option<List<RecurrenceTransactionStore>?>(JsonSerializer.Deserialize<List<RecurrenceTransactionStore>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "repeat_until":
                            repeatUntil = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "nr_of_repetitions":
                            nrOfRepetitions = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "apply_rules":
                            applyRules = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "active":
                            active = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class RecurrenceStore.", nameof(type));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class RecurrenceStore.", nameof(title));

            if (!firstDate.IsSet)
                throw new ArgumentException("Property is required for class RecurrenceStore.", nameof(firstDate));

            if (!repetitions.IsSet)
                throw new ArgumentException("Property is required for class RecurrenceStore.", nameof(repetitions));

            if (!transactions.IsSet)
                throw new ArgumentException("Property is required for class RecurrenceStore.", nameof(transactions));

            if (!repeatUntil.IsSet)
                throw new ArgumentException("Property is required for class RecurrenceStore.", nameof(repeatUntil));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class RecurrenceStore.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class RecurrenceStore.");

            if (firstDate.IsSet && firstDate.Value == null)
                throw new ArgumentNullException(nameof(firstDate), "Property is not nullable for class RecurrenceStore.");

            if (repetitions.IsSet && repetitions.Value == null)
                throw new ArgumentNullException(nameof(repetitions), "Property is not nullable for class RecurrenceStore.");

            if (transactions.IsSet && transactions.Value == null)
                throw new ArgumentNullException(nameof(transactions), "Property is not nullable for class RecurrenceStore.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class RecurrenceStore.");

            if (applyRules.IsSet && applyRules.Value == null)
                throw new ArgumentNullException(nameof(applyRules), "Property is not nullable for class RecurrenceStore.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class RecurrenceStore.");

            return new RecurrenceStore(type.Value!.Value!, title.Value!, firstDate.Value!.Value!, repetitions.Value!, transactions.Value!, description, repeatUntil.Value!, nrOfRepetitions, applyRules, active, notes);
        }

        /// <summary>
        /// Serializes a <see cref="RecurrenceStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recurrenceStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RecurrenceStore recurrenceStore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, recurrenceStore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RecurrenceStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recurrenceStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RecurrenceStore recurrenceStore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (recurrenceStore.Title == null)
                throw new ArgumentNullException(nameof(recurrenceStore.Title), "Property is required for class RecurrenceStore.");

            if (recurrenceStore.Repetitions == null)
                throw new ArgumentNullException(nameof(recurrenceStore.Repetitions), "Property is required for class RecurrenceStore.");

            if (recurrenceStore.Transactions == null)
                throw new ArgumentNullException(nameof(recurrenceStore.Transactions), "Property is required for class RecurrenceStore.");

            if (recurrenceStore.DescriptionOption.IsSet && recurrenceStore.Description == null)
                throw new ArgumentNullException(nameof(recurrenceStore.Description), "Property is required for class RecurrenceStore.");

            var typeRawValue = RecurrenceTransactionTypeValueConverter.ToJsonValue(recurrenceStore.Type);
            writer.WriteString("type", typeRawValue);

            writer.WriteString("title", recurrenceStore.Title);

            writer.WriteString("first_date", recurrenceStore.FirstDate.ToString(FirstDateFormat));

            writer.WritePropertyName("repetitions");
            JsonSerializer.Serialize(writer, recurrenceStore.Repetitions, jsonSerializerOptions);
            writer.WritePropertyName("transactions");
            JsonSerializer.Serialize(writer, recurrenceStore.Transactions, jsonSerializerOptions);
            if (recurrenceStore.DescriptionOption.IsSet)
                writer.WriteString("description", recurrenceStore.Description);

            if (recurrenceStore.RepeatUntil != null)
                writer.WriteString("repeat_until", recurrenceStore.RepeatUntil.Value.ToString(RepeatUntilFormat));
            else
                writer.WriteNull("repeat_until");

            if (recurrenceStore.NrOfRepetitionsOption.IsSet)
                if (recurrenceStore.NrOfRepetitionsOption.Value != null)
                    writer.WriteNumber("nr_of_repetitions", recurrenceStore.NrOfRepetitionsOption.Value!.Value);
                else
                    writer.WriteNull("nr_of_repetitions");

            if (recurrenceStore.ApplyRulesOption.IsSet)
                writer.WriteBoolean("apply_rules", recurrenceStore.ApplyRulesOption.Value!.Value);

            if (recurrenceStore.ActiveOption.IsSet)
                writer.WriteBoolean("active", recurrenceStore.ActiveOption.Value!.Value);

            if (recurrenceStore.NotesOption.IsSet)
                if (recurrenceStore.NotesOption.Value != null)
                    writer.WriteString("notes", recurrenceStore.Notes);
                else
                    writer.WriteNull("notes");
        }
    }
}
