// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// SystemInfoData
    /// </summary>
    public partial class SystemInfoData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemInfoData" /> class.
        /// </summary>
        /// <param name="varVersion">varVersion</param>
        /// <param name="apiVersion">Same value as the version field.</param>
        /// <param name="phpVersion">phpVersion</param>
        /// <param name="os">os</param>
        /// <param name="driver">driver</param>
        [JsonConstructor]
        public SystemInfoData(Option<string?> varVersion = default, Option<string?> apiVersion = default, Option<string?> phpVersion = default, Option<string?> os = default, Option<string?> driver = default)
        {
            VarVersionOption = varVersion;
            ApiVersionOption = apiVersion;
            PhpVersionOption = phpVersion;
            OsOption = os;
            DriverOption = driver;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        /* <example>6.3.0</example> */
        [JsonPropertyName("version")]
        public string? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of ApiVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ApiVersionOption { get; private set; }

        /// <summary>
        /// Same value as the version field.
        /// </summary>
        /// <value>Same value as the version field.</value>
        /* <example>6.3.0</example> */
        [JsonPropertyName("api_version")]
        public string? ApiVersion { get { return this.ApiVersionOption; } set { this.ApiVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of PhpVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhpVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets PhpVersion
        /// </summary>
        /* <example>8.1.5</example> */
        [JsonPropertyName("php_version")]
        public string? PhpVersion { get { return this.PhpVersionOption; } set { this.PhpVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Os
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Os
        /// </summary>
        /* <example>Linux</example> */
        [JsonPropertyName("os")]
        public string? Os { get { return this.OsOption; } set { this.OsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Driver
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DriverOption { get; private set; }

        /// <summary>
        /// Gets or Sets Driver
        /// </summary>
        /* <example>mysql</example> */
        [JsonPropertyName("driver")]
        public string? Driver { get { return this.DriverOption; } set { this.DriverOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemInfoData {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  PhpVersion: ").Append(PhpVersion).Append("\n");
            sb.Append("  Os: ").Append(Os).Append("\n");
            sb.Append("  Driver: ").Append(Driver).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SystemInfoData" />
    /// </summary>
    public class SystemInfoDataJsonConverter : JsonConverter<SystemInfoData>
    {
        /// <summary>
        /// Deserializes json to <see cref="SystemInfoData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SystemInfoData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varVersion = default;
            Option<string?> apiVersion = default;
            Option<string?> phpVersion = default;
            Option<string?> os = default;
            Option<string?> driver = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "api_version":
                            apiVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "php_version":
                            phpVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "os":
                            os = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "driver":
                            driver = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class SystemInfoData.");

            if (apiVersion.IsSet && apiVersion.Value == null)
                throw new ArgumentNullException(nameof(apiVersion), "Property is not nullable for class SystemInfoData.");

            if (phpVersion.IsSet && phpVersion.Value == null)
                throw new ArgumentNullException(nameof(phpVersion), "Property is not nullable for class SystemInfoData.");

            if (os.IsSet && os.Value == null)
                throw new ArgumentNullException(nameof(os), "Property is not nullable for class SystemInfoData.");

            if (driver.IsSet && driver.Value == null)
                throw new ArgumentNullException(nameof(driver), "Property is not nullable for class SystemInfoData.");

            return new SystemInfoData(varVersion, apiVersion, phpVersion, os, driver);
        }

        /// <summary>
        /// Serializes a <see cref="SystemInfoData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemInfoData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SystemInfoData systemInfoData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, systemInfoData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SystemInfoData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemInfoData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SystemInfoData systemInfoData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (systemInfoData.VarVersionOption.IsSet && systemInfoData.VarVersion == null)
                throw new ArgumentNullException(nameof(systemInfoData.VarVersion), "Property is required for class SystemInfoData.");

            if (systemInfoData.ApiVersionOption.IsSet && systemInfoData.ApiVersion == null)
                throw new ArgumentNullException(nameof(systemInfoData.ApiVersion), "Property is required for class SystemInfoData.");

            if (systemInfoData.PhpVersionOption.IsSet && systemInfoData.PhpVersion == null)
                throw new ArgumentNullException(nameof(systemInfoData.PhpVersion), "Property is required for class SystemInfoData.");

            if (systemInfoData.OsOption.IsSet && systemInfoData.Os == null)
                throw new ArgumentNullException(nameof(systemInfoData.Os), "Property is required for class SystemInfoData.");

            if (systemInfoData.DriverOption.IsSet && systemInfoData.Driver == null)
                throw new ArgumentNullException(nameof(systemInfoData.Driver), "Property is required for class SystemInfoData.");

            if (systemInfoData.VarVersionOption.IsSet)
                writer.WriteString("version", systemInfoData.VarVersion);

            if (systemInfoData.ApiVersionOption.IsSet)
                writer.WriteString("api_version", systemInfoData.ApiVersion);

            if (systemInfoData.PhpVersionOption.IsSet)
                writer.WriteString("php_version", systemInfoData.PhpVersion);

            if (systemInfoData.OsOption.IsSet)
                writer.WriteString("os", systemInfoData.Os);

            if (systemInfoData.DriverOption.IsSet)
                writer.WriteString("driver", systemInfoData.Driver);
        }
    }
}
