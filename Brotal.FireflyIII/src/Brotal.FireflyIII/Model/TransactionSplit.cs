// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// TransactionSplit
    /// </summary>
    public partial class TransactionSplit : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSplit" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="date">Date of the transaction</param>
        /// <param name="amount">Amount of the transaction.</param>
        /// <param name="description">Description of the transaction.</param>
        /// <param name="user">User ID</param>
        /// <param name="transactionJournalId">ID of the underlying transaction journal. Each transaction consists of a transaction group (see the top ID) and one or more journals making up the splits of the transaction. </param>
        /// <param name="order">Order of this entry in the list of transactions.</param>
        /// <param name="objectHasCurrencySetting">Indicates whether the transaction has a currency setting. For transactions this is always true.</param>
        /// <param name="currencyId">Currency ID for the currency of this transaction.</param>
        /// <param name="currencyCode">Currency code for the currency of this transaction.</param>
        /// <param name="currencySymbol">Currency symbol for the currency of this transaction.</param>
        /// <param name="currencyName">Currency name for the currency of this transaction.</param>
        /// <param name="currencyDecimalPlaces">Number of decimals used in this currency.</param>
        /// <param name="foreignCurrencyId">Currency ID of the foreign currency, if this transaction has a foreign amount.</param>
        /// <param name="foreignCurrencyCode">Currency code of the foreign currency. Default is NULL.</param>
        /// <param name="foreignCurrencySymbol">foreignCurrencySymbol</param>
        /// <param name="foreignCurrencyDecimalPlaces">Number of decimals in the foreign currency.</param>
        /// <param name="primaryCurrencyId">Returns the primary currency ID of the administration. This currency is used as the currency for all &#x60;pc_*&#x60; amount and balance fields of this account.</param>
        /// <param name="primaryCurrencyCode">Returns the primary currency code of the administration. This currency is used as the currency for all &#x60;pc_*&#x60; amount and balance fields of this account.</param>
        /// <param name="primaryCurrencySymbol">See the other &#x60;primary_*&#x60; fields.</param>
        /// <param name="primaryCurrencyDecimalPlaces">See the other &#x60;primary_*&#x60; fields.</param>
        /// <param name="pcAmount">Amount of the transaction in the primary currency of this administration. The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.</param>
        /// <param name="foreignAmount">The amount in the set foreign currency. May be NULL if the transaction does not have a foreign amount.</param>
        /// <param name="pcForeignAmount">Foreign amount of the transaction in the primary currency of this administration. The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.</param>
        /// <param name="sourceBalanceAfter">The balance of the source account. This is the balance in the account&#39;s currency which may be different from this transaction, and is not provided in this model.</param>
        /// <param name="pcSourceBalanceAfter">The balance of the source account in the primary currency of this administration. The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.</param>
        /// <param name="destinationBalanceAfter">The balance of the destination account. This is the balance in the account&#39;s currency which may be different from this transaction, and is not provided in this model.</param>
        /// <param name="pcDestinationBalanceAfter">The balance of the destination account in the primary currency of this administration. The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.</param>
        /// <param name="sourceId">ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.</param>
        /// <param name="sourceName">Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.</param>
        /// <param name="sourceIban">sourceIban</param>
        /// <param name="sourceType">sourceType</param>
        /// <param name="destinationId">ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.</param>
        /// <param name="destinationName">Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.</param>
        /// <param name="destinationIban">destinationIban</param>
        /// <param name="destinationType">destinationType</param>
        /// <param name="budgetId">The budget ID for this transaction.</param>
        /// <param name="budgetName">The name of the budget used.</param>
        /// <param name="categoryId">The category ID for this transaction.</param>
        /// <param name="categoryName">The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.</param>
        /// <param name="billId">The associated subscription ID for this transaction. &#x60;bill&#x60; refers to the OLD name for subscriptions and this field will be removed.</param>
        /// <param name="billName">The associated subscription name for this transaction. &#x60;bill&#x60; refers to the OLD name for subscriptions and this field will be removed.</param>
        /// <param name="subscriptionId">The associated subscription ID for this transaction.</param>
        /// <param name="subscriptionName">The associated subscription name for this transaction.</param>
        /// <param name="reconciled">If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.</param>
        /// <param name="notes">notes</param>
        /// <param name="tags">Array of tags.</param>
        /// <param name="internalReference">Reference to internal reference of other systems.</param>
        /// <param name="externalId">Reference to external ID in other systems.</param>
        /// <param name="externalUrl">External, custom URL for this transaction.</param>
        /// <param name="originalSource">System generated identifier for original creator of transaction.</param>
        /// <param name="recurrenceId">Reference to recurrence that made the transaction.</param>
        /// <param name="recurrenceTotal">Total number of transactions expected to be created by this recurrence repetition. Will be 0 if infinite.</param>
        /// <param name="recurrenceCount">The # of the current transaction created under this recurrence.</param>
        /// <param name="importHashV2">Hash value of original import transaction (for duplicate detection).</param>
        /// <param name="sepaCc">SEPA Clearing Code</param>
        /// <param name="sepaCtOp">SEPA Opposing Account Identifier</param>
        /// <param name="sepaCtId">SEPA end-to-end Identifier</param>
        /// <param name="sepaDb">SEPA mandate identifier</param>
        /// <param name="sepaCountry">SEPA Country</param>
        /// <param name="sepaEp">SEPA External Purpose indicator</param>
        /// <param name="sepaCi">SEPA Creditor Identifier</param>
        /// <param name="sepaBatchId">SEPA Batch ID</param>
        /// <param name="interestDate">interestDate</param>
        /// <param name="bookDate">bookDate</param>
        /// <param name="processDate">processDate</param>
        /// <param name="dueDate">dueDate</param>
        /// <param name="paymentDate">paymentDate</param>
        /// <param name="invoiceDate">invoiceDate</param>
        /// <param name="latitude">Latitude of the transaction&#39;s location, if applicable. Can be used to draw a map.</param>
        /// <param name="longitude">Latitude of the transaction&#39;s location, if applicable. Can be used to draw a map.</param>
        /// <param name="zoomLevel">Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.</param>
        /// <param name="hasAttachments">If the transaction has attachments.</param>
        [JsonConstructor]
        public TransactionSplit(TransactionTypeProperty type, DateTime date, string amount, string description, Option<string?> user = default, Option<string?> transactionJournalId = default, Option<int?> order = default, Option<bool?> objectHasCurrencySetting = default, Option<string?> currencyId = default, Option<string?> currencyCode = default, Option<string?> currencySymbol = default, Option<string?> currencyName = default, Option<int?> currencyDecimalPlaces = default, Option<string?> foreignCurrencyId = default, Option<string?> foreignCurrencyCode = default, Option<string?> foreignCurrencySymbol = default, Option<int?> foreignCurrencyDecimalPlaces = default, Option<string?> primaryCurrencyId = default, Option<string?> primaryCurrencyCode = default, Option<string?> primaryCurrencySymbol = default, Option<int?> primaryCurrencyDecimalPlaces = default, Option<string?> pcAmount = default, Option<string?> foreignAmount = default, Option<string?> pcForeignAmount = default, Option<string?> sourceBalanceAfter = default, Option<string?> pcSourceBalanceAfter = default, Option<string?> destinationBalanceAfter = default, Option<string?> pcDestinationBalanceAfter = default, string? sourceId = default, Option<string?> sourceName = default, Option<string?> sourceIban = default, Option<AccountTypeProperty?> sourceType = default, string? destinationId = default, Option<string?> destinationName = default, Option<string?> destinationIban = default, Option<AccountTypeProperty?> destinationType = default, Option<string?> budgetId = default, Option<string?> budgetName = default, Option<string?> categoryId = default, Option<string?> categoryName = default, Option<string?> billId = default, Option<string?> billName = default, Option<string?> subscriptionId = default, Option<string?> subscriptionName = default, Option<bool?> reconciled = default, Option<string?> notes = default, Option<List<string>?> tags = default, Option<string?> internalReference = default, Option<string?> externalId = default, Option<string?> externalUrl = default, Option<string?> originalSource = default, Option<string?> recurrenceId = default, Option<int?> recurrenceTotal = default, Option<int?> recurrenceCount = default, Option<string?> importHashV2 = default, Option<string?> sepaCc = default, Option<string?> sepaCtOp = default, Option<string?> sepaCtId = default, Option<string?> sepaDb = default, Option<string?> sepaCountry = default, Option<string?> sepaEp = default, Option<string?> sepaCi = default, Option<string?> sepaBatchId = default, Option<DateTime?> interestDate = default, Option<DateTime?> bookDate = default, Option<DateTime?> processDate = default, Option<DateTime?> dueDate = default, Option<DateTime?> paymentDate = default, Option<DateTime?> invoiceDate = default, Option<double?> latitude = default, Option<double?> longitude = default, Option<int?> zoomLevel = default, Option<bool?> hasAttachments = default)
        {
            Type = type;
            Date = date;
            Amount = amount;
            Description = description;
            UserOption = user;
            TransactionJournalIdOption = transactionJournalId;
            OrderOption = order;
            ObjectHasCurrencySettingOption = objectHasCurrencySetting;
            CurrencyIdOption = currencyId;
            CurrencyCodeOption = currencyCode;
            CurrencySymbolOption = currencySymbol;
            CurrencyNameOption = currencyName;
            CurrencyDecimalPlacesOption = currencyDecimalPlaces;
            ForeignCurrencyIdOption = foreignCurrencyId;
            ForeignCurrencyCodeOption = foreignCurrencyCode;
            ForeignCurrencySymbolOption = foreignCurrencySymbol;
            ForeignCurrencyDecimalPlacesOption = foreignCurrencyDecimalPlaces;
            PrimaryCurrencyIdOption = primaryCurrencyId;
            PrimaryCurrencyCodeOption = primaryCurrencyCode;
            PrimaryCurrencySymbolOption = primaryCurrencySymbol;
            PrimaryCurrencyDecimalPlacesOption = primaryCurrencyDecimalPlaces;
            PcAmountOption = pcAmount;
            ForeignAmountOption = foreignAmount;
            PcForeignAmountOption = pcForeignAmount;
            SourceBalanceAfterOption = sourceBalanceAfter;
            PcSourceBalanceAfterOption = pcSourceBalanceAfter;
            DestinationBalanceAfterOption = destinationBalanceAfter;
            PcDestinationBalanceAfterOption = pcDestinationBalanceAfter;
            SourceId = sourceId;
            SourceNameOption = sourceName;
            SourceIbanOption = sourceIban;
            SourceTypeOption = sourceType;
            DestinationId = destinationId;
            DestinationNameOption = destinationName;
            DestinationIbanOption = destinationIban;
            DestinationTypeOption = destinationType;
            BudgetIdOption = budgetId;
            BudgetNameOption = budgetName;
            CategoryIdOption = categoryId;
            CategoryNameOption = categoryName;
            BillIdOption = billId;
            BillNameOption = billName;
            SubscriptionIdOption = subscriptionId;
            SubscriptionNameOption = subscriptionName;
            ReconciledOption = reconciled;
            NotesOption = notes;
            TagsOption = tags;
            InternalReferenceOption = internalReference;
            ExternalIdOption = externalId;
            ExternalUrlOption = externalUrl;
            OriginalSourceOption = originalSource;
            RecurrenceIdOption = recurrenceId;
            RecurrenceTotalOption = recurrenceTotal;
            RecurrenceCountOption = recurrenceCount;
            ImportHashV2Option = importHashV2;
            SepaCcOption = sepaCc;
            SepaCtOpOption = sepaCtOp;
            SepaCtIdOption = sepaCtId;
            SepaDbOption = sepaDb;
            SepaCountryOption = sepaCountry;
            SepaEpOption = sepaEp;
            SepaCiOption = sepaCi;
            SepaBatchIdOption = sepaBatchId;
            InterestDateOption = interestDate;
            BookDateOption = bookDate;
            ProcessDateOption = processDate;
            DueDateOption = dueDate;
            PaymentDateOption = paymentDate;
            InvoiceDateOption = invoiceDate;
            LatitudeOption = latitude;
            LongitudeOption = longitude;
            ZoomLevelOption = zoomLevel;
            HasAttachmentsOption = hasAttachments;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TransactionTypeProperty Type { get; set; }

        /// <summary>
        /// Used to track the state of SourceType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccountTypeProperty?> SourceTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SourceType
        /// </summary>
        [JsonPropertyName("source_type")]
        public AccountTypeProperty? SourceType { get { return this.SourceTypeOption; } set { this.SourceTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DestinationType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccountTypeProperty?> DestinationTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets DestinationType
        /// </summary>
        [JsonPropertyName("destination_type")]
        public AccountTypeProperty? DestinationType { get { return this.DestinationTypeOption; } set { this.DestinationTypeOption = new(value); } }

        /// <summary>
        /// Date of the transaction
        /// </summary>
        /// <value>Date of the transaction</value>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("date")]
        public DateTime Date { get; set; }

        /// <summary>
        /// Amount of the transaction.
        /// </summary>
        /// <value>Amount of the transaction.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Description of the transaction.
        /// </summary>
        /// <value>Description of the transaction.</value>
        /* <example>Vegetables</example> */
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Used to track the state of User
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserOption { get; }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        /* <example>3</example> */
        [JsonPropertyName("user")]
        public string? User { get { return this.UserOption; } }

        /// <summary>
        /// Used to track the state of TransactionJournalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TransactionJournalIdOption { get; }

        /// <summary>
        /// ID of the underlying transaction journal. Each transaction consists of a transaction group (see the top ID) and one or more journals making up the splits of the transaction. 
        /// </summary>
        /// <value>ID of the underlying transaction journal. Each transaction consists of a transaction group (see the top ID) and one or more journals making up the splits of the transaction. </value>
        /* <example>10421</example> */
        [JsonPropertyName("transaction_journal_id")]
        public string? TransactionJournalId { get { return this.TransactionJournalIdOption; } }

        /// <summary>
        /// Used to track the state of Order
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OrderOption { get; private set; }

        /// <summary>
        /// Order of this entry in the list of transactions.
        /// </summary>
        /// <value>Order of this entry in the list of transactions.</value>
        /* <example>0</example> */
        [JsonPropertyName("order")]
        public int? Order { get { return this.OrderOption; } set { this.OrderOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectHasCurrencySetting
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ObjectHasCurrencySettingOption { get; }

        /// <summary>
        /// Indicates whether the transaction has a currency setting. For transactions this is always true.
        /// </summary>
        /// <value>Indicates whether the transaction has a currency setting. For transactions this is always true.</value>
        /* <example>true</example> */
        [JsonPropertyName("object_has_currency_setting")]
        public bool? ObjectHasCurrencySetting { get { return this.ObjectHasCurrencySettingOption; } }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyIdOption { get; private set; }

        /// <summary>
        /// Currency ID for the currency of this transaction.
        /// </summary>
        /// <value>Currency ID for the currency of this transaction.</value>
        /* <example>12</example> */
        [JsonPropertyName("currency_id")]
        public string? CurrencyId { get { return this.CurrencyIdOption; } set { this.CurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// Currency code for the currency of this transaction.
        /// </summary>
        /// <value>Currency code for the currency of this transaction.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("currency_code")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencySymbolOption { get; }

        /// <summary>
        /// Currency symbol for the currency of this transaction.
        /// </summary>
        /// <value>Currency symbol for the currency of this transaction.</value>
        /* <example>$</example> */
        [JsonPropertyName("currency_symbol")]
        public string? CurrencySymbol { get { return this.CurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of CurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyNameOption { get; private set; }

        /// <summary>
        /// Currency name for the currency of this transaction.
        /// </summary>
        /// <value>Currency name for the currency of this transaction.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("currency_name")]
        public string? CurrencyName { get { return this.CurrencyNameOption; } set { this.CurrencyNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CurrencyDecimalPlacesOption { get; private set; }

        /// <summary>
        /// Number of decimals used in this currency.
        /// </summary>
        /// <value>Number of decimals used in this currency.</value>
        /* <example>2</example> */
        [JsonPropertyName("currency_decimal_places")]
        public int? CurrencyDecimalPlaces { get { return this.CurrencyDecimalPlacesOption; } set { this.CurrencyDecimalPlacesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForeignCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForeignCurrencyIdOption { get; private set; }

        /// <summary>
        /// Currency ID of the foreign currency, if this transaction has a foreign amount.
        /// </summary>
        /// <value>Currency ID of the foreign currency, if this transaction has a foreign amount.</value>
        /* <example>17</example> */
        [JsonPropertyName("foreign_currency_id")]
        public string? ForeignCurrencyId { get { return this.ForeignCurrencyIdOption; } set { this.ForeignCurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForeignCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForeignCurrencyCodeOption { get; private set; }

        /// <summary>
        /// Currency code of the foreign currency. Default is NULL.
        /// </summary>
        /// <value>Currency code of the foreign currency. Default is NULL.</value>
        /* <example>USD</example> */
        [JsonPropertyName("foreign_currency_code")]
        public string? ForeignCurrencyCode { get { return this.ForeignCurrencyCodeOption; } set { this.ForeignCurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForeignCurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForeignCurrencySymbolOption { get; }

        /// <summary>
        /// Gets or Sets ForeignCurrencySymbol
        /// </summary>
        /* <example>$</example> */
        [JsonPropertyName("foreign_currency_symbol")]
        public string? ForeignCurrencySymbol { get { return this.ForeignCurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of ForeignCurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ForeignCurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// Number of decimals in the foreign currency.
        /// </summary>
        /// <value>Number of decimals in the foreign currency.</value>
        /* <example>2</example> */
        [JsonPropertyName("foreign_currency_decimal_places")]
        public int? ForeignCurrencyDecimalPlaces { get { return this.ForeignCurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyIdOption { get; }

        /// <summary>
        /// Returns the primary currency ID of the administration. This currency is used as the currency for all &#x60;pc_*&#x60; amount and balance fields of this account.
        /// </summary>
        /// <value>Returns the primary currency ID of the administration. This currency is used as the currency for all &#x60;pc_*&#x60; amount and balance fields of this account.</value>
        /* <example>12</example> */
        [JsonPropertyName("primary_currency_id")]
        public string? PrimaryCurrencyId { get { return this.PrimaryCurrencyIdOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyCodeOption { get; private set; }

        /// <summary>
        /// Returns the primary currency code of the administration. This currency is used as the currency for all &#x60;pc_*&#x60; amount and balance fields of this account.
        /// </summary>
        /// <value>Returns the primary currency code of the administration. This currency is used as the currency for all &#x60;pc_*&#x60; amount and balance fields of this account.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("primary_currency_code")]
        public string? PrimaryCurrencyCode { get { return this.PrimaryCurrencyCodeOption; } set { this.PrimaryCurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencySymbolOption { get; }

        /// <summary>
        /// See the other &#x60;primary_*&#x60; fields.
        /// </summary>
        /// <value>See the other &#x60;primary_*&#x60; fields.</value>
        /* <example>$</example> */
        [JsonPropertyName("primary_currency_symbol")]
        public string? PrimaryCurrencySymbol { get { return this.PrimaryCurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PrimaryCurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// See the other &#x60;primary_*&#x60; fields.
        /// </summary>
        /// <value>See the other &#x60;primary_*&#x60; fields.</value>
        /* <example>2</example> */
        [JsonPropertyName("primary_currency_decimal_places")]
        public int? PrimaryCurrencyDecimalPlaces { get { return this.PrimaryCurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of PcAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcAmountOption { get; private set; }

        /// <summary>
        /// Amount of the transaction in the primary currency of this administration. The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.
        /// </summary>
        /// <value>Amount of the transaction in the primary currency of this administration. The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("pc_amount")]
        public string? PcAmount { get { return this.PcAmountOption; } set { this.PcAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForeignAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForeignAmountOption { get; private set; }

        /// <summary>
        /// The amount in the set foreign currency. May be NULL if the transaction does not have a foreign amount.
        /// </summary>
        /// <value>The amount in the set foreign currency. May be NULL if the transaction does not have a foreign amount.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("foreign_amount")]
        public string? ForeignAmount { get { return this.ForeignAmountOption; } set { this.ForeignAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of PcForeignAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcForeignAmountOption { get; private set; }

        /// <summary>
        /// Foreign amount of the transaction in the primary currency of this administration. The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.
        /// </summary>
        /// <value>Foreign amount of the transaction in the primary currency of this administration. The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("pc_foreign_amount")]
        public string? PcForeignAmount { get { return this.PcForeignAmountOption; } set { this.PcForeignAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceBalanceAfter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceBalanceAfterOption { get; private set; }

        /// <summary>
        /// The balance of the source account. This is the balance in the account&#39;s currency which may be different from this transaction, and is not provided in this model.
        /// </summary>
        /// <value>The balance of the source account. This is the balance in the account&#39;s currency which may be different from this transaction, and is not provided in this model.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("source_balance_after")]
        public string? SourceBalanceAfter { get { return this.SourceBalanceAfterOption; } set { this.SourceBalanceAfterOption = new(value); } }

        /// <summary>
        /// Used to track the state of PcSourceBalanceAfter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcSourceBalanceAfterOption { get; private set; }

        /// <summary>
        /// The balance of the source account in the primary currency of this administration. The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.
        /// </summary>
        /// <value>The balance of the source account in the primary currency of this administration. The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("pc_source_balance_after")]
        public string? PcSourceBalanceAfter { get { return this.PcSourceBalanceAfterOption; } set { this.PcSourceBalanceAfterOption = new(value); } }

        /// <summary>
        /// Used to track the state of DestinationBalanceAfter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DestinationBalanceAfterOption { get; private set; }

        /// <summary>
        /// The balance of the destination account. This is the balance in the account&#39;s currency which may be different from this transaction, and is not provided in this model.
        /// </summary>
        /// <value>The balance of the destination account. This is the balance in the account&#39;s currency which may be different from this transaction, and is not provided in this model.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("destination_balance_after")]
        public string? DestinationBalanceAfter { get { return this.DestinationBalanceAfterOption; } set { this.DestinationBalanceAfterOption = new(value); } }

        /// <summary>
        /// Used to track the state of PcDestinationBalanceAfter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcDestinationBalanceAfterOption { get; private set; }

        /// <summary>
        /// The balance of the destination account in the primary currency of this administration. The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.
        /// </summary>
        /// <value>The balance of the destination account in the primary currency of this administration. The &#x60;primary_currency_*&#x60; fields reflect the currency used. This field is NULL if the user does have &#39;convert to primary&#39; set to true in their settings.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("pc_destination_balance_after")]
        public string? PcDestinationBalanceAfter { get { return this.PcDestinationBalanceAfterOption; } set { this.PcDestinationBalanceAfterOption = new(value); } }

        /// <summary>
        /// ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.
        /// </summary>
        /// <value>ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.</value>
        /* <example>2</example> */
        [JsonPropertyName("source_id")]
        public string? SourceId { get; set; }

        /// <summary>
        /// Used to track the state of SourceName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceNameOption { get; private set; }

        /// <summary>
        /// Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.
        /// </summary>
        /// <value>Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.</value>
        /* <example>Checking account</example> */
        [JsonPropertyName("source_name")]
        public string? SourceName { get { return this.SourceNameOption; } set { this.SourceNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceIban
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceIbanOption { get; }

        /// <summary>
        /// Gets or Sets SourceIban
        /// </summary>
        /* <example>NL02ABNA0123456789</example> */
        [JsonPropertyName("source_iban")]
        public string? SourceIban { get { return this.SourceIbanOption; } }

        /// <summary>
        /// ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.
        /// </summary>
        /// <value>ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.</value>
        /* <example>2</example> */
        [JsonPropertyName("destination_id")]
        public string? DestinationId { get; set; }

        /// <summary>
        /// Used to track the state of DestinationName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DestinationNameOption { get; private set; }

        /// <summary>
        /// Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.
        /// </summary>
        /// <value>Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.</value>
        /* <example>Buy and Large</example> */
        [JsonPropertyName("destination_name")]
        public string? DestinationName { get { return this.DestinationNameOption; } set { this.DestinationNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of DestinationIban
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DestinationIbanOption { get; }

        /// <summary>
        /// Gets or Sets DestinationIban
        /// </summary>
        /* <example>NL02ABNA0123456789</example> */
        [JsonPropertyName("destination_iban")]
        public string? DestinationIban { get { return this.DestinationIbanOption; } }

        /// <summary>
        /// Used to track the state of BudgetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BudgetIdOption { get; private set; }

        /// <summary>
        /// The budget ID for this transaction.
        /// </summary>
        /// <value>The budget ID for this transaction.</value>
        /* <example>4</example> */
        [JsonPropertyName("budget_id")]
        public string? BudgetId { get { return this.BudgetIdOption; } set { this.BudgetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BudgetName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BudgetNameOption { get; }

        /// <summary>
        /// The name of the budget used.
        /// </summary>
        /// <value>The name of the budget used.</value>
        /* <example>Groceries</example> */
        [JsonPropertyName("budget_name")]
        public string? BudgetName { get { return this.BudgetNameOption; } }

        /// <summary>
        /// Used to track the state of CategoryId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CategoryIdOption { get; private set; }

        /// <summary>
        /// The category ID for this transaction.
        /// </summary>
        /// <value>The category ID for this transaction.</value>
        /* <example>43</example> */
        [JsonPropertyName("category_id")]
        public string? CategoryId { get { return this.CategoryIdOption; } set { this.CategoryIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CategoryName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CategoryNameOption { get; private set; }

        /// <summary>
        /// The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.
        /// </summary>
        /// <value>The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.</value>
        /* <example>Groceries</example> */
        [JsonPropertyName("category_name")]
        public string? CategoryName { get { return this.CategoryNameOption; } set { this.CategoryNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of BillId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BillIdOption { get; private set; }

        /// <summary>
        /// The associated subscription ID for this transaction. &#x60;bill&#x60; refers to the OLD name for subscriptions and this field will be removed.
        /// </summary>
        /// <value>The associated subscription ID for this transaction. &#x60;bill&#x60; refers to the OLD name for subscriptions and this field will be removed.</value>
        /* <example>111</example> */
        [JsonPropertyName("bill_id")]
        public string? BillId { get { return this.BillIdOption; } set { this.BillIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BillName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BillNameOption { get; private set; }

        /// <summary>
        /// The associated subscription name for this transaction. &#x60;bill&#x60; refers to the OLD name for subscriptions and this field will be removed.
        /// </summary>
        /// <value>The associated subscription name for this transaction. &#x60;bill&#x60; refers to the OLD name for subscriptions and this field will be removed.</value>
        /* <example>Monthly rent</example> */
        [JsonPropertyName("bill_name")]
        public string? BillName { get { return this.BillNameOption; } set { this.BillNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubscriptionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubscriptionIdOption { get; private set; }

        /// <summary>
        /// The associated subscription ID for this transaction.
        /// </summary>
        /// <value>The associated subscription ID for this transaction.</value>
        /* <example>111</example> */
        [JsonPropertyName("subscription_id")]
        public string? SubscriptionId { get { return this.SubscriptionIdOption; } set { this.SubscriptionIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubscriptionName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubscriptionNameOption { get; private set; }

        /// <summary>
        /// The associated subscription name for this transaction.
        /// </summary>
        /// <value>The associated subscription name for this transaction.</value>
        /* <example>Monthly rent</example> */
        [JsonPropertyName("subscription_name")]
        public string? SubscriptionName { get { return this.SubscriptionNameOption; } set { this.SubscriptionNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reconciled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ReconciledOption { get; private set; }

        /// <summary>
        /// If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.
        /// </summary>
        /// <value>If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.</value>
        /* <example>false</example> */
        [JsonPropertyName("reconciled")]
        public bool? Reconciled { get { return this.ReconciledOption; } set { this.ReconciledOption = new(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        /* <example>Some example notes</example> */
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TagsOption { get; private set; }

        /// <summary>
        /// Array of tags.
        /// </summary>
        /// <value>Array of tags.</value>
        [JsonPropertyName("tags")]
        public List<string>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of InternalReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InternalReferenceOption { get; private set; }

        /// <summary>
        /// Reference to internal reference of other systems.
        /// </summary>
        /// <value>Reference to internal reference of other systems.</value>
        [JsonPropertyName("internal_reference")]
        public string? InternalReference { get { return this.InternalReferenceOption; } set { this.InternalReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalIdOption { get; private set; }

        /// <summary>
        /// Reference to external ID in other systems.
        /// </summary>
        /// <value>Reference to external ID in other systems.</value>
        [JsonPropertyName("external_id")]
        public string? ExternalId { get { return this.ExternalIdOption; } set { this.ExternalIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalUrlOption { get; private set; }

        /// <summary>
        /// External, custom URL for this transaction.
        /// </summary>
        /// <value>External, custom URL for this transaction.</value>
        [JsonPropertyName("external_url")]
        public string? ExternalUrl { get { return this.ExternalUrlOption; } set { this.ExternalUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of OriginalSource
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OriginalSourceOption { get; }

        /// <summary>
        /// System generated identifier for original creator of transaction.
        /// </summary>
        /// <value>System generated identifier for original creator of transaction.</value>
        [JsonPropertyName("original_source")]
        public string? OriginalSource { get { return this.OriginalSourceOption; } }

        /// <summary>
        /// Used to track the state of RecurrenceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RecurrenceIdOption { get; }

        /// <summary>
        /// Reference to recurrence that made the transaction.
        /// </summary>
        /// <value>Reference to recurrence that made the transaction.</value>
        [JsonPropertyName("recurrence_id")]
        public string? RecurrenceId { get { return this.RecurrenceIdOption; } }

        /// <summary>
        /// Used to track the state of RecurrenceTotal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RecurrenceTotalOption { get; }

        /// <summary>
        /// Total number of transactions expected to be created by this recurrence repetition. Will be 0 if infinite.
        /// </summary>
        /// <value>Total number of transactions expected to be created by this recurrence repetition. Will be 0 if infinite.</value>
        /* <example>0</example> */
        [JsonPropertyName("recurrence_total")]
        public int? RecurrenceTotal { get { return this.RecurrenceTotalOption; } }

        /// <summary>
        /// Used to track the state of RecurrenceCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RecurrenceCountOption { get; }

        /// <summary>
        /// The # of the current transaction created under this recurrence.
        /// </summary>
        /// <value>The # of the current transaction created under this recurrence.</value>
        /* <example>12</example> */
        [JsonPropertyName("recurrence_count")]
        public int? RecurrenceCount { get { return this.RecurrenceCountOption; } }

        /// <summary>
        /// Used to track the state of ImportHashV2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ImportHashV2Option { get; }

        /// <summary>
        /// Hash value of original import transaction (for duplicate detection).
        /// </summary>
        /// <value>Hash value of original import transaction (for duplicate detection).</value>
        [JsonPropertyName("import_hash_v2")]
        public string? ImportHashV2 { get { return this.ImportHashV2Option; } }

        /// <summary>
        /// Used to track the state of SepaCc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SepaCcOption { get; private set; }

        /// <summary>
        /// SEPA Clearing Code
        /// </summary>
        /// <value>SEPA Clearing Code</value>
        [JsonPropertyName("sepa_cc")]
        public string? SepaCc { get { return this.SepaCcOption; } set { this.SepaCcOption = new(value); } }

        /// <summary>
        /// Used to track the state of SepaCtOp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SepaCtOpOption { get; private set; }

        /// <summary>
        /// SEPA Opposing Account Identifier
        /// </summary>
        /// <value>SEPA Opposing Account Identifier</value>
        [JsonPropertyName("sepa_ct_op")]
        public string? SepaCtOp { get { return this.SepaCtOpOption; } set { this.SepaCtOpOption = new(value); } }

        /// <summary>
        /// Used to track the state of SepaCtId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SepaCtIdOption { get; private set; }

        /// <summary>
        /// SEPA end-to-end Identifier
        /// </summary>
        /// <value>SEPA end-to-end Identifier</value>
        [JsonPropertyName("sepa_ct_id")]
        public string? SepaCtId { get { return this.SepaCtIdOption; } set { this.SepaCtIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SepaDb
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SepaDbOption { get; private set; }

        /// <summary>
        /// SEPA mandate identifier
        /// </summary>
        /// <value>SEPA mandate identifier</value>
        [JsonPropertyName("sepa_db")]
        public string? SepaDb { get { return this.SepaDbOption; } set { this.SepaDbOption = new(value); } }

        /// <summary>
        /// Used to track the state of SepaCountry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SepaCountryOption { get; private set; }

        /// <summary>
        /// SEPA Country
        /// </summary>
        /// <value>SEPA Country</value>
        [JsonPropertyName("sepa_country")]
        public string? SepaCountry { get { return this.SepaCountryOption; } set { this.SepaCountryOption = new(value); } }

        /// <summary>
        /// Used to track the state of SepaEp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SepaEpOption { get; private set; }

        /// <summary>
        /// SEPA External Purpose indicator
        /// </summary>
        /// <value>SEPA External Purpose indicator</value>
        [JsonPropertyName("sepa_ep")]
        public string? SepaEp { get { return this.SepaEpOption; } set { this.SepaEpOption = new(value); } }

        /// <summary>
        /// Used to track the state of SepaCi
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SepaCiOption { get; private set; }

        /// <summary>
        /// SEPA Creditor Identifier
        /// </summary>
        /// <value>SEPA Creditor Identifier</value>
        [JsonPropertyName("sepa_ci")]
        public string? SepaCi { get { return this.SepaCiOption; } set { this.SepaCiOption = new(value); } }

        /// <summary>
        /// Used to track the state of SepaBatchId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SepaBatchIdOption { get; private set; }

        /// <summary>
        /// SEPA Batch ID
        /// </summary>
        /// <value>SEPA Batch ID</value>
        [JsonPropertyName("sepa_batch_id")]
        public string? SepaBatchId { get { return this.SepaBatchIdOption; } set { this.SepaBatchIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of InterestDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> InterestDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets InterestDate
        /// </summary>
        [JsonPropertyName("interest_date")]
        public DateTime? InterestDate { get { return this.InterestDateOption; } set { this.InterestDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of BookDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> BookDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets BookDate
        /// </summary>
        [JsonPropertyName("book_date")]
        public DateTime? BookDate { get { return this.BookDateOption; } set { this.BookDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProcessDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ProcessDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProcessDate
        /// </summary>
        [JsonPropertyName("process_date")]
        public DateTime? ProcessDate { get { return this.ProcessDateOption; } set { this.ProcessDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of DueDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DueDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [JsonPropertyName("due_date")]
        public DateTime? DueDate { get { return this.DueDateOption; } set { this.DueDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of PaymentDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> PaymentDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentDate
        /// </summary>
        [JsonPropertyName("payment_date")]
        public DateTime? PaymentDate { get { return this.PaymentDateOption; } set { this.PaymentDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of InvoiceDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> InvoiceDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets InvoiceDate
        /// </summary>
        [JsonPropertyName("invoice_date")]
        public DateTime? InvoiceDate { get { return this.InvoiceDateOption; } set { this.InvoiceDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Latitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> LatitudeOption { get; private set; }

        /// <summary>
        /// Latitude of the transaction&#39;s location, if applicable. Can be used to draw a map.
        /// </summary>
        /// <value>Latitude of the transaction&#39;s location, if applicable. Can be used to draw a map.</value>
        /* <example>51.983333</example> */
        [JsonPropertyName("latitude")]
        public double? Latitude { get { return this.LatitudeOption; } set { this.LatitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Longitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> LongitudeOption { get; private set; }

        /// <summary>
        /// Latitude of the transaction&#39;s location, if applicable. Can be used to draw a map.
        /// </summary>
        /// <value>Latitude of the transaction&#39;s location, if applicable. Can be used to draw a map.</value>
        /* <example>5.916667</example> */
        [JsonPropertyName("longitude")]
        public double? Longitude { get { return this.LongitudeOption; } set { this.LongitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ZoomLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ZoomLevelOption { get; private set; }

        /// <summary>
        /// Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.
        /// </summary>
        /// <value>Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.</value>
        /* <example>6</example> */
        [JsonPropertyName("zoom_level")]
        public int? ZoomLevel { get { return this.ZoomLevelOption; } set { this.ZoomLevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of HasAttachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasAttachmentsOption { get; private set; }

        /// <summary>
        /// If the transaction has attachments.
        /// </summary>
        /// <value>If the transaction has attachments.</value>
        /* <example>false</example> */
        [JsonPropertyName("has_attachments")]
        public bool? HasAttachments { get { return this.HasAttachmentsOption; } set { this.HasAttachmentsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionSplit {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  TransactionJournalId: ").Append(TransactionJournalId).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  ObjectHasCurrencySetting: ").Append(ObjectHasCurrencySetting).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  CurrencyDecimalPlaces: ").Append(CurrencyDecimalPlaces).Append("\n");
            sb.Append("  ForeignCurrencyId: ").Append(ForeignCurrencyId).Append("\n");
            sb.Append("  ForeignCurrencyCode: ").Append(ForeignCurrencyCode).Append("\n");
            sb.Append("  ForeignCurrencySymbol: ").Append(ForeignCurrencySymbol).Append("\n");
            sb.Append("  ForeignCurrencyDecimalPlaces: ").Append(ForeignCurrencyDecimalPlaces).Append("\n");
            sb.Append("  PrimaryCurrencyId: ").Append(PrimaryCurrencyId).Append("\n");
            sb.Append("  PrimaryCurrencyCode: ").Append(PrimaryCurrencyCode).Append("\n");
            sb.Append("  PrimaryCurrencySymbol: ").Append(PrimaryCurrencySymbol).Append("\n");
            sb.Append("  PrimaryCurrencyDecimalPlaces: ").Append(PrimaryCurrencyDecimalPlaces).Append("\n");
            sb.Append("  PcAmount: ").Append(PcAmount).Append("\n");
            sb.Append("  ForeignAmount: ").Append(ForeignAmount).Append("\n");
            sb.Append("  PcForeignAmount: ").Append(PcForeignAmount).Append("\n");
            sb.Append("  SourceBalanceAfter: ").Append(SourceBalanceAfter).Append("\n");
            sb.Append("  PcSourceBalanceAfter: ").Append(PcSourceBalanceAfter).Append("\n");
            sb.Append("  DestinationBalanceAfter: ").Append(DestinationBalanceAfter).Append("\n");
            sb.Append("  PcDestinationBalanceAfter: ").Append(PcDestinationBalanceAfter).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  SourceName: ").Append(SourceName).Append("\n");
            sb.Append("  SourceIban: ").Append(SourceIban).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  DestinationId: ").Append(DestinationId).Append("\n");
            sb.Append("  DestinationName: ").Append(DestinationName).Append("\n");
            sb.Append("  DestinationIban: ").Append(DestinationIban).Append("\n");
            sb.Append("  DestinationType: ").Append(DestinationType).Append("\n");
            sb.Append("  BudgetId: ").Append(BudgetId).Append("\n");
            sb.Append("  BudgetName: ").Append(BudgetName).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  BillId: ").Append(BillId).Append("\n");
            sb.Append("  BillName: ").Append(BillName).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  SubscriptionName: ").Append(SubscriptionName).Append("\n");
            sb.Append("  Reconciled: ").Append(Reconciled).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  InternalReference: ").Append(InternalReference).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  ExternalUrl: ").Append(ExternalUrl).Append("\n");
            sb.Append("  OriginalSource: ").Append(OriginalSource).Append("\n");
            sb.Append("  RecurrenceId: ").Append(RecurrenceId).Append("\n");
            sb.Append("  RecurrenceTotal: ").Append(RecurrenceTotal).Append("\n");
            sb.Append("  RecurrenceCount: ").Append(RecurrenceCount).Append("\n");
            sb.Append("  ImportHashV2: ").Append(ImportHashV2).Append("\n");
            sb.Append("  SepaCc: ").Append(SepaCc).Append("\n");
            sb.Append("  SepaCtOp: ").Append(SepaCtOp).Append("\n");
            sb.Append("  SepaCtId: ").Append(SepaCtId).Append("\n");
            sb.Append("  SepaDb: ").Append(SepaDb).Append("\n");
            sb.Append("  SepaCountry: ").Append(SepaCountry).Append("\n");
            sb.Append("  SepaEp: ").Append(SepaEp).Append("\n");
            sb.Append("  SepaCi: ").Append(SepaCi).Append("\n");
            sb.Append("  SepaBatchId: ").Append(SepaBatchId).Append("\n");
            sb.Append("  InterestDate: ").Append(InterestDate).Append("\n");
            sb.Append("  BookDate: ").Append(BookDate).Append("\n");
            sb.Append("  ProcessDate: ").Append(ProcessDate).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  ZoomLevel: ").Append(ZoomLevel).Append("\n");
            sb.Append("  HasAttachments: ").Append(HasAttachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransactionSplit" />
    /// </summary>
    public class TransactionSplitJsonConverter : JsonConverter<TransactionSplit>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize InterestDate
        /// </summary>
        public static string InterestDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize BookDate
        /// </summary>
        public static string BookDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ProcessDate
        /// </summary>
        public static string ProcessDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DueDate
        /// </summary>
        public static string DueDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize PaymentDate
        /// </summary>
        public static string PaymentDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize InvoiceDate
        /// </summary>
        public static string InvoiceDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="TransactionSplit" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransactionSplit Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<TransactionTypeProperty?> type = default;
            Option<DateTime?> date = default;
            Option<string?> amount = default;
            Option<string?> description = default;
            Option<string?> user = default;
            Option<string?> transactionJournalId = default;
            Option<int?> order = default;
            Option<bool?> objectHasCurrencySetting = default;
            Option<string?> currencyId = default;
            Option<string?> currencyCode = default;
            Option<string?> currencySymbol = default;
            Option<string?> currencyName = default;
            Option<int?> currencyDecimalPlaces = default;
            Option<string?> foreignCurrencyId = default;
            Option<string?> foreignCurrencyCode = default;
            Option<string?> foreignCurrencySymbol = default;
            Option<int?> foreignCurrencyDecimalPlaces = default;
            Option<string?> primaryCurrencyId = default;
            Option<string?> primaryCurrencyCode = default;
            Option<string?> primaryCurrencySymbol = default;
            Option<int?> primaryCurrencyDecimalPlaces = default;
            Option<string?> pcAmount = default;
            Option<string?> foreignAmount = default;
            Option<string?> pcForeignAmount = default;
            Option<string?> sourceBalanceAfter = default;
            Option<string?> pcSourceBalanceAfter = default;
            Option<string?> destinationBalanceAfter = default;
            Option<string?> pcDestinationBalanceAfter = default;
            Option<string?> sourceId = default;
            Option<string?> sourceName = default;
            Option<string?> sourceIban = default;
            Option<AccountTypeProperty?> sourceType = default;
            Option<string?> destinationId = default;
            Option<string?> destinationName = default;
            Option<string?> destinationIban = default;
            Option<AccountTypeProperty?> destinationType = default;
            Option<string?> budgetId = default;
            Option<string?> budgetName = default;
            Option<string?> categoryId = default;
            Option<string?> categoryName = default;
            Option<string?> billId = default;
            Option<string?> billName = default;
            Option<string?> subscriptionId = default;
            Option<string?> subscriptionName = default;
            Option<bool?> reconciled = default;
            Option<string?> notes = default;
            Option<List<string>?> tags = default;
            Option<string?> internalReference = default;
            Option<string?> externalId = default;
            Option<string?> externalUrl = default;
            Option<string?> originalSource = default;
            Option<string?> recurrenceId = default;
            Option<int?> recurrenceTotal = default;
            Option<int?> recurrenceCount = default;
            Option<string?> importHashV2 = default;
            Option<string?> sepaCc = default;
            Option<string?> sepaCtOp = default;
            Option<string?> sepaCtId = default;
            Option<string?> sepaDb = default;
            Option<string?> sepaCountry = default;
            Option<string?> sepaEp = default;
            Option<string?> sepaCi = default;
            Option<string?> sepaBatchId = default;
            Option<DateTime?> interestDate = default;
            Option<DateTime?> bookDate = default;
            Option<DateTime?> processDate = default;
            Option<DateTime?> dueDate = default;
            Option<DateTime?> paymentDate = default;
            Option<DateTime?> invoiceDate = default;
            Option<double?> latitude = default;
            Option<double?> longitude = default;
            Option<int?> zoomLevel = default;
            Option<bool?> hasAttachments = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<TransactionTypeProperty?>(TransactionTypePropertyValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "date":
                            date = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "amount":
                            amount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user":
                            user = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "transaction_journal_id":
                            transactionJournalId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "order":
                            order = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "object_has_currency_setting":
                            objectHasCurrencySetting = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_symbol":
                            currencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_name":
                            currencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_decimal_places":
                            currencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "foreign_currency_id":
                            foreignCurrencyId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "foreign_currency_code":
                            foreignCurrencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "foreign_currency_symbol":
                            foreignCurrencySymbol = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "foreign_currency_decimal_places":
                            foreignCurrencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "primary_currency_id":
                            primaryCurrencyId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "primary_currency_code":
                            primaryCurrencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "primary_currency_symbol":
                            primaryCurrencySymbol = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "primary_currency_decimal_places":
                            primaryCurrencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pc_amount":
                            pcAmount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "foreign_amount":
                            foreignAmount = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "pc_foreign_amount":
                            pcForeignAmount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "source_balance_after":
                            sourceBalanceAfter = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "pc_source_balance_after":
                            pcSourceBalanceAfter = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "destination_balance_after":
                            destinationBalanceAfter = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "pc_destination_balance_after":
                            pcDestinationBalanceAfter = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "source_id":
                            sourceId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "source_name":
                            sourceName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "source_iban":
                            sourceIban = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "source_type":
                            string? sourceTypeRawValue = utf8JsonReader.GetString();
                            if (sourceTypeRawValue != null)
                                sourceType = new Option<AccountTypeProperty?>(AccountTypePropertyValueConverter.FromStringOrDefault(sourceTypeRawValue));
                            break;
                        case "destination_id":
                            destinationId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "destination_name":
                            destinationName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "destination_iban":
                            destinationIban = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "destination_type":
                            string? destinationTypeRawValue = utf8JsonReader.GetString();
                            if (destinationTypeRawValue != null)
                                destinationType = new Option<AccountTypeProperty?>(AccountTypePropertyValueConverter.FromStringOrDefault(destinationTypeRawValue));
                            break;
                        case "budget_id":
                            budgetId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "budget_name":
                            budgetName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "category_id":
                            categoryId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "category_name":
                            categoryName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "bill_id":
                            billId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "bill_name":
                            billName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "subscription_id":
                            subscriptionId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "subscription_name":
                            subscriptionName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "reconciled":
                            reconciled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "tags":
                            tags = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "internal_reference":
                            internalReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "external_id":
                            externalId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "external_url":
                            externalUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "original_source":
                            originalSource = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "recurrence_id":
                            recurrenceId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "recurrence_total":
                            recurrenceTotal = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "recurrence_count":
                            recurrenceCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "import_hash_v2":
                            importHashV2 = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sepa_cc":
                            sepaCc = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sepa_ct_op":
                            sepaCtOp = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sepa_ct_id":
                            sepaCtId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sepa_db":
                            sepaDb = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sepa_country":
                            sepaCountry = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sepa_ep":
                            sepaEp = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sepa_ci":
                            sepaCi = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sepa_batch_id":
                            sepaBatchId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "interest_date":
                            interestDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "book_date":
                            bookDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "process_date":
                            processDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "due_date":
                            dueDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payment_date":
                            paymentDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "invoice_date":
                            invoiceDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "latitude":
                            latitude = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "longitude":
                            longitude = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "zoom_level":
                            zoomLevel = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "has_attachments":
                            hasAttachments = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class TransactionSplit.", nameof(type));

            if (!date.IsSet)
                throw new ArgumentException("Property is required for class TransactionSplit.", nameof(date));

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class TransactionSplit.", nameof(amount));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class TransactionSplit.", nameof(description));

            if (!sourceId.IsSet)
                throw new ArgumentException("Property is required for class TransactionSplit.", nameof(sourceId));

            if (!destinationId.IsSet)
                throw new ArgumentException("Property is required for class TransactionSplit.", nameof(destinationId));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class TransactionSplit.");

            if (date.IsSet && date.Value == null)
                throw new ArgumentNullException(nameof(date), "Property is not nullable for class TransactionSplit.");

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class TransactionSplit.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class TransactionSplit.");

            if (user.IsSet && user.Value == null)
                throw new ArgumentNullException(nameof(user), "Property is not nullable for class TransactionSplit.");

            if (transactionJournalId.IsSet && transactionJournalId.Value == null)
                throw new ArgumentNullException(nameof(transactionJournalId), "Property is not nullable for class TransactionSplit.");

            if (objectHasCurrencySetting.IsSet && objectHasCurrencySetting.Value == null)
                throw new ArgumentNullException(nameof(objectHasCurrencySetting), "Property is not nullable for class TransactionSplit.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class TransactionSplit.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class TransactionSplit.");

            if (currencySymbol.IsSet && currencySymbol.Value == null)
                throw new ArgumentNullException(nameof(currencySymbol), "Property is not nullable for class TransactionSplit.");

            if (currencyName.IsSet && currencyName.Value == null)
                throw new ArgumentNullException(nameof(currencyName), "Property is not nullable for class TransactionSplit.");

            if (currencyDecimalPlaces.IsSet && currencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(currencyDecimalPlaces), "Property is not nullable for class TransactionSplit.");

            if (pcAmount.IsSet && pcAmount.Value == null)
                throw new ArgumentNullException(nameof(pcAmount), "Property is not nullable for class TransactionSplit.");

            if (pcForeignAmount.IsSet && pcForeignAmount.Value == null)
                throw new ArgumentNullException(nameof(pcForeignAmount), "Property is not nullable for class TransactionSplit.");

            if (sourceType.IsSet && sourceType.Value == null)
                throw new ArgumentNullException(nameof(sourceType), "Property is not nullable for class TransactionSplit.");

            if (destinationType.IsSet && destinationType.Value == null)
                throw new ArgumentNullException(nameof(destinationType), "Property is not nullable for class TransactionSplit.");

            if (reconciled.IsSet && reconciled.Value == null)
                throw new ArgumentNullException(nameof(reconciled), "Property is not nullable for class TransactionSplit.");

            if (hasAttachments.IsSet && hasAttachments.Value == null)
                throw new ArgumentNullException(nameof(hasAttachments), "Property is not nullable for class TransactionSplit.");

            return new TransactionSplit(type.Value!.Value!, date.Value!.Value!, amount.Value!, description.Value!, user, transactionJournalId, order, objectHasCurrencySetting, currencyId, currencyCode, currencySymbol, currencyName, currencyDecimalPlaces, foreignCurrencyId, foreignCurrencyCode, foreignCurrencySymbol, foreignCurrencyDecimalPlaces, primaryCurrencyId, primaryCurrencyCode, primaryCurrencySymbol, primaryCurrencyDecimalPlaces, pcAmount, foreignAmount, pcForeignAmount, sourceBalanceAfter, pcSourceBalanceAfter, destinationBalanceAfter, pcDestinationBalanceAfter, sourceId.Value!, sourceName, sourceIban, sourceType, destinationId.Value!, destinationName, destinationIban, destinationType, budgetId, budgetName, categoryId, categoryName, billId, billName, subscriptionId, subscriptionName, reconciled, notes, tags, internalReference, externalId, externalUrl, originalSource, recurrenceId, recurrenceTotal, recurrenceCount, importHashV2, sepaCc, sepaCtOp, sepaCtId, sepaDb, sepaCountry, sepaEp, sepaCi, sepaBatchId, interestDate, bookDate, processDate, dueDate, paymentDate, invoiceDate, latitude, longitude, zoomLevel, hasAttachments);
        }

        /// <summary>
        /// Serializes a <see cref="TransactionSplit" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionSplit"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransactionSplit transactionSplit, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, transactionSplit, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransactionSplit" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionSplit"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TransactionSplit transactionSplit, JsonSerializerOptions jsonSerializerOptions)
        {
            if (transactionSplit.Amount == null)
                throw new ArgumentNullException(nameof(transactionSplit.Amount), "Property is required for class TransactionSplit.");

            if (transactionSplit.Description == null)
                throw new ArgumentNullException(nameof(transactionSplit.Description), "Property is required for class TransactionSplit.");

            if (transactionSplit.UserOption.IsSet && transactionSplit.User == null)
                throw new ArgumentNullException(nameof(transactionSplit.User), "Property is required for class TransactionSplit.");

            if (transactionSplit.TransactionJournalIdOption.IsSet && transactionSplit.TransactionJournalId == null)
                throw new ArgumentNullException(nameof(transactionSplit.TransactionJournalId), "Property is required for class TransactionSplit.");

            if (transactionSplit.CurrencyIdOption.IsSet && transactionSplit.CurrencyId == null)
                throw new ArgumentNullException(nameof(transactionSplit.CurrencyId), "Property is required for class TransactionSplit.");

            if (transactionSplit.CurrencyCodeOption.IsSet && transactionSplit.CurrencyCode == null)
                throw new ArgumentNullException(nameof(transactionSplit.CurrencyCode), "Property is required for class TransactionSplit.");

            if (transactionSplit.CurrencySymbolOption.IsSet && transactionSplit.CurrencySymbol == null)
                throw new ArgumentNullException(nameof(transactionSplit.CurrencySymbol), "Property is required for class TransactionSplit.");

            if (transactionSplit.CurrencyNameOption.IsSet && transactionSplit.CurrencyName == null)
                throw new ArgumentNullException(nameof(transactionSplit.CurrencyName), "Property is required for class TransactionSplit.");

            if (transactionSplit.PcAmountOption.IsSet && transactionSplit.PcAmount == null)
                throw new ArgumentNullException(nameof(transactionSplit.PcAmount), "Property is required for class TransactionSplit.");

            if (transactionSplit.PcForeignAmountOption.IsSet && transactionSplit.PcForeignAmount == null)
                throw new ArgumentNullException(nameof(transactionSplit.PcForeignAmount), "Property is required for class TransactionSplit.");

            var typeRawValue = TransactionTypePropertyValueConverter.ToJsonValue(transactionSplit.Type);
            writer.WriteString("type", typeRawValue);

            writer.WriteString("date", transactionSplit.Date.ToString(DateFormat));

            writer.WriteString("amount", transactionSplit.Amount);

            writer.WriteString("description", transactionSplit.Description);

            if (transactionSplit.UserOption.IsSet)
                writer.WriteString("user", transactionSplit.User);

            if (transactionSplit.TransactionJournalIdOption.IsSet)
                writer.WriteString("transaction_journal_id", transactionSplit.TransactionJournalId);

            if (transactionSplit.OrderOption.IsSet)
                if (transactionSplit.OrderOption.Value != null)
                    writer.WriteNumber("order", transactionSplit.OrderOption.Value!.Value);
                else
                    writer.WriteNull("order");

            if (transactionSplit.ObjectHasCurrencySettingOption.IsSet)
                writer.WriteBoolean("object_has_currency_setting", transactionSplit.ObjectHasCurrencySettingOption.Value!.Value);

            if (transactionSplit.CurrencyIdOption.IsSet)
                writer.WriteString("currency_id", transactionSplit.CurrencyId);

            if (transactionSplit.CurrencyCodeOption.IsSet)
                writer.WriteString("currency_code", transactionSplit.CurrencyCode);

            if (transactionSplit.CurrencySymbolOption.IsSet)
                writer.WriteString("currency_symbol", transactionSplit.CurrencySymbol);

            if (transactionSplit.CurrencyNameOption.IsSet)
                writer.WriteString("currency_name", transactionSplit.CurrencyName);

            if (transactionSplit.CurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("currency_decimal_places", transactionSplit.CurrencyDecimalPlacesOption.Value!.Value);

            if (transactionSplit.ForeignCurrencyIdOption.IsSet)
                if (transactionSplit.ForeignCurrencyIdOption.Value != null)
                    writer.WriteString("foreign_currency_id", transactionSplit.ForeignCurrencyId);
                else
                    writer.WriteNull("foreign_currency_id");

            if (transactionSplit.ForeignCurrencyCodeOption.IsSet)
                if (transactionSplit.ForeignCurrencyCodeOption.Value != null)
                    writer.WriteString("foreign_currency_code", transactionSplit.ForeignCurrencyCode);
                else
                    writer.WriteNull("foreign_currency_code");

            if (transactionSplit.ForeignCurrencySymbolOption.IsSet)
                if (transactionSplit.ForeignCurrencySymbolOption.Value != null)
                    writer.WriteString("foreign_currency_symbol", transactionSplit.ForeignCurrencySymbol);
                else
                    writer.WriteNull("foreign_currency_symbol");

            if (transactionSplit.ForeignCurrencyDecimalPlacesOption.IsSet)
                if (transactionSplit.ForeignCurrencyDecimalPlacesOption.Value != null)
                    writer.WriteNumber("foreign_currency_decimal_places", transactionSplit.ForeignCurrencyDecimalPlacesOption.Value!.Value);
                else
                    writer.WriteNull("foreign_currency_decimal_places");

            if (transactionSplit.PrimaryCurrencyIdOption.IsSet)
                if (transactionSplit.PrimaryCurrencyIdOption.Value != null)
                    writer.WriteString("primary_currency_id", transactionSplit.PrimaryCurrencyId);
                else
                    writer.WriteNull("primary_currency_id");

            if (transactionSplit.PrimaryCurrencyCodeOption.IsSet)
                if (transactionSplit.PrimaryCurrencyCodeOption.Value != null)
                    writer.WriteString("primary_currency_code", transactionSplit.PrimaryCurrencyCode);
                else
                    writer.WriteNull("primary_currency_code");

            if (transactionSplit.PrimaryCurrencySymbolOption.IsSet)
                if (transactionSplit.PrimaryCurrencySymbolOption.Value != null)
                    writer.WriteString("primary_currency_symbol", transactionSplit.PrimaryCurrencySymbol);
                else
                    writer.WriteNull("primary_currency_symbol");

            if (transactionSplit.PrimaryCurrencyDecimalPlacesOption.IsSet)
                if (transactionSplit.PrimaryCurrencyDecimalPlacesOption.Value != null)
                    writer.WriteNumber("primary_currency_decimal_places", transactionSplit.PrimaryCurrencyDecimalPlacesOption.Value!.Value);
                else
                    writer.WriteNull("primary_currency_decimal_places");

            if (transactionSplit.PcAmountOption.IsSet)
                writer.WriteString("pc_amount", transactionSplit.PcAmount);

            if (transactionSplit.ForeignAmountOption.IsSet)
                if (transactionSplit.ForeignAmountOption.Value != null)
                    writer.WriteString("foreign_amount", transactionSplit.ForeignAmount);
                else
                    writer.WriteNull("foreign_amount");

            if (transactionSplit.PcForeignAmountOption.IsSet)
                writer.WriteString("pc_foreign_amount", transactionSplit.PcForeignAmount);

            if (transactionSplit.SourceBalanceAfterOption.IsSet)
                if (transactionSplit.SourceBalanceAfterOption.Value != null)
                    writer.WriteString("source_balance_after", transactionSplit.SourceBalanceAfter);
                else
                    writer.WriteNull("source_balance_after");

            if (transactionSplit.PcSourceBalanceAfterOption.IsSet)
                if (transactionSplit.PcSourceBalanceAfterOption.Value != null)
                    writer.WriteString("pc_source_balance_after", transactionSplit.PcSourceBalanceAfter);
                else
                    writer.WriteNull("pc_source_balance_after");

            if (transactionSplit.DestinationBalanceAfterOption.IsSet)
                if (transactionSplit.DestinationBalanceAfterOption.Value != null)
                    writer.WriteString("destination_balance_after", transactionSplit.DestinationBalanceAfter);
                else
                    writer.WriteNull("destination_balance_after");

            if (transactionSplit.PcDestinationBalanceAfterOption.IsSet)
                if (transactionSplit.PcDestinationBalanceAfterOption.Value != null)
                    writer.WriteString("pc_destination_balance_after", transactionSplit.PcDestinationBalanceAfter);
                else
                    writer.WriteNull("pc_destination_balance_after");

            if (transactionSplit.SourceId != null)
                writer.WriteString("source_id", transactionSplit.SourceId);
            else
                writer.WriteNull("source_id");

            if (transactionSplit.SourceNameOption.IsSet)
                if (transactionSplit.SourceNameOption.Value != null)
                    writer.WriteString("source_name", transactionSplit.SourceName);
                else
                    writer.WriteNull("source_name");

            if (transactionSplit.SourceIbanOption.IsSet)
                if (transactionSplit.SourceIbanOption.Value != null)
                    writer.WriteString("source_iban", transactionSplit.SourceIban);
                else
                    writer.WriteNull("source_iban");

            if (transactionSplit.SourceTypeOption.IsSet)
            {
                var sourceTypeRawValue = AccountTypePropertyValueConverter.ToJsonValue(transactionSplit.SourceType!.Value);
                writer.WriteString("source_type", sourceTypeRawValue);
            }
            if (transactionSplit.DestinationId != null)
                writer.WriteString("destination_id", transactionSplit.DestinationId);
            else
                writer.WriteNull("destination_id");

            if (transactionSplit.DestinationNameOption.IsSet)
                if (transactionSplit.DestinationNameOption.Value != null)
                    writer.WriteString("destination_name", transactionSplit.DestinationName);
                else
                    writer.WriteNull("destination_name");

            if (transactionSplit.DestinationIbanOption.IsSet)
                if (transactionSplit.DestinationIbanOption.Value != null)
                    writer.WriteString("destination_iban", transactionSplit.DestinationIban);
                else
                    writer.WriteNull("destination_iban");

            if (transactionSplit.DestinationTypeOption.IsSet)
            {
                var destinationTypeRawValue = AccountTypePropertyValueConverter.ToJsonValue(transactionSplit.DestinationType!.Value);
                writer.WriteString("destination_type", destinationTypeRawValue);
            }
            if (transactionSplit.BudgetIdOption.IsSet)
                if (transactionSplit.BudgetIdOption.Value != null)
                    writer.WriteString("budget_id", transactionSplit.BudgetId);
                else
                    writer.WriteNull("budget_id");

            if (transactionSplit.BudgetNameOption.IsSet)
                if (transactionSplit.BudgetNameOption.Value != null)
                    writer.WriteString("budget_name", transactionSplit.BudgetName);
                else
                    writer.WriteNull("budget_name");

            if (transactionSplit.CategoryIdOption.IsSet)
                if (transactionSplit.CategoryIdOption.Value != null)
                    writer.WriteString("category_id", transactionSplit.CategoryId);
                else
                    writer.WriteNull("category_id");

            if (transactionSplit.CategoryNameOption.IsSet)
                if (transactionSplit.CategoryNameOption.Value != null)
                    writer.WriteString("category_name", transactionSplit.CategoryName);
                else
                    writer.WriteNull("category_name");

            if (transactionSplit.BillIdOption.IsSet)
                if (transactionSplit.BillIdOption.Value != null)
                    writer.WriteString("bill_id", transactionSplit.BillId);
                else
                    writer.WriteNull("bill_id");

            if (transactionSplit.BillNameOption.IsSet)
                if (transactionSplit.BillNameOption.Value != null)
                    writer.WriteString("bill_name", transactionSplit.BillName);
                else
                    writer.WriteNull("bill_name");

            if (transactionSplit.SubscriptionIdOption.IsSet)
                if (transactionSplit.SubscriptionIdOption.Value != null)
                    writer.WriteString("subscription_id", transactionSplit.SubscriptionId);
                else
                    writer.WriteNull("subscription_id");

            if (transactionSplit.SubscriptionNameOption.IsSet)
                if (transactionSplit.SubscriptionNameOption.Value != null)
                    writer.WriteString("subscription_name", transactionSplit.SubscriptionName);
                else
                    writer.WriteNull("subscription_name");

            if (transactionSplit.ReconciledOption.IsSet)
                writer.WriteBoolean("reconciled", transactionSplit.ReconciledOption.Value!.Value);

            if (transactionSplit.NotesOption.IsSet)
                if (transactionSplit.NotesOption.Value != null)
                    writer.WriteString("notes", transactionSplit.Notes);
                else
                    writer.WriteNull("notes");

            if (transactionSplit.TagsOption.IsSet)
                if (transactionSplit.TagsOption.Value != null)
                {
                    writer.WritePropertyName("tags");
                    JsonSerializer.Serialize(writer, transactionSplit.Tags, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("tags");
            if (transactionSplit.InternalReferenceOption.IsSet)
                if (transactionSplit.InternalReferenceOption.Value != null)
                    writer.WriteString("internal_reference", transactionSplit.InternalReference);
                else
                    writer.WriteNull("internal_reference");

            if (transactionSplit.ExternalIdOption.IsSet)
                if (transactionSplit.ExternalIdOption.Value != null)
                    writer.WriteString("external_id", transactionSplit.ExternalId);
                else
                    writer.WriteNull("external_id");

            if (transactionSplit.ExternalUrlOption.IsSet)
                if (transactionSplit.ExternalUrlOption.Value != null)
                    writer.WriteString("external_url", transactionSplit.ExternalUrl);
                else
                    writer.WriteNull("external_url");

            if (transactionSplit.OriginalSourceOption.IsSet)
                if (transactionSplit.OriginalSourceOption.Value != null)
                    writer.WriteString("original_source", transactionSplit.OriginalSource);
                else
                    writer.WriteNull("original_source");

            if (transactionSplit.RecurrenceIdOption.IsSet)
                if (transactionSplit.RecurrenceIdOption.Value != null)
                    writer.WriteString("recurrence_id", transactionSplit.RecurrenceId);
                else
                    writer.WriteNull("recurrence_id");

            if (transactionSplit.RecurrenceTotalOption.IsSet)
                if (transactionSplit.RecurrenceTotalOption.Value != null)
                    writer.WriteNumber("recurrence_total", transactionSplit.RecurrenceTotalOption.Value!.Value);
                else
                    writer.WriteNull("recurrence_total");

            if (transactionSplit.RecurrenceCountOption.IsSet)
                if (transactionSplit.RecurrenceCountOption.Value != null)
                    writer.WriteNumber("recurrence_count", transactionSplit.RecurrenceCountOption.Value!.Value);
                else
                    writer.WriteNull("recurrence_count");

            if (transactionSplit.ImportHashV2Option.IsSet)
                if (transactionSplit.ImportHashV2Option.Value != null)
                    writer.WriteString("import_hash_v2", transactionSplit.ImportHashV2);
                else
                    writer.WriteNull("import_hash_v2");

            if (transactionSplit.SepaCcOption.IsSet)
                if (transactionSplit.SepaCcOption.Value != null)
                    writer.WriteString("sepa_cc", transactionSplit.SepaCc);
                else
                    writer.WriteNull("sepa_cc");

            if (transactionSplit.SepaCtOpOption.IsSet)
                if (transactionSplit.SepaCtOpOption.Value != null)
                    writer.WriteString("sepa_ct_op", transactionSplit.SepaCtOp);
                else
                    writer.WriteNull("sepa_ct_op");

            if (transactionSplit.SepaCtIdOption.IsSet)
                if (transactionSplit.SepaCtIdOption.Value != null)
                    writer.WriteString("sepa_ct_id", transactionSplit.SepaCtId);
                else
                    writer.WriteNull("sepa_ct_id");

            if (transactionSplit.SepaDbOption.IsSet)
                if (transactionSplit.SepaDbOption.Value != null)
                    writer.WriteString("sepa_db", transactionSplit.SepaDb);
                else
                    writer.WriteNull("sepa_db");

            if (transactionSplit.SepaCountryOption.IsSet)
                if (transactionSplit.SepaCountryOption.Value != null)
                    writer.WriteString("sepa_country", transactionSplit.SepaCountry);
                else
                    writer.WriteNull("sepa_country");

            if (transactionSplit.SepaEpOption.IsSet)
                if (transactionSplit.SepaEpOption.Value != null)
                    writer.WriteString("sepa_ep", transactionSplit.SepaEp);
                else
                    writer.WriteNull("sepa_ep");

            if (transactionSplit.SepaCiOption.IsSet)
                if (transactionSplit.SepaCiOption.Value != null)
                    writer.WriteString("sepa_ci", transactionSplit.SepaCi);
                else
                    writer.WriteNull("sepa_ci");

            if (transactionSplit.SepaBatchIdOption.IsSet)
                if (transactionSplit.SepaBatchIdOption.Value != null)
                    writer.WriteString("sepa_batch_id", transactionSplit.SepaBatchId);
                else
                    writer.WriteNull("sepa_batch_id");

            if (transactionSplit.InterestDateOption.IsSet)
                if (transactionSplit.InterestDateOption.Value != null)
                    writer.WriteString("interest_date", transactionSplit.InterestDateOption.Value!.Value.ToString(InterestDateFormat));
                else
                    writer.WriteNull("interest_date");

            if (transactionSplit.BookDateOption.IsSet)
                if (transactionSplit.BookDateOption.Value != null)
                    writer.WriteString("book_date", transactionSplit.BookDateOption.Value!.Value.ToString(BookDateFormat));
                else
                    writer.WriteNull("book_date");

            if (transactionSplit.ProcessDateOption.IsSet)
                if (transactionSplit.ProcessDateOption.Value != null)
                    writer.WriteString("process_date", transactionSplit.ProcessDateOption.Value!.Value.ToString(ProcessDateFormat));
                else
                    writer.WriteNull("process_date");

            if (transactionSplit.DueDateOption.IsSet)
                if (transactionSplit.DueDateOption.Value != null)
                    writer.WriteString("due_date", transactionSplit.DueDateOption.Value!.Value.ToString(DueDateFormat));
                else
                    writer.WriteNull("due_date");

            if (transactionSplit.PaymentDateOption.IsSet)
                if (transactionSplit.PaymentDateOption.Value != null)
                    writer.WriteString("payment_date", transactionSplit.PaymentDateOption.Value!.Value.ToString(PaymentDateFormat));
                else
                    writer.WriteNull("payment_date");

            if (transactionSplit.InvoiceDateOption.IsSet)
                if (transactionSplit.InvoiceDateOption.Value != null)
                    writer.WriteString("invoice_date", transactionSplit.InvoiceDateOption.Value!.Value.ToString(InvoiceDateFormat));
                else
                    writer.WriteNull("invoice_date");

            if (transactionSplit.LatitudeOption.IsSet)
                if (transactionSplit.LatitudeOption.Value != null)
                    writer.WriteNumber("latitude", transactionSplit.LatitudeOption.Value!.Value);
                else
                    writer.WriteNull("latitude");

            if (transactionSplit.LongitudeOption.IsSet)
                if (transactionSplit.LongitudeOption.Value != null)
                    writer.WriteNumber("longitude", transactionSplit.LongitudeOption.Value!.Value);
                else
                    writer.WriteNull("longitude");

            if (transactionSplit.ZoomLevelOption.IsSet)
                if (transactionSplit.ZoomLevelOption.Value != null)
                    writer.WriteNumber("zoom_level", transactionSplit.ZoomLevelOption.Value!.Value);
                else
                    writer.WriteNull("zoom_level");

            if (transactionSplit.HasAttachmentsOption.IsSet)
                writer.WriteBoolean("has_attachments", transactionSplit.HasAttachmentsOption.Value!.Value);
        }
    }
}
