// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// Can only be one one these account types. import, initial-balance and reconciliation cannot be set manually.
    /// </summary>
    /// <value>Can only be one one these account types. import, initial-balance and reconciliation cannot be set manually.</value>
    public enum ShortAccountTypeProperty
    {
        /// <summary>
        /// Enum Asset for value: asset
        /// </summary>
        Asset = 1,

        /// <summary>
        /// Enum Expense for value: expense
        /// </summary>
        Expense = 2,

        /// <summary>
        /// Enum Import for value: import
        /// </summary>
        Import = 3,

        /// <summary>
        /// Enum Revenue for value: revenue
        /// </summary>
        Revenue = 4,

        /// <summary>
        /// Enum Cash for value: cash
        /// </summary>
        Cash = 5,

        /// <summary>
        /// Enum Liability for value: liability
        /// </summary>
        Liability = 6,

        /// <summary>
        /// Enum Liabilities for value: liabilities
        /// </summary>
        Liabilities = 7,

        /// <summary>
        /// Enum InitialBalance for value: initial-balance
        /// </summary>
        InitialBalance = 8,

        /// <summary>
        /// Enum Reconciliation for value: reconciliation
        /// </summary>
        Reconciliation = 9
    }

    /// <summary>
    /// Converts <see cref="ShortAccountTypeProperty"/> to and from the JSON value
    /// </summary>
    public static class ShortAccountTypePropertyValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ShortAccountTypeProperty"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ShortAccountTypeProperty FromString(string value)
        {
            if (value.Equals("asset"))
                return ShortAccountTypeProperty.Asset;

            if (value.Equals("expense"))
                return ShortAccountTypeProperty.Expense;

            if (value.Equals("import"))
                return ShortAccountTypeProperty.Import;

            if (value.Equals("revenue"))
                return ShortAccountTypeProperty.Revenue;

            if (value.Equals("cash"))
                return ShortAccountTypeProperty.Cash;

            if (value.Equals("liability"))
                return ShortAccountTypeProperty.Liability;

            if (value.Equals("liabilities"))
                return ShortAccountTypeProperty.Liabilities;

            if (value.Equals("initial-balance"))
                return ShortAccountTypeProperty.InitialBalance;

            if (value.Equals("reconciliation"))
                return ShortAccountTypeProperty.Reconciliation;

            throw new NotImplementedException($"Could not convert value to type ShortAccountTypeProperty: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ShortAccountTypeProperty"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ShortAccountTypeProperty? FromStringOrDefault(string value)
        {
            if (value.Equals("asset"))
                return ShortAccountTypeProperty.Asset;

            if (value.Equals("expense"))
                return ShortAccountTypeProperty.Expense;

            if (value.Equals("import"))
                return ShortAccountTypeProperty.Import;

            if (value.Equals("revenue"))
                return ShortAccountTypeProperty.Revenue;

            if (value.Equals("cash"))
                return ShortAccountTypeProperty.Cash;

            if (value.Equals("liability"))
                return ShortAccountTypeProperty.Liability;

            if (value.Equals("liabilities"))
                return ShortAccountTypeProperty.Liabilities;

            if (value.Equals("initial-balance"))
                return ShortAccountTypeProperty.InitialBalance;

            if (value.Equals("reconciliation"))
                return ShortAccountTypeProperty.Reconciliation;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ShortAccountTypeProperty"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ShortAccountTypeProperty value)
        {
            if (value == ShortAccountTypeProperty.Asset)
                return "asset";

            if (value == ShortAccountTypeProperty.Expense)
                return "expense";

            if (value == ShortAccountTypeProperty.Import)
                return "import";

            if (value == ShortAccountTypeProperty.Revenue)
                return "revenue";

            if (value == ShortAccountTypeProperty.Cash)
                return "cash";

            if (value == ShortAccountTypeProperty.Liability)
                return "liability";

            if (value == ShortAccountTypeProperty.Liabilities)
                return "liabilities";

            if (value == ShortAccountTypeProperty.InitialBalance)
                return "initial-balance";

            if (value == ShortAccountTypeProperty.Reconciliation)
                return "reconciliation";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShortAccountTypeProperty"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ShortAccountTypePropertyJsonConverter : JsonConverter<ShortAccountTypeProperty>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ShortAccountTypeProperty Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ShortAccountTypeProperty? result = rawValue == null
                ? null
                : ShortAccountTypePropertyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ShortAccountTypeProperty to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shortAccountTypeProperty"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ShortAccountTypeProperty shortAccountTypeProperty, JsonSerializerOptions options)
        {
            writer.WriteStringValue(ShortAccountTypePropertyValueConverter.ToJsonValue(shortAccountTypeProperty).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShortAccountTypeProperty"/>
    /// </summary>
    public class ShortAccountTypePropertyNullableJsonConverter : JsonConverter<ShortAccountTypeProperty?>
    {
        /// <summary>
        /// Returns a ShortAccountTypeProperty from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ShortAccountTypeProperty? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ShortAccountTypeProperty? result = rawValue == null
                ? null
                : ShortAccountTypePropertyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ShortAccountTypeProperty to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shortAccountTypeProperty"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ShortAccountTypeProperty? shortAccountTypeProperty, JsonSerializerOptions options)
        {
            writer.WriteStringValue(shortAccountTypeProperty.HasValue ? ShortAccountTypePropertyValueConverter.ToJsonValue(shortAccountTypeProperty.Value).ToString() : "null");
        }
    }
}
