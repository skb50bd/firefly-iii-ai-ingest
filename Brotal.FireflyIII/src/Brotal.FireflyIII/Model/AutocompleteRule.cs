// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// AutocompleteRule
    /// </summary>
    public partial class AutocompleteRule : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutocompleteRule" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">Name of the rule found by an auto-complete search.</param>
        /// <param name="description">Description of the rule found by auto-complete.</param>
        [JsonConstructor]
        public AutocompleteRule(string id, string name, Option<string?> description = default)
        {
            Id = id;
            Name = name;
            DescriptionOption = description;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /* <example>2</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the rule found by an auto-complete search.
        /// </summary>
        /// <value>Name of the rule found by an auto-complete search.</value>
        /* <example>Rule one</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Description of the rule found by auto-complete.
        /// </summary>
        /// <value>Description of the rule found by auto-complete.</value>
        /* <example>Useful rule.</example> */
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutocompleteRule {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AutocompleteRule" />
    /// </summary>
    public class AutocompleteRuleJsonConverter : JsonConverter<AutocompleteRule>
    {
        /// <summary>
        /// Deserializes json to <see cref="AutocompleteRule" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AutocompleteRule Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> description = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class AutocompleteRule.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class AutocompleteRule.", nameof(name));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AutocompleteRule.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class AutocompleteRule.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class AutocompleteRule.");

            return new AutocompleteRule(id.Value!, name.Value!, description);
        }

        /// <summary>
        /// Serializes a <see cref="AutocompleteRule" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="autocompleteRule"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AutocompleteRule autocompleteRule, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, autocompleteRule, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AutocompleteRule" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="autocompleteRule"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AutocompleteRule autocompleteRule, JsonSerializerOptions jsonSerializerOptions)
        {
            if (autocompleteRule.Id == null)
                throw new ArgumentNullException(nameof(autocompleteRule.Id), "Property is required for class AutocompleteRule.");

            if (autocompleteRule.Name == null)
                throw new ArgumentNullException(nameof(autocompleteRule.Name), "Property is required for class AutocompleteRule.");

            if (autocompleteRule.DescriptionOption.IsSet && autocompleteRule.Description == null)
                throw new ArgumentNullException(nameof(autocompleteRule.Description), "Property is required for class AutocompleteRule.");

            writer.WriteString("id", autocompleteRule.Id);

            writer.WriteString("name", autocompleteRule.Name);

            if (autocompleteRule.DescriptionOption.IsSet)
                writer.WriteString("description", autocompleteRule.Description);
        }
    }
}
