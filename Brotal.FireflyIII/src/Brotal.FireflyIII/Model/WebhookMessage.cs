// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// WebhookMessage
    /// </summary>
    public partial class WebhookMessage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookMessage" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="sent">If this message is sent yet.</param>
        /// <param name="errored">If this message has errored out.</param>
        /// <param name="webhookId">The ID of the webhook this message belongs to.</param>
        /// <param name="uuid">Long UUID string for identification of this webhook message.</param>
        /// <param name="message">The actual message that is sent or will be sent as JSON string.</param>
        [JsonConstructor]
        public WebhookMessage(Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default, Option<bool?> sent = default, Option<bool?> errored = default, Option<string?> webhookId = default, Option<string?> uuid = default, Option<string?> message = default)
        {
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            SentOption = sent;
            ErroredOption = errored;
            WebhookIdOption = webhookId;
            UuidOption = uuid;
            MessageOption = message;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } }

        /// <summary>
        /// Used to track the state of Sent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SentOption { get; private set; }

        /// <summary>
        /// If this message is sent yet.
        /// </summary>
        /// <value>If this message is sent yet.</value>
        /* <example>false</example> */
        [JsonPropertyName("sent")]
        public bool? Sent { get { return this.SentOption; } set { this.SentOption = new(value); } }

        /// <summary>
        /// Used to track the state of Errored
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ErroredOption { get; private set; }

        /// <summary>
        /// If this message has errored out.
        /// </summary>
        /// <value>If this message has errored out.</value>
        /* <example>false</example> */
        [JsonPropertyName("errored")]
        public bool? Errored { get { return this.ErroredOption; } set { this.ErroredOption = new(value); } }

        /// <summary>
        /// Used to track the state of WebhookId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebhookIdOption { get; private set; }

        /// <summary>
        /// The ID of the webhook this message belongs to.
        /// </summary>
        /// <value>The ID of the webhook this message belongs to.</value>
        /* <example>5</example> */
        [JsonPropertyName("webhook_id")]
        public string? WebhookId { get { return this.WebhookIdOption; } set { this.WebhookIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Uuid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UuidOption { get; private set; }

        /// <summary>
        /// Long UUID string for identification of this webhook message.
        /// </summary>
        /// <value>Long UUID string for identification of this webhook message.</value>
        /* <example>7a344c02-5b52-46b1-90e6-a437431dcf07</example> */
        [JsonPropertyName("uuid")]
        public string? Uuid { get { return this.UuidOption; } set { this.UuidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// The actual message that is sent or will be sent as JSON string.
        /// </summary>
        /// <value>The actual message that is sent or will be sent as JSON string.</value>
        /* <example>{some:message}</example> */
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookMessage {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  Errored: ").Append(Errored).Append("\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookMessage" />
    /// </summary>
    public class WebhookMessageJsonConverter : JsonConverter<WebhookMessage>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="WebhookMessage" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookMessage Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<bool?> sent = default;
            Option<bool?> errored = default;
            Option<string?> webhookId = default;
            Option<string?> uuid = default;
            Option<string?> message = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sent":
                            sent = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errored":
                            errored = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "webhook_id":
                            webhookId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "uuid":
                            uuid = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WebhookMessage.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class WebhookMessage.");

            if (sent.IsSet && sent.Value == null)
                throw new ArgumentNullException(nameof(sent), "Property is not nullable for class WebhookMessage.");

            if (errored.IsSet && errored.Value == null)
                throw new ArgumentNullException(nameof(errored), "Property is not nullable for class WebhookMessage.");

            if (webhookId.IsSet && webhookId.Value == null)
                throw new ArgumentNullException(nameof(webhookId), "Property is not nullable for class WebhookMessage.");

            if (uuid.IsSet && uuid.Value == null)
                throw new ArgumentNullException(nameof(uuid), "Property is not nullable for class WebhookMessage.");

            return new WebhookMessage(createdAt, updatedAt, sent, errored, webhookId, uuid, message);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookMessage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookMessage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookMessage webhookMessage, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhookMessage, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookMessage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookMessage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhookMessage webhookMessage, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookMessage.WebhookIdOption.IsSet && webhookMessage.WebhookId == null)
                throw new ArgumentNullException(nameof(webhookMessage.WebhookId), "Property is required for class WebhookMessage.");

            if (webhookMessage.UuidOption.IsSet && webhookMessage.Uuid == null)
                throw new ArgumentNullException(nameof(webhookMessage.Uuid), "Property is required for class WebhookMessage.");

            if (webhookMessage.CreatedAtOption.IsSet)
                writer.WriteString("created_at", webhookMessage.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (webhookMessage.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", webhookMessage.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));

            if (webhookMessage.SentOption.IsSet)
                writer.WriteBoolean("sent", webhookMessage.SentOption.Value!.Value);

            if (webhookMessage.ErroredOption.IsSet)
                writer.WriteBoolean("errored", webhookMessage.ErroredOption.Value!.Value);

            if (webhookMessage.WebhookIdOption.IsSet)
                writer.WriteString("webhook_id", webhookMessage.WebhookId);

            if (webhookMessage.UuidOption.IsSet)
                writer.WriteString("uuid", webhookMessage.Uuid);

            if (webhookMessage.MessageOption.IsSet)
                if (webhookMessage.MessageOption.Value != null)
                    writer.WriteString("message", webhookMessage.Message);
                else
                    writer.WriteNull("message");
        }
    }
}
