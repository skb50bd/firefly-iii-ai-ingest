// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// The type of thing this action will do. A limited set is possible.
    /// </summary>
    /// <value>The type of thing this action will do. A limited set is possible.</value>
    public enum RuleActionKeyword
    {
        /// <summary>
        /// Enum UserAction for value: user_action
        /// </summary>
        UserAction = 1,

        /// <summary>
        /// Enum SetCategory for value: set_category
        /// </summary>
        SetCategory = 2,

        /// <summary>
        /// Enum ClearCategory for value: clear_category
        /// </summary>
        ClearCategory = 3,

        /// <summary>
        /// Enum SetBudget for value: set_budget
        /// </summary>
        SetBudget = 4,

        /// <summary>
        /// Enum ClearBudget for value: clear_budget
        /// </summary>
        ClearBudget = 5,

        /// <summary>
        /// Enum AddTag for value: add_tag
        /// </summary>
        AddTag = 6,

        /// <summary>
        /// Enum RemoveTag for value: remove_tag
        /// </summary>
        RemoveTag = 7,

        /// <summary>
        /// Enum RemoveAllTags for value: remove_all_tags
        /// </summary>
        RemoveAllTags = 8,

        /// <summary>
        /// Enum SetDescription for value: set_description
        /// </summary>
        SetDescription = 9,

        /// <summary>
        /// Enum AppendDescription for value: append_description
        /// </summary>
        AppendDescription = 10,

        /// <summary>
        /// Enum PrependDescription for value: prepend_description
        /// </summary>
        PrependDescription = 11,

        /// <summary>
        /// Enum SetSourceAccount for value: set_source_account
        /// </summary>
        SetSourceAccount = 12,

        /// <summary>
        /// Enum SetDestinationAccount for value: set_destination_account
        /// </summary>
        SetDestinationAccount = 13,

        /// <summary>
        /// Enum SetNotes for value: set_notes
        /// </summary>
        SetNotes = 14,

        /// <summary>
        /// Enum AppendNotes for value: append_notes
        /// </summary>
        AppendNotes = 15,

        /// <summary>
        /// Enum PrependNotes for value: prepend_notes
        /// </summary>
        PrependNotes = 16,

        /// <summary>
        /// Enum ClearNotes for value: clear_notes
        /// </summary>
        ClearNotes = 17,

        /// <summary>
        /// Enum LinkToBill for value: link_to_bill
        /// </summary>
        LinkToBill = 18,

        /// <summary>
        /// Enum ConvertWithdrawal for value: convert_withdrawal
        /// </summary>
        ConvertWithdrawal = 19,

        /// <summary>
        /// Enum ConvertDeposit for value: convert_deposit
        /// </summary>
        ConvertDeposit = 20,

        /// <summary>
        /// Enum ConvertTransfer for value: convert_transfer
        /// </summary>
        ConvertTransfer = 21,

        /// <summary>
        /// Enum DeleteTransaction for value: delete_transaction
        /// </summary>
        DeleteTransaction = 22
    }

    /// <summary>
    /// Converts <see cref="RuleActionKeyword"/> to and from the JSON value
    /// </summary>
    public static class RuleActionKeywordValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="RuleActionKeyword"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RuleActionKeyword FromString(string value)
        {
            if (value.Equals("user_action"))
                return RuleActionKeyword.UserAction;

            if (value.Equals("set_category"))
                return RuleActionKeyword.SetCategory;

            if (value.Equals("clear_category"))
                return RuleActionKeyword.ClearCategory;

            if (value.Equals("set_budget"))
                return RuleActionKeyword.SetBudget;

            if (value.Equals("clear_budget"))
                return RuleActionKeyword.ClearBudget;

            if (value.Equals("add_tag"))
                return RuleActionKeyword.AddTag;

            if (value.Equals("remove_tag"))
                return RuleActionKeyword.RemoveTag;

            if (value.Equals("remove_all_tags"))
                return RuleActionKeyword.RemoveAllTags;

            if (value.Equals("set_description"))
                return RuleActionKeyword.SetDescription;

            if (value.Equals("append_description"))
                return RuleActionKeyword.AppendDescription;

            if (value.Equals("prepend_description"))
                return RuleActionKeyword.PrependDescription;

            if (value.Equals("set_source_account"))
                return RuleActionKeyword.SetSourceAccount;

            if (value.Equals("set_destination_account"))
                return RuleActionKeyword.SetDestinationAccount;

            if (value.Equals("set_notes"))
                return RuleActionKeyword.SetNotes;

            if (value.Equals("append_notes"))
                return RuleActionKeyword.AppendNotes;

            if (value.Equals("prepend_notes"))
                return RuleActionKeyword.PrependNotes;

            if (value.Equals("clear_notes"))
                return RuleActionKeyword.ClearNotes;

            if (value.Equals("link_to_bill"))
                return RuleActionKeyword.LinkToBill;

            if (value.Equals("convert_withdrawal"))
                return RuleActionKeyword.ConvertWithdrawal;

            if (value.Equals("convert_deposit"))
                return RuleActionKeyword.ConvertDeposit;

            if (value.Equals("convert_transfer"))
                return RuleActionKeyword.ConvertTransfer;

            if (value.Equals("delete_transaction"))
                return RuleActionKeyword.DeleteTransaction;

            throw new NotImplementedException($"Could not convert value to type RuleActionKeyword: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="RuleActionKeyword"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RuleActionKeyword? FromStringOrDefault(string value)
        {
            if (value.Equals("user_action"))
                return RuleActionKeyword.UserAction;

            if (value.Equals("set_category"))
                return RuleActionKeyword.SetCategory;

            if (value.Equals("clear_category"))
                return RuleActionKeyword.ClearCategory;

            if (value.Equals("set_budget"))
                return RuleActionKeyword.SetBudget;

            if (value.Equals("clear_budget"))
                return RuleActionKeyword.ClearBudget;

            if (value.Equals("add_tag"))
                return RuleActionKeyword.AddTag;

            if (value.Equals("remove_tag"))
                return RuleActionKeyword.RemoveTag;

            if (value.Equals("remove_all_tags"))
                return RuleActionKeyword.RemoveAllTags;

            if (value.Equals("set_description"))
                return RuleActionKeyword.SetDescription;

            if (value.Equals("append_description"))
                return RuleActionKeyword.AppendDescription;

            if (value.Equals("prepend_description"))
                return RuleActionKeyword.PrependDescription;

            if (value.Equals("set_source_account"))
                return RuleActionKeyword.SetSourceAccount;

            if (value.Equals("set_destination_account"))
                return RuleActionKeyword.SetDestinationAccount;

            if (value.Equals("set_notes"))
                return RuleActionKeyword.SetNotes;

            if (value.Equals("append_notes"))
                return RuleActionKeyword.AppendNotes;

            if (value.Equals("prepend_notes"))
                return RuleActionKeyword.PrependNotes;

            if (value.Equals("clear_notes"))
                return RuleActionKeyword.ClearNotes;

            if (value.Equals("link_to_bill"))
                return RuleActionKeyword.LinkToBill;

            if (value.Equals("convert_withdrawal"))
                return RuleActionKeyword.ConvertWithdrawal;

            if (value.Equals("convert_deposit"))
                return RuleActionKeyword.ConvertDeposit;

            if (value.Equals("convert_transfer"))
                return RuleActionKeyword.ConvertTransfer;

            if (value.Equals("delete_transaction"))
                return RuleActionKeyword.DeleteTransaction;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RuleActionKeyword"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(RuleActionKeyword value)
        {
            if (value == RuleActionKeyword.UserAction)
                return "user_action";

            if (value == RuleActionKeyword.SetCategory)
                return "set_category";

            if (value == RuleActionKeyword.ClearCategory)
                return "clear_category";

            if (value == RuleActionKeyword.SetBudget)
                return "set_budget";

            if (value == RuleActionKeyword.ClearBudget)
                return "clear_budget";

            if (value == RuleActionKeyword.AddTag)
                return "add_tag";

            if (value == RuleActionKeyword.RemoveTag)
                return "remove_tag";

            if (value == RuleActionKeyword.RemoveAllTags)
                return "remove_all_tags";

            if (value == RuleActionKeyword.SetDescription)
                return "set_description";

            if (value == RuleActionKeyword.AppendDescription)
                return "append_description";

            if (value == RuleActionKeyword.PrependDescription)
                return "prepend_description";

            if (value == RuleActionKeyword.SetSourceAccount)
                return "set_source_account";

            if (value == RuleActionKeyword.SetDestinationAccount)
                return "set_destination_account";

            if (value == RuleActionKeyword.SetNotes)
                return "set_notes";

            if (value == RuleActionKeyword.AppendNotes)
                return "append_notes";

            if (value == RuleActionKeyword.PrependNotes)
                return "prepend_notes";

            if (value == RuleActionKeyword.ClearNotes)
                return "clear_notes";

            if (value == RuleActionKeyword.LinkToBill)
                return "link_to_bill";

            if (value == RuleActionKeyword.ConvertWithdrawal)
                return "convert_withdrawal";

            if (value == RuleActionKeyword.ConvertDeposit)
                return "convert_deposit";

            if (value == RuleActionKeyword.ConvertTransfer)
                return "convert_transfer";

            if (value == RuleActionKeyword.DeleteTransaction)
                return "delete_transaction";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RuleActionKeyword"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class RuleActionKeywordJsonConverter : JsonConverter<RuleActionKeyword>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RuleActionKeyword Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RuleActionKeyword? result = rawValue == null
                ? null
                : RuleActionKeywordValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the RuleActionKeyword to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ruleActionKeyword"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RuleActionKeyword ruleActionKeyword, JsonSerializerOptions options)
        {
            writer.WriteStringValue(RuleActionKeywordValueConverter.ToJsonValue(ruleActionKeyword).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RuleActionKeyword"/>
    /// </summary>
    public class RuleActionKeywordNullableJsonConverter : JsonConverter<RuleActionKeyword?>
    {
        /// <summary>
        /// Returns a RuleActionKeyword from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RuleActionKeyword? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RuleActionKeyword? result = rawValue == null
                ? null
                : RuleActionKeywordValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the RuleActionKeyword to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ruleActionKeyword"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RuleActionKeyword? ruleActionKeyword, JsonSerializerOptions options)
        {
            writer.WriteStringValue(ruleActionKeyword.HasValue ? RuleActionKeywordValueConverter.ToJsonValue(ruleActionKeyword.Value).ToString() : "null");
        }
    }
}
