// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// ChartDataSet
    /// </summary>
    public partial class ChartDataSet : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChartDataSet" /> class.
        /// </summary>
        /// <param name="label">This is the title of the current set. It can refer to an account, a budget or another object (by name).</param>
        /// <param name="currencyId">The currency ID of the currency associated with this object.</param>
        /// <param name="currencyName">The currency name of the currency associated with this object.</param>
        /// <param name="currencyCode">The currency code of the currency associated with this object.</param>
        /// <param name="currencySymbol">currencySymbol</param>
        /// <param name="currencyDecimalPlaces">currencyDecimalPlaces</param>
        /// <param name="primaryCurrencyId">The currency ID of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyName">The currency name of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyCode">The currency code of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencySymbol">The currency symbol of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyDecimalPlaces">The currency decimal places of the administration&#39;s primary currency.</param>
        /// <param name="date">date</param>
        /// <param name="startDate">startDate</param>
        /// <param name="endDate">endDate</param>
        /// <param name="type">Indicated the type of chart that is expected to be rendered. You can safely ignore this if you want.</param>
        /// <param name="period">period</param>
        /// <param name="yAxisID">Used to indicate the Y axis for this data set. Is usually between 0 and 1 (left and right side of the chart).</param>
        /// <param name="entries">The actual entries for this data set. They &#39;key&#39; value is the label for the data point. The value is the actual (numerical) value.</param>
        /// <param name="pcEntries">The actual entries for this data set. They &#39;key&#39; value is the label for the data point. The value is the actual (numerical) value.</param>
        [JsonConstructor]
        public ChartDataSet(Option<string?> label = default, Option<string?> currencyId = default, Option<string?> currencyName = default, Option<string?> currencyCode = default, Option<string?> currencySymbol = default, Option<int?> currencyDecimalPlaces = default, Option<string?> primaryCurrencyId = default, Option<string?> primaryCurrencyName = default, Option<string?> primaryCurrencyCode = default, Option<string?> primaryCurrencySymbol = default, Option<int?> primaryCurrencyDecimalPlaces = default, Option<DateTime?> date = default, Option<DateTime?> startDate = default, Option<DateTime?> endDate = default, Option<string?> type = default, Option<ChartDatasetPeriodProperty?> period = default, Option<int?> yAxisID = default, Option<List<ChartDataPoint>?> entries = default, Option<List<ChartDataPoint>?> pcEntries = default)
        {
            LabelOption = label;
            CurrencyIdOption = currencyId;
            CurrencyNameOption = currencyName;
            CurrencyCodeOption = currencyCode;
            CurrencySymbolOption = currencySymbol;
            CurrencyDecimalPlacesOption = currencyDecimalPlaces;
            PrimaryCurrencyIdOption = primaryCurrencyId;
            PrimaryCurrencyNameOption = primaryCurrencyName;
            PrimaryCurrencyCodeOption = primaryCurrencyCode;
            PrimaryCurrencySymbolOption = primaryCurrencySymbol;
            PrimaryCurrencyDecimalPlacesOption = primaryCurrencyDecimalPlaces;
            DateOption = date;
            StartDateOption = startDate;
            EndDateOption = endDate;
            TypeOption = type;
            PeriodOption = period;
            YAxisIDOption = yAxisID;
            EntriesOption = entries;
            PcEntriesOption = pcEntries;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Period
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ChartDatasetPeriodProperty?> PeriodOption { get; private set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [JsonPropertyName("period")]
        public ChartDatasetPeriodProperty? Period { get { return this.PeriodOption; } set { this.PeriodOption = new(value); } }

        /// <summary>
        /// Used to track the state of Label
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LabelOption { get; private set; }

        /// <summary>
        /// This is the title of the current set. It can refer to an account, a budget or another object (by name).
        /// </summary>
        /// <value>This is the title of the current set. It can refer to an account, a budget or another object (by name).</value>
        /* <example>Checking account</example> */
        [JsonPropertyName("label")]
        public string? Label { get { return this.LabelOption; } set { this.LabelOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyIdOption { get; private set; }

        /// <summary>
        /// The currency ID of the currency associated with this object.
        /// </summary>
        /// <value>The currency ID of the currency associated with this object.</value>
        /* <example>5</example> */
        [JsonPropertyName("currency_id")]
        public string? CurrencyId { get { return this.CurrencyIdOption; } set { this.CurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyNameOption { get; private set; }

        /// <summary>
        /// The currency name of the currency associated with this object.
        /// </summary>
        /// <value>The currency name of the currency associated with this object.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("currency_name")]
        public string? CurrencyName { get { return this.CurrencyNameOption; } set { this.CurrencyNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The currency code of the currency associated with this object.
        /// </summary>
        /// <value>The currency code of the currency associated with this object.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("currency_code")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencySymbolOption { get; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        /* <example>$</example> */
        [JsonPropertyName("currency_symbol")]
        public string? CurrencySymbol { get { return this.CurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of CurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// Gets or Sets CurrencyDecimalPlaces
        /// </summary>
        /* <example>2</example> */
        [JsonPropertyName("currency_decimal_places")]
        public int? CurrencyDecimalPlaces { get { return this.CurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyIdOption { get; }

        /// <summary>
        /// The currency ID of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency ID of the administration&#39;s primary currency.</value>
        /* <example>5</example> */
        [JsonPropertyName("primary_currency_id")]
        public string? PrimaryCurrencyId { get { return this.PrimaryCurrencyIdOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyNameOption { get; }

        /// <summary>
        /// The currency name of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency name of the administration&#39;s primary currency.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("primary_currency_name")]
        public string? PrimaryCurrencyName { get { return this.PrimaryCurrencyNameOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyCodeOption { get; }

        /// <summary>
        /// The currency code of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency code of the administration&#39;s primary currency.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("primary_currency_code")]
        public string? PrimaryCurrencyCode { get { return this.PrimaryCurrencyCodeOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencySymbolOption { get; }

        /// <summary>
        /// The currency symbol of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency symbol of the administration&#39;s primary currency.</value>
        /* <example>$</example> */
        [JsonPropertyName("primary_currency_symbol")]
        public string? PrimaryCurrencySymbol { get { return this.PrimaryCurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PrimaryCurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// The currency decimal places of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency decimal places of the administration&#39;s primary currency.</value>
        /* <example>2</example> */
        [JsonPropertyName("primary_currency_decimal_places")]
        public int? PrimaryCurrencyDecimalPlaces { get { return this.PrimaryCurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of Date
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("date")]
        public DateTime? Date { get { return this.DateOption; } set { this.DateOption = new(value); } }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> StartDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("start_date")]
        public DateTime? StartDate { get { return this.StartDateOption; } set { this.StartDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> EndDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        /* <example>2025-08-31T23:59:59Z</example> */
        [JsonPropertyName("end_date")]
        public DateTime? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Indicated the type of chart that is expected to be rendered. You can safely ignore this if you want.
        /// </summary>
        /// <value>Indicated the type of chart that is expected to be rendered. You can safely ignore this if you want.</value>
        /* <example>line</example> */
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of YAxisID
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> YAxisIDOption { get; private set; }

        /// <summary>
        /// Used to indicate the Y axis for this data set. Is usually between 0 and 1 (left and right side of the chart).
        /// </summary>
        /// <value>Used to indicate the Y axis for this data set. Is usually between 0 and 1 (left and right side of the chart).</value>
        /* <example>0</example> */
        [JsonPropertyName("yAxisID")]
        public int? YAxisID { get { return this.YAxisIDOption; } set { this.YAxisIDOption = new(value); } }

        /// <summary>
        /// Used to track the state of Entries
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ChartDataPoint>?> EntriesOption { get; private set; }

        /// <summary>
        /// The actual entries for this data set. They &#39;key&#39; value is the label for the data point. The value is the actual (numerical) value.
        /// </summary>
        /// <value>The actual entries for this data set. They &#39;key&#39; value is the label for the data point. The value is the actual (numerical) value.</value>
        [JsonPropertyName("entries")]
        public List<ChartDataPoint>? Entries { get { return this.EntriesOption; } set { this.EntriesOption = new(value); } }

        /// <summary>
        /// Used to track the state of PcEntries
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ChartDataPoint>?> PcEntriesOption { get; private set; }

        /// <summary>
        /// The actual entries for this data set. They &#39;key&#39; value is the label for the data point. The value is the actual (numerical) value.
        /// </summary>
        /// <value>The actual entries for this data set. They &#39;key&#39; value is the label for the data point. The value is the actual (numerical) value.</value>
        [JsonPropertyName("pc_entries")]
        public List<ChartDataPoint>? PcEntries { get { return this.PcEntriesOption; } set { this.PcEntriesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChartDataSet {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  CurrencyDecimalPlaces: ").Append(CurrencyDecimalPlaces).Append("\n");
            sb.Append("  PrimaryCurrencyId: ").Append(PrimaryCurrencyId).Append("\n");
            sb.Append("  PrimaryCurrencyName: ").Append(PrimaryCurrencyName).Append("\n");
            sb.Append("  PrimaryCurrencyCode: ").Append(PrimaryCurrencyCode).Append("\n");
            sb.Append("  PrimaryCurrencySymbol: ").Append(PrimaryCurrencySymbol).Append("\n");
            sb.Append("  PrimaryCurrencyDecimalPlaces: ").Append(PrimaryCurrencyDecimalPlaces).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  YAxisID: ").Append(YAxisID).Append("\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("  PcEntries: ").Append(PcEntries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChartDataSet" />
    /// </summary>
    public class ChartDataSetJsonConverter : JsonConverter<ChartDataSet>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ChartDataSet" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChartDataSet Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> label = default;
            Option<string?> currencyId = default;
            Option<string?> currencyName = default;
            Option<string?> currencyCode = default;
            Option<string?> currencySymbol = default;
            Option<int?> currencyDecimalPlaces = default;
            Option<string?> primaryCurrencyId = default;
            Option<string?> primaryCurrencyName = default;
            Option<string?> primaryCurrencyCode = default;
            Option<string?> primaryCurrencySymbol = default;
            Option<int?> primaryCurrencyDecimalPlaces = default;
            Option<DateTime?> date = default;
            Option<DateTime?> startDate = default;
            Option<DateTime?> endDate = default;
            Option<string?> type = default;
            Option<ChartDatasetPeriodProperty?> period = default;
            Option<int?> yAxisID = default;
            Option<List<ChartDataPoint>?> entries = default;
            Option<List<ChartDataPoint>?> pcEntries = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "label":
                            label = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_name":
                            currencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_symbol":
                            currencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_decimal_places":
                            currencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "primary_currency_id":
                            primaryCurrencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_name":
                            primaryCurrencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_code":
                            primaryCurrencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_symbol":
                            primaryCurrencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_decimal_places":
                            primaryCurrencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "date":
                            date = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "start_date":
                            startDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "end_date":
                            endDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "period":
                            string? periodRawValue = utf8JsonReader.GetString();
                            if (periodRawValue != null)
                                period = new Option<ChartDatasetPeriodProperty?>(ChartDatasetPeriodPropertyValueConverter.FromStringOrDefault(periodRawValue));
                            break;
                        case "yAxisID":
                            yAxisID = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "entries":
                            entries = new Option<List<ChartDataPoint>?>(JsonSerializer.Deserialize<List<ChartDataPoint>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pc_entries":
                            pcEntries = new Option<List<ChartDataPoint>?>(JsonSerializer.Deserialize<List<ChartDataPoint>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (label.IsSet && label.Value == null)
                throw new ArgumentNullException(nameof(label), "Property is not nullable for class ChartDataSet.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class ChartDataSet.");

            if (currencyName.IsSet && currencyName.Value == null)
                throw new ArgumentNullException(nameof(currencyName), "Property is not nullable for class ChartDataSet.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class ChartDataSet.");

            if (currencySymbol.IsSet && currencySymbol.Value == null)
                throw new ArgumentNullException(nameof(currencySymbol), "Property is not nullable for class ChartDataSet.");

            if (currencyDecimalPlaces.IsSet && currencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(currencyDecimalPlaces), "Property is not nullable for class ChartDataSet.");

            if (primaryCurrencyId.IsSet && primaryCurrencyId.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyId), "Property is not nullable for class ChartDataSet.");

            if (primaryCurrencyName.IsSet && primaryCurrencyName.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyName), "Property is not nullable for class ChartDataSet.");

            if (primaryCurrencyCode.IsSet && primaryCurrencyCode.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyCode), "Property is not nullable for class ChartDataSet.");

            if (primaryCurrencySymbol.IsSet && primaryCurrencySymbol.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencySymbol), "Property is not nullable for class ChartDataSet.");

            if (primaryCurrencyDecimalPlaces.IsSet && primaryCurrencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyDecimalPlaces), "Property is not nullable for class ChartDataSet.");

            if (date.IsSet && date.Value == null)
                throw new ArgumentNullException(nameof(date), "Property is not nullable for class ChartDataSet.");

            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate), "Property is not nullable for class ChartDataSet.");

            if (endDate.IsSet && endDate.Value == null)
                throw new ArgumentNullException(nameof(endDate), "Property is not nullable for class ChartDataSet.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ChartDataSet.");

            if (period.IsSet && period.Value == null)
                throw new ArgumentNullException(nameof(period), "Property is not nullable for class ChartDataSet.");

            if (yAxisID.IsSet && yAxisID.Value == null)
                throw new ArgumentNullException(nameof(yAxisID), "Property is not nullable for class ChartDataSet.");

            if (entries.IsSet && entries.Value == null)
                throw new ArgumentNullException(nameof(entries), "Property is not nullable for class ChartDataSet.");

            if (pcEntries.IsSet && pcEntries.Value == null)
                throw new ArgumentNullException(nameof(pcEntries), "Property is not nullable for class ChartDataSet.");

            return new ChartDataSet(label, currencyId, currencyName, currencyCode, currencySymbol, currencyDecimalPlaces, primaryCurrencyId, primaryCurrencyName, primaryCurrencyCode, primaryCurrencySymbol, primaryCurrencyDecimalPlaces, date, startDate, endDate, type, period, yAxisID, entries, pcEntries);
        }

        /// <summary>
        /// Serializes a <see cref="ChartDataSet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chartDataSet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChartDataSet chartDataSet, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, chartDataSet, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChartDataSet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chartDataSet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChartDataSet chartDataSet, JsonSerializerOptions jsonSerializerOptions)
        {
            if (chartDataSet.LabelOption.IsSet && chartDataSet.Label == null)
                throw new ArgumentNullException(nameof(chartDataSet.Label), "Property is required for class ChartDataSet.");

            if (chartDataSet.CurrencyIdOption.IsSet && chartDataSet.CurrencyId == null)
                throw new ArgumentNullException(nameof(chartDataSet.CurrencyId), "Property is required for class ChartDataSet.");

            if (chartDataSet.CurrencyNameOption.IsSet && chartDataSet.CurrencyName == null)
                throw new ArgumentNullException(nameof(chartDataSet.CurrencyName), "Property is required for class ChartDataSet.");

            if (chartDataSet.CurrencyCodeOption.IsSet && chartDataSet.CurrencyCode == null)
                throw new ArgumentNullException(nameof(chartDataSet.CurrencyCode), "Property is required for class ChartDataSet.");

            if (chartDataSet.CurrencySymbolOption.IsSet && chartDataSet.CurrencySymbol == null)
                throw new ArgumentNullException(nameof(chartDataSet.CurrencySymbol), "Property is required for class ChartDataSet.");

            if (chartDataSet.PrimaryCurrencyIdOption.IsSet && chartDataSet.PrimaryCurrencyId == null)
                throw new ArgumentNullException(nameof(chartDataSet.PrimaryCurrencyId), "Property is required for class ChartDataSet.");

            if (chartDataSet.PrimaryCurrencyNameOption.IsSet && chartDataSet.PrimaryCurrencyName == null)
                throw new ArgumentNullException(nameof(chartDataSet.PrimaryCurrencyName), "Property is required for class ChartDataSet.");

            if (chartDataSet.PrimaryCurrencyCodeOption.IsSet && chartDataSet.PrimaryCurrencyCode == null)
                throw new ArgumentNullException(nameof(chartDataSet.PrimaryCurrencyCode), "Property is required for class ChartDataSet.");

            if (chartDataSet.PrimaryCurrencySymbolOption.IsSet && chartDataSet.PrimaryCurrencySymbol == null)
                throw new ArgumentNullException(nameof(chartDataSet.PrimaryCurrencySymbol), "Property is required for class ChartDataSet.");

            if (chartDataSet.TypeOption.IsSet && chartDataSet.Type == null)
                throw new ArgumentNullException(nameof(chartDataSet.Type), "Property is required for class ChartDataSet.");

            if (chartDataSet.EntriesOption.IsSet && chartDataSet.Entries == null)
                throw new ArgumentNullException(nameof(chartDataSet.Entries), "Property is required for class ChartDataSet.");

            if (chartDataSet.PcEntriesOption.IsSet && chartDataSet.PcEntries == null)
                throw new ArgumentNullException(nameof(chartDataSet.PcEntries), "Property is required for class ChartDataSet.");

            if (chartDataSet.LabelOption.IsSet)
                writer.WriteString("label", chartDataSet.Label);

            if (chartDataSet.CurrencyIdOption.IsSet)
                writer.WriteString("currency_id", chartDataSet.CurrencyId);

            if (chartDataSet.CurrencyNameOption.IsSet)
                writer.WriteString("currency_name", chartDataSet.CurrencyName);

            if (chartDataSet.CurrencyCodeOption.IsSet)
                writer.WriteString("currency_code", chartDataSet.CurrencyCode);

            if (chartDataSet.CurrencySymbolOption.IsSet)
                writer.WriteString("currency_symbol", chartDataSet.CurrencySymbol);

            if (chartDataSet.CurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("currency_decimal_places", chartDataSet.CurrencyDecimalPlacesOption.Value!.Value);

            if (chartDataSet.PrimaryCurrencyIdOption.IsSet)
                writer.WriteString("primary_currency_id", chartDataSet.PrimaryCurrencyId);

            if (chartDataSet.PrimaryCurrencyNameOption.IsSet)
                writer.WriteString("primary_currency_name", chartDataSet.PrimaryCurrencyName);

            if (chartDataSet.PrimaryCurrencyCodeOption.IsSet)
                writer.WriteString("primary_currency_code", chartDataSet.PrimaryCurrencyCode);

            if (chartDataSet.PrimaryCurrencySymbolOption.IsSet)
                writer.WriteString("primary_currency_symbol", chartDataSet.PrimaryCurrencySymbol);

            if (chartDataSet.PrimaryCurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("primary_currency_decimal_places", chartDataSet.PrimaryCurrencyDecimalPlacesOption.Value!.Value);

            if (chartDataSet.DateOption.IsSet)
                writer.WriteString("date", chartDataSet.DateOption.Value!.Value.ToString(DateFormat));

            if (chartDataSet.StartDateOption.IsSet)
                writer.WriteString("start_date", chartDataSet.StartDateOption.Value!.Value.ToString(StartDateFormat));

            if (chartDataSet.EndDateOption.IsSet)
                writer.WriteString("end_date", chartDataSet.EndDateOption.Value!.Value.ToString(EndDateFormat));

            if (chartDataSet.TypeOption.IsSet)
                writer.WriteString("type", chartDataSet.Type);

            if (chartDataSet.PeriodOption.IsSet)
            {
                var periodRawValue = ChartDatasetPeriodPropertyValueConverter.ToJsonValue(chartDataSet.Period!.Value);
                writer.WriteString("period", periodRawValue);
            }
            if (chartDataSet.YAxisIDOption.IsSet)
                writer.WriteNumber("yAxisID", chartDataSet.YAxisIDOption.Value!.Value);

            if (chartDataSet.EntriesOption.IsSet)
            {
                writer.WritePropertyName("entries");
                JsonSerializer.Serialize(writer, chartDataSet.Entries, jsonSerializerOptions);
            }
            if (chartDataSet.PcEntriesOption.IsSet)
            {
                writer.WritePropertyName("pc_entries");
                JsonSerializer.Serialize(writer, chartDataSet.PcEntries, jsonSerializerOptions);
            }
        }
    }
}
