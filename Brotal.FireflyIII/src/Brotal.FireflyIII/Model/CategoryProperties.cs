// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// CategoryProperties
    /// </summary>
    public partial class CategoryProperties : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryProperties" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="notes">notes</param>
        /// <param name="objectHasCurrencySetting">This object never has its own currency setting, so this value is always false.</param>
        /// <param name="primaryCurrencyId">The currency ID of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyName">The currency name of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyCode">The currency code of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencySymbol">The currency symbol of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyDecimalPlaces">The currency decimal places of the administration&#39;s primary currency.</param>
        /// <param name="spent">Amount(s) spent in the currencies in the database for this category. ONLY present when start and date are set.</param>
        /// <param name="pcSpent">Amount(s) spent in the primary currency in the database for this category. ONLY present when start and date are set. </param>
        /// <param name="earned">Amount(s) earned in the currencies in the database for this category. ONLY present when start and date are set.</param>
        /// <param name="pcEarned">Amount(s) earned in the primary currency in the database for this category. ONLY present when start and date are set. </param>
        /// <param name="transferred">Amount(s) transferred in the currencies in the database for this category. ONLY present when start and date are set. </param>
        /// <param name="pcTransferred">Amount(s) transferred in primary currency in the database for this category. ONLY present when start and date are set. </param>
        [JsonConstructor]
        public CategoryProperties(string name, Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default, Option<string?> notes = default, Option<bool?> objectHasCurrencySetting = default, Option<string?> primaryCurrencyId = default, Option<string?> primaryCurrencyName = default, Option<string?> primaryCurrencyCode = default, Option<string?> primaryCurrencySymbol = default, Option<int?> primaryCurrencyDecimalPlaces = default, Option<List<ArrayEntryWithCurrencyAndSum>?> spent = default, Option<List<ArrayEntryWithCurrencyAndSum>?> pcSpent = default, Option<List<ArrayEntryWithCurrencyAndSum>?> earned = default, Option<List<ArrayEntryWithCurrencyAndSum>?> pcEarned = default, Option<List<ArrayEntryWithCurrencyAndSum>?> transferred = default, Option<List<ArrayEntryWithCurrencyAndSum>?> pcTransferred = default)
        {
            Name = name;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            NotesOption = notes;
            ObjectHasCurrencySettingOption = objectHasCurrencySetting;
            PrimaryCurrencyIdOption = primaryCurrencyId;
            PrimaryCurrencyNameOption = primaryCurrencyName;
            PrimaryCurrencyCodeOption = primaryCurrencyCode;
            PrimaryCurrencySymbolOption = primaryCurrencySymbol;
            PrimaryCurrencyDecimalPlacesOption = primaryCurrencyDecimalPlaces;
            SpentOption = spent;
            PcSpentOption = pcSpent;
            EarnedOption = earned;
            PcEarnedOption = pcEarned;
            TransferredOption = transferred;
            PcTransferredOption = pcTransferred;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>Lunch</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        /* <example>Some example notes</example> */
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectHasCurrencySetting
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ObjectHasCurrencySettingOption { get; private set; }

        /// <summary>
        /// This object never has its own currency setting, so this value is always false.
        /// </summary>
        /// <value>This object never has its own currency setting, so this value is always false.</value>
        /* <example>false</example> */
        [JsonPropertyName("object_has_currency_setting")]
        public bool? ObjectHasCurrencySetting { get { return this.ObjectHasCurrencySettingOption; } set { this.ObjectHasCurrencySettingOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyIdOption { get; }

        /// <summary>
        /// The currency ID of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency ID of the administration&#39;s primary currency.</value>
        /* <example>5</example> */
        [JsonPropertyName("primary_currency_id")]
        public string? PrimaryCurrencyId { get { return this.PrimaryCurrencyIdOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyNameOption { get; }

        /// <summary>
        /// The currency name of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency name of the administration&#39;s primary currency.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("primary_currency_name")]
        public string? PrimaryCurrencyName { get { return this.PrimaryCurrencyNameOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyCodeOption { get; }

        /// <summary>
        /// The currency code of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency code of the administration&#39;s primary currency.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("primary_currency_code")]
        public string? PrimaryCurrencyCode { get { return this.PrimaryCurrencyCodeOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencySymbolOption { get; }

        /// <summary>
        /// The currency symbol of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency symbol of the administration&#39;s primary currency.</value>
        /* <example>$</example> */
        [JsonPropertyName("primary_currency_symbol")]
        public string? PrimaryCurrencySymbol { get { return this.PrimaryCurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PrimaryCurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// The currency decimal places of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency decimal places of the administration&#39;s primary currency.</value>
        /* <example>2</example> */
        [JsonPropertyName("primary_currency_decimal_places")]
        public int? PrimaryCurrencyDecimalPlaces { get { return this.PrimaryCurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of Spent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ArrayEntryWithCurrencyAndSum>?> SpentOption { get; }

        /// <summary>
        /// Amount(s) spent in the currencies in the database for this category. ONLY present when start and date are set.
        /// </summary>
        /// <value>Amount(s) spent in the currencies in the database for this category. ONLY present when start and date are set.</value>
        [JsonPropertyName("spent")]
        public List<ArrayEntryWithCurrencyAndSum>? Spent { get { return this.SpentOption; } }

        /// <summary>
        /// Used to track the state of PcSpent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ArrayEntryWithCurrencyAndSum>?> PcSpentOption { get; }

        /// <summary>
        /// Amount(s) spent in the primary currency in the database for this category. ONLY present when start and date are set. 
        /// </summary>
        /// <value>Amount(s) spent in the primary currency in the database for this category. ONLY present when start and date are set. </value>
        [JsonPropertyName("pc_spent")]
        public List<ArrayEntryWithCurrencyAndSum>? PcSpent { get { return this.PcSpentOption; } }

        /// <summary>
        /// Used to track the state of Earned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ArrayEntryWithCurrencyAndSum>?> EarnedOption { get; }

        /// <summary>
        /// Amount(s) earned in the currencies in the database for this category. ONLY present when start and date are set.
        /// </summary>
        /// <value>Amount(s) earned in the currencies in the database for this category. ONLY present when start and date are set.</value>
        [JsonPropertyName("earned")]
        public List<ArrayEntryWithCurrencyAndSum>? Earned { get { return this.EarnedOption; } }

        /// <summary>
        /// Used to track the state of PcEarned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ArrayEntryWithCurrencyAndSum>?> PcEarnedOption { get; }

        /// <summary>
        /// Amount(s) earned in the primary currency in the database for this category. ONLY present when start and date are set. 
        /// </summary>
        /// <value>Amount(s) earned in the primary currency in the database for this category. ONLY present when start and date are set. </value>
        [JsonPropertyName("pc_earned")]
        public List<ArrayEntryWithCurrencyAndSum>? PcEarned { get { return this.PcEarnedOption; } }

        /// <summary>
        /// Used to track the state of Transferred
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ArrayEntryWithCurrencyAndSum>?> TransferredOption { get; }

        /// <summary>
        /// Amount(s) transferred in the currencies in the database for this category. ONLY present when start and date are set. 
        /// </summary>
        /// <value>Amount(s) transferred in the currencies in the database for this category. ONLY present when start and date are set. </value>
        [JsonPropertyName("transferred")]
        public List<ArrayEntryWithCurrencyAndSum>? Transferred { get { return this.TransferredOption; } }

        /// <summary>
        /// Used to track the state of PcTransferred
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ArrayEntryWithCurrencyAndSum>?> PcTransferredOption { get; }

        /// <summary>
        /// Amount(s) transferred in primary currency in the database for this category. ONLY present when start and date are set. 
        /// </summary>
        /// <value>Amount(s) transferred in primary currency in the database for this category. ONLY present when start and date are set. </value>
        [JsonPropertyName("pc_transferred")]
        public List<ArrayEntryWithCurrencyAndSum>? PcTransferred { get { return this.PcTransferredOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CategoryProperties {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ObjectHasCurrencySetting: ").Append(ObjectHasCurrencySetting).Append("\n");
            sb.Append("  PrimaryCurrencyId: ").Append(PrimaryCurrencyId).Append("\n");
            sb.Append("  PrimaryCurrencyName: ").Append(PrimaryCurrencyName).Append("\n");
            sb.Append("  PrimaryCurrencyCode: ").Append(PrimaryCurrencyCode).Append("\n");
            sb.Append("  PrimaryCurrencySymbol: ").Append(PrimaryCurrencySymbol).Append("\n");
            sb.Append("  PrimaryCurrencyDecimalPlaces: ").Append(PrimaryCurrencyDecimalPlaces).Append("\n");
            sb.Append("  Spent: ").Append(Spent).Append("\n");
            sb.Append("  PcSpent: ").Append(PcSpent).Append("\n");
            sb.Append("  Earned: ").Append(Earned).Append("\n");
            sb.Append("  PcEarned: ").Append(PcEarned).Append("\n");
            sb.Append("  Transferred: ").Append(Transferred).Append("\n");
            sb.Append("  PcTransferred: ").Append(PcTransferred).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CategoryProperties" />
    /// </summary>
    public class CategoryPropertiesJsonConverter : JsonConverter<CategoryProperties>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CategoryProperties" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CategoryProperties Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<string?> notes = default;
            Option<bool?> objectHasCurrencySetting = default;
            Option<string?> primaryCurrencyId = default;
            Option<string?> primaryCurrencyName = default;
            Option<string?> primaryCurrencyCode = default;
            Option<string?> primaryCurrencySymbol = default;
            Option<int?> primaryCurrencyDecimalPlaces = default;
            Option<List<ArrayEntryWithCurrencyAndSum>?> spent = default;
            Option<List<ArrayEntryWithCurrencyAndSum>?> pcSpent = default;
            Option<List<ArrayEntryWithCurrencyAndSum>?> earned = default;
            Option<List<ArrayEntryWithCurrencyAndSum>?> pcEarned = default;
            Option<List<ArrayEntryWithCurrencyAndSum>?> transferred = default;
            Option<List<ArrayEntryWithCurrencyAndSum>?> pcTransferred = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "object_has_currency_setting":
                            objectHasCurrencySetting = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "primary_currency_id":
                            primaryCurrencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_name":
                            primaryCurrencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_code":
                            primaryCurrencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_symbol":
                            primaryCurrencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_decimal_places":
                            primaryCurrencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "spent":
                            spent = new Option<List<ArrayEntryWithCurrencyAndSum>?>(JsonSerializer.Deserialize<List<ArrayEntryWithCurrencyAndSum>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pc_spent":
                            pcSpent = new Option<List<ArrayEntryWithCurrencyAndSum>?>(JsonSerializer.Deserialize<List<ArrayEntryWithCurrencyAndSum>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "earned":
                            earned = new Option<List<ArrayEntryWithCurrencyAndSum>?>(JsonSerializer.Deserialize<List<ArrayEntryWithCurrencyAndSum>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pc_earned":
                            pcEarned = new Option<List<ArrayEntryWithCurrencyAndSum>?>(JsonSerializer.Deserialize<List<ArrayEntryWithCurrencyAndSum>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "transferred":
                            transferred = new Option<List<ArrayEntryWithCurrencyAndSum>?>(JsonSerializer.Deserialize<List<ArrayEntryWithCurrencyAndSum>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pc_transferred":
                            pcTransferred = new Option<List<ArrayEntryWithCurrencyAndSum>?>(JsonSerializer.Deserialize<List<ArrayEntryWithCurrencyAndSum>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CategoryProperties.", nameof(name));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CategoryProperties.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class CategoryProperties.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class CategoryProperties.");

            if (objectHasCurrencySetting.IsSet && objectHasCurrencySetting.Value == null)
                throw new ArgumentNullException(nameof(objectHasCurrencySetting), "Property is not nullable for class CategoryProperties.");

            if (primaryCurrencyId.IsSet && primaryCurrencyId.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyId), "Property is not nullable for class CategoryProperties.");

            if (primaryCurrencyName.IsSet && primaryCurrencyName.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyName), "Property is not nullable for class CategoryProperties.");

            if (primaryCurrencyCode.IsSet && primaryCurrencyCode.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyCode), "Property is not nullable for class CategoryProperties.");

            if (primaryCurrencySymbol.IsSet && primaryCurrencySymbol.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencySymbol), "Property is not nullable for class CategoryProperties.");

            if (primaryCurrencyDecimalPlaces.IsSet && primaryCurrencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyDecimalPlaces), "Property is not nullable for class CategoryProperties.");

            if (spent.IsSet && spent.Value == null)
                throw new ArgumentNullException(nameof(spent), "Property is not nullable for class CategoryProperties.");

            if (pcSpent.IsSet && pcSpent.Value == null)
                throw new ArgumentNullException(nameof(pcSpent), "Property is not nullable for class CategoryProperties.");

            if (earned.IsSet && earned.Value == null)
                throw new ArgumentNullException(nameof(earned), "Property is not nullable for class CategoryProperties.");

            if (pcEarned.IsSet && pcEarned.Value == null)
                throw new ArgumentNullException(nameof(pcEarned), "Property is not nullable for class CategoryProperties.");

            if (transferred.IsSet && transferred.Value == null)
                throw new ArgumentNullException(nameof(transferred), "Property is not nullable for class CategoryProperties.");

            if (pcTransferred.IsSet && pcTransferred.Value == null)
                throw new ArgumentNullException(nameof(pcTransferred), "Property is not nullable for class CategoryProperties.");

            return new CategoryProperties(name.Value!, createdAt, updatedAt, notes, objectHasCurrencySetting, primaryCurrencyId, primaryCurrencyName, primaryCurrencyCode, primaryCurrencySymbol, primaryCurrencyDecimalPlaces, spent, pcSpent, earned, pcEarned, transferred, pcTransferred);
        }

        /// <summary>
        /// Serializes a <see cref="CategoryProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="categoryProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CategoryProperties categoryProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, categoryProperties, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CategoryProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="categoryProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CategoryProperties categoryProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            if (categoryProperties.Name == null)
                throw new ArgumentNullException(nameof(categoryProperties.Name), "Property is required for class CategoryProperties.");

            if (categoryProperties.PrimaryCurrencyIdOption.IsSet && categoryProperties.PrimaryCurrencyId == null)
                throw new ArgumentNullException(nameof(categoryProperties.PrimaryCurrencyId), "Property is required for class CategoryProperties.");

            if (categoryProperties.PrimaryCurrencyNameOption.IsSet && categoryProperties.PrimaryCurrencyName == null)
                throw new ArgumentNullException(nameof(categoryProperties.PrimaryCurrencyName), "Property is required for class CategoryProperties.");

            if (categoryProperties.PrimaryCurrencyCodeOption.IsSet && categoryProperties.PrimaryCurrencyCode == null)
                throw new ArgumentNullException(nameof(categoryProperties.PrimaryCurrencyCode), "Property is required for class CategoryProperties.");

            if (categoryProperties.PrimaryCurrencySymbolOption.IsSet && categoryProperties.PrimaryCurrencySymbol == null)
                throw new ArgumentNullException(nameof(categoryProperties.PrimaryCurrencySymbol), "Property is required for class CategoryProperties.");

            if (categoryProperties.SpentOption.IsSet && categoryProperties.Spent == null)
                throw new ArgumentNullException(nameof(categoryProperties.Spent), "Property is required for class CategoryProperties.");

            if (categoryProperties.PcSpentOption.IsSet && categoryProperties.PcSpent == null)
                throw new ArgumentNullException(nameof(categoryProperties.PcSpent), "Property is required for class CategoryProperties.");

            if (categoryProperties.EarnedOption.IsSet && categoryProperties.Earned == null)
                throw new ArgumentNullException(nameof(categoryProperties.Earned), "Property is required for class CategoryProperties.");

            if (categoryProperties.PcEarnedOption.IsSet && categoryProperties.PcEarned == null)
                throw new ArgumentNullException(nameof(categoryProperties.PcEarned), "Property is required for class CategoryProperties.");

            if (categoryProperties.TransferredOption.IsSet && categoryProperties.Transferred == null)
                throw new ArgumentNullException(nameof(categoryProperties.Transferred), "Property is required for class CategoryProperties.");

            if (categoryProperties.PcTransferredOption.IsSet && categoryProperties.PcTransferred == null)
                throw new ArgumentNullException(nameof(categoryProperties.PcTransferred), "Property is required for class CategoryProperties.");

            writer.WriteString("name", categoryProperties.Name);

            if (categoryProperties.CreatedAtOption.IsSet)
                writer.WriteString("created_at", categoryProperties.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (categoryProperties.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", categoryProperties.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));

            if (categoryProperties.NotesOption.IsSet)
                if (categoryProperties.NotesOption.Value != null)
                    writer.WriteString("notes", categoryProperties.Notes);
                else
                    writer.WriteNull("notes");

            if (categoryProperties.ObjectHasCurrencySettingOption.IsSet)
                writer.WriteBoolean("object_has_currency_setting", categoryProperties.ObjectHasCurrencySettingOption.Value!.Value);

            if (categoryProperties.PrimaryCurrencyIdOption.IsSet)
                writer.WriteString("primary_currency_id", categoryProperties.PrimaryCurrencyId);

            if (categoryProperties.PrimaryCurrencyNameOption.IsSet)
                writer.WriteString("primary_currency_name", categoryProperties.PrimaryCurrencyName);

            if (categoryProperties.PrimaryCurrencyCodeOption.IsSet)
                writer.WriteString("primary_currency_code", categoryProperties.PrimaryCurrencyCode);

            if (categoryProperties.PrimaryCurrencySymbolOption.IsSet)
                writer.WriteString("primary_currency_symbol", categoryProperties.PrimaryCurrencySymbol);

            if (categoryProperties.PrimaryCurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("primary_currency_decimal_places", categoryProperties.PrimaryCurrencyDecimalPlacesOption.Value!.Value);

            if (categoryProperties.SpentOption.IsSet)
            {
                writer.WritePropertyName("spent");
                JsonSerializer.Serialize(writer, categoryProperties.Spent, jsonSerializerOptions);
            }
            if (categoryProperties.PcSpentOption.IsSet)
            {
                writer.WritePropertyName("pc_spent");
                JsonSerializer.Serialize(writer, categoryProperties.PcSpent, jsonSerializerOptions);
            }
            if (categoryProperties.EarnedOption.IsSet)
            {
                writer.WritePropertyName("earned");
                JsonSerializer.Serialize(writer, categoryProperties.Earned, jsonSerializerOptions);
            }
            if (categoryProperties.PcEarnedOption.IsSet)
            {
                writer.WritePropertyName("pc_earned");
                JsonSerializer.Serialize(writer, categoryProperties.PcEarned, jsonSerializerOptions);
            }
            if (categoryProperties.TransferredOption.IsSet)
            {
                writer.WritePropertyName("transferred");
                JsonSerializer.Serialize(writer, categoryProperties.Transferred, jsonSerializerOptions);
            }
            if (categoryProperties.PcTransferredOption.IsSet)
            {
                writer.WritePropertyName("pc_transferred");
                JsonSerializer.Serialize(writer, categoryProperties.PcTransferred, jsonSerializerOptions);
            }
        }
    }
}
