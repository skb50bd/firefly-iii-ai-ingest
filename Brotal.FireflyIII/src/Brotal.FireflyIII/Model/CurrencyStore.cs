// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// CurrencyStore
    /// </summary>
    public partial class CurrencyStore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyStore" /> class.
        /// </summary>
        /// <param name="code">code</param>
        /// <param name="name">name</param>
        /// <param name="symbol">symbol</param>
        /// <param name="enabled">Defaults to true (default to true)</param>
        /// <param name="primary">Make this currency the primary currency for the current administration. You can set this value to FALSE, in which case nothing will change to the primary currency. If you set it to TRUE, the current primary currency will no longer be the primary currency.</param>
        /// <param name="decimalPlaces">Supports 0-16 decimals.</param>
        [JsonConstructor]
        public CurrencyStore(string code, string name, string symbol, Option<bool?> enabled = default, Option<bool?> primary = default, Option<int?> decimalPlaces = default)
        {
            Code = code;
            Name = name;
            Symbol = symbol;
            EnabledOption = enabled;
            PrimaryOption = primary;
            DecimalPlacesOption = decimalPlaces;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        /* <example>AMS</example> */
        [JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>Ankh-Morpork dollar</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        /* <example>AM$</example> */
        [JsonPropertyName("symbol")]
        public string Symbol { get; set; }

        /// <summary>
        /// Used to track the state of Enabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnabledOption { get; private set; }

        /// <summary>
        /// Defaults to true
        /// </summary>
        /// <value>Defaults to true</value>
        /* <example>true</example> */
        [JsonPropertyName("enabled")]
        public bool? Enabled { get { return this.EnabledOption; } set { this.EnabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of Primary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PrimaryOption { get; private set; }

        /// <summary>
        /// Make this currency the primary currency for the current administration. You can set this value to FALSE, in which case nothing will change to the primary currency. If you set it to TRUE, the current primary currency will no longer be the primary currency.
        /// </summary>
        /// <value>Make this currency the primary currency for the current administration. You can set this value to FALSE, in which case nothing will change to the primary currency. If you set it to TRUE, the current primary currency will no longer be the primary currency.</value>
        /* <example>true</example> */
        [JsonPropertyName("primary")]
        public bool? Primary { get { return this.PrimaryOption; } set { this.PrimaryOption = new(value); } }

        /// <summary>
        /// Used to track the state of DecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DecimalPlacesOption { get; private set; }

        /// <summary>
        /// Supports 0-16 decimals.
        /// </summary>
        /// <value>Supports 0-16 decimals.</value>
        /* <example>2</example> */
        [JsonPropertyName("decimal_places")]
        public int? DecimalPlaces { get { return this.DecimalPlacesOption; } set { this.DecimalPlacesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CurrencyStore {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  DecimalPlaces: ").Append(DecimalPlaces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CurrencyStore" />
    /// </summary>
    public class CurrencyStoreJsonConverter : JsonConverter<CurrencyStore>
    {
        /// <summary>
        /// Deserializes json to <see cref="CurrencyStore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CurrencyStore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<string?> name = default;
            Option<string?> symbol = default;
            Option<bool?> enabled = default;
            Option<bool?> primary = default;
            Option<int?> decimalPlaces = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "symbol":
                            symbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "enabled":
                            enabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "primary":
                            primary = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "decimal_places":
                            decimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!code.IsSet)
                throw new ArgumentException("Property is required for class CurrencyStore.", nameof(code));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class CurrencyStore.", nameof(name));

            if (!symbol.IsSet)
                throw new ArgumentException("Property is required for class CurrencyStore.", nameof(symbol));

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class CurrencyStore.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CurrencyStore.");

            if (symbol.IsSet && symbol.Value == null)
                throw new ArgumentNullException(nameof(symbol), "Property is not nullable for class CurrencyStore.");

            if (enabled.IsSet && enabled.Value == null)
                throw new ArgumentNullException(nameof(enabled), "Property is not nullable for class CurrencyStore.");

            if (primary.IsSet && primary.Value == null)
                throw new ArgumentNullException(nameof(primary), "Property is not nullable for class CurrencyStore.");

            if (decimalPlaces.IsSet && decimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(decimalPlaces), "Property is not nullable for class CurrencyStore.");

            return new CurrencyStore(code.Value!, name.Value!, symbol.Value!, enabled, primary, decimalPlaces);
        }

        /// <summary>
        /// Serializes a <see cref="CurrencyStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currencyStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CurrencyStore currencyStore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, currencyStore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CurrencyStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currencyStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CurrencyStore currencyStore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (currencyStore.Code == null)
                throw new ArgumentNullException(nameof(currencyStore.Code), "Property is required for class CurrencyStore.");

            if (currencyStore.Name == null)
                throw new ArgumentNullException(nameof(currencyStore.Name), "Property is required for class CurrencyStore.");

            if (currencyStore.Symbol == null)
                throw new ArgumentNullException(nameof(currencyStore.Symbol), "Property is required for class CurrencyStore.");

            writer.WriteString("code", currencyStore.Code);

            writer.WriteString("name", currencyStore.Name);

            writer.WriteString("symbol", currencyStore.Symbol);

            if (currencyStore.EnabledOption.IsSet)
                writer.WriteBoolean("enabled", currencyStore.EnabledOption.Value!.Value);

            if (currencyStore.PrimaryOption.IsSet)
                writer.WriteBoolean("primary", currencyStore.PrimaryOption.Value!.Value);

            if (currencyStore.DecimalPlacesOption.IsSet)
                writer.WriteNumber("decimal_places", currencyStore.DecimalPlacesOption.Value!.Value);
        }
    }
}
