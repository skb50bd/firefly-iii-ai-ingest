// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// UserGroupReadAttributes
    /// </summary>
    public partial class UserGroupReadAttributes : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGroupReadAttributes" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="inUse">Is this user group (&#39;financial administration&#39;) currently the active administration?</param>
        /// <param name="canSeeMembers">Can the current user see the members of this user group?</param>
        /// <param name="title">Title of the user group. By default, it is the same as the user&#39;s email address.</param>
        /// <param name="primaryCurrencyId">Returns the primary currency ID of the user group.</param>
        /// <param name="primaryCurrencyCode">Returns the primary currency code of the user group.</param>
        /// <param name="primaryCurrencySymbol">Returns the primary currency symbol of the user group.</param>
        /// <param name="primaryCurrencyDecimalPlaces">Returns the primary currency decimal places of the user group.</param>
        /// <param name="members">members</param>
        [JsonConstructor]
        public UserGroupReadAttributes(Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default, Option<bool?> inUse = default, Option<bool?> canSeeMembers = default, Option<string?> title = default, Option<string?> primaryCurrencyId = default, Option<string?> primaryCurrencyCode = default, Option<string?> primaryCurrencySymbol = default, Option<int?> primaryCurrencyDecimalPlaces = default, Option<List<UserGroupReadMembers>?> members = default)
        {
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            InUseOption = inUse;
            CanSeeMembersOption = canSeeMembers;
            TitleOption = title;
            PrimaryCurrencyIdOption = primaryCurrencyId;
            PrimaryCurrencyCodeOption = primaryCurrencyCode;
            PrimaryCurrencySymbolOption = primaryCurrencySymbol;
            PrimaryCurrencyDecimalPlacesOption = primaryCurrencyDecimalPlaces;
            MembersOption = members;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } }

        /// <summary>
        /// Used to track the state of InUse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InUseOption { get; }

        /// <summary>
        /// Is this user group (&#39;financial administration&#39;) currently the active administration?
        /// </summary>
        /// <value>Is this user group (&#39;financial administration&#39;) currently the active administration?</value>
        /* <example>false</example> */
        [JsonPropertyName("in_use")]
        public bool? InUse { get { return this.InUseOption; } }

        /// <summary>
        /// Used to track the state of CanSeeMembers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CanSeeMembersOption { get; }

        /// <summary>
        /// Can the current user see the members of this user group?
        /// </summary>
        /// <value>Can the current user see the members of this user group?</value>
        /* <example>true</example> */
        [JsonPropertyName("can_see_members")]
        public bool? CanSeeMembers { get { return this.CanSeeMembersOption; } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Title of the user group. By default, it is the same as the user&#39;s email address.
        /// </summary>
        /// <value>Title of the user group. By default, it is the same as the user&#39;s email address.</value>
        /* <example>demo@firefly</example> */
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyIdOption { get; }

        /// <summary>
        /// Returns the primary currency ID of the user group.
        /// </summary>
        /// <value>Returns the primary currency ID of the user group.</value>
        /* <example>12</example> */
        [JsonPropertyName("primary_currency_id")]
        public string? PrimaryCurrencyId { get { return this.PrimaryCurrencyIdOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyCodeOption { get; private set; }

        /// <summary>
        /// Returns the primary currency code of the user group.
        /// </summary>
        /// <value>Returns the primary currency code of the user group.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("primary_currency_code")]
        public string? PrimaryCurrencyCode { get { return this.PrimaryCurrencyCodeOption; } set { this.PrimaryCurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencySymbolOption { get; }

        /// <summary>
        /// Returns the primary currency symbol of the user group.
        /// </summary>
        /// <value>Returns the primary currency symbol of the user group.</value>
        /* <example>$</example> */
        [JsonPropertyName("primary_currency_symbol")]
        public string? PrimaryCurrencySymbol { get { return this.PrimaryCurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PrimaryCurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// Returns the primary currency decimal places of the user group.
        /// </summary>
        /// <value>Returns the primary currency decimal places of the user group.</value>
        /* <example>2</example> */
        [JsonPropertyName("primary_currency_decimal_places")]
        public int? PrimaryCurrencyDecimalPlaces { get { return this.PrimaryCurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of Members
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<UserGroupReadMembers>?> MembersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [JsonPropertyName("members")]
        public List<UserGroupReadMembers>? Members { get { return this.MembersOption; } set { this.MembersOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserGroupReadAttributes {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  InUse: ").Append(InUse).Append("\n");
            sb.Append("  CanSeeMembers: ").Append(CanSeeMembers).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  PrimaryCurrencyId: ").Append(PrimaryCurrencyId).Append("\n");
            sb.Append("  PrimaryCurrencyCode: ").Append(PrimaryCurrencyCode).Append("\n");
            sb.Append("  PrimaryCurrencySymbol: ").Append(PrimaryCurrencySymbol).Append("\n");
            sb.Append("  PrimaryCurrencyDecimalPlaces: ").Append(PrimaryCurrencyDecimalPlaces).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserGroupReadAttributes" />
    /// </summary>
    public class UserGroupReadAttributesJsonConverter : JsonConverter<UserGroupReadAttributes>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="UserGroupReadAttributes" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserGroupReadAttributes Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<bool?> inUse = default;
            Option<bool?> canSeeMembers = default;
            Option<string?> title = default;
            Option<string?> primaryCurrencyId = default;
            Option<string?> primaryCurrencyCode = default;
            Option<string?> primaryCurrencySymbol = default;
            Option<int?> primaryCurrencyDecimalPlaces = default;
            Option<List<UserGroupReadMembers>?> members = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "in_use":
                            inUse = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "can_see_members":
                            canSeeMembers = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_id":
                            primaryCurrencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_code":
                            primaryCurrencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_symbol":
                            primaryCurrencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_decimal_places":
                            primaryCurrencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "members":
                            members = new Option<List<UserGroupReadMembers>?>(JsonSerializer.Deserialize<List<UserGroupReadMembers>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class UserGroupReadAttributes.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class UserGroupReadAttributes.");

            if (inUse.IsSet && inUse.Value == null)
                throw new ArgumentNullException(nameof(inUse), "Property is not nullable for class UserGroupReadAttributes.");

            if (canSeeMembers.IsSet && canSeeMembers.Value == null)
                throw new ArgumentNullException(nameof(canSeeMembers), "Property is not nullable for class UserGroupReadAttributes.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class UserGroupReadAttributes.");

            if (primaryCurrencyId.IsSet && primaryCurrencyId.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyId), "Property is not nullable for class UserGroupReadAttributes.");

            if (primaryCurrencyCode.IsSet && primaryCurrencyCode.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyCode), "Property is not nullable for class UserGroupReadAttributes.");

            if (primaryCurrencySymbol.IsSet && primaryCurrencySymbol.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencySymbol), "Property is not nullable for class UserGroupReadAttributes.");

            if (primaryCurrencyDecimalPlaces.IsSet && primaryCurrencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyDecimalPlaces), "Property is not nullable for class UserGroupReadAttributes.");

            if (members.IsSet && members.Value == null)
                throw new ArgumentNullException(nameof(members), "Property is not nullable for class UserGroupReadAttributes.");

            return new UserGroupReadAttributes(createdAt, updatedAt, inUse, canSeeMembers, title, primaryCurrencyId, primaryCurrencyCode, primaryCurrencySymbol, primaryCurrencyDecimalPlaces, members);
        }

        /// <summary>
        /// Serializes a <see cref="UserGroupReadAttributes" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userGroupReadAttributes"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserGroupReadAttributes userGroupReadAttributes, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userGroupReadAttributes, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserGroupReadAttributes" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userGroupReadAttributes"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserGroupReadAttributes userGroupReadAttributes, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userGroupReadAttributes.TitleOption.IsSet && userGroupReadAttributes.Title == null)
                throw new ArgumentNullException(nameof(userGroupReadAttributes.Title), "Property is required for class UserGroupReadAttributes.");

            if (userGroupReadAttributes.PrimaryCurrencyIdOption.IsSet && userGroupReadAttributes.PrimaryCurrencyId == null)
                throw new ArgumentNullException(nameof(userGroupReadAttributes.PrimaryCurrencyId), "Property is required for class UserGroupReadAttributes.");

            if (userGroupReadAttributes.PrimaryCurrencyCodeOption.IsSet && userGroupReadAttributes.PrimaryCurrencyCode == null)
                throw new ArgumentNullException(nameof(userGroupReadAttributes.PrimaryCurrencyCode), "Property is required for class UserGroupReadAttributes.");

            if (userGroupReadAttributes.PrimaryCurrencySymbolOption.IsSet && userGroupReadAttributes.PrimaryCurrencySymbol == null)
                throw new ArgumentNullException(nameof(userGroupReadAttributes.PrimaryCurrencySymbol), "Property is required for class UserGroupReadAttributes.");

            if (userGroupReadAttributes.MembersOption.IsSet && userGroupReadAttributes.Members == null)
                throw new ArgumentNullException(nameof(userGroupReadAttributes.Members), "Property is required for class UserGroupReadAttributes.");

            if (userGroupReadAttributes.CreatedAtOption.IsSet)
                writer.WriteString("created_at", userGroupReadAttributes.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (userGroupReadAttributes.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", userGroupReadAttributes.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));

            if (userGroupReadAttributes.InUseOption.IsSet)
                writer.WriteBoolean("in_use", userGroupReadAttributes.InUseOption.Value!.Value);

            if (userGroupReadAttributes.CanSeeMembersOption.IsSet)
                writer.WriteBoolean("can_see_members", userGroupReadAttributes.CanSeeMembersOption.Value!.Value);

            if (userGroupReadAttributes.TitleOption.IsSet)
                writer.WriteString("title", userGroupReadAttributes.Title);

            if (userGroupReadAttributes.PrimaryCurrencyIdOption.IsSet)
                writer.WriteString("primary_currency_id", userGroupReadAttributes.PrimaryCurrencyId);

            if (userGroupReadAttributes.PrimaryCurrencyCodeOption.IsSet)
                writer.WriteString("primary_currency_code", userGroupReadAttributes.PrimaryCurrencyCode);

            if (userGroupReadAttributes.PrimaryCurrencySymbolOption.IsSet)
                writer.WriteString("primary_currency_symbol", userGroupReadAttributes.PrimaryCurrencySymbol);

            if (userGroupReadAttributes.PrimaryCurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("primary_currency_decimal_places", userGroupReadAttributes.PrimaryCurrencyDecimalPlacesOption.Value!.Value);

            if (userGroupReadAttributes.MembersOption.IsSet)
            {
                writer.WritePropertyName("members");
                JsonSerializer.Serialize(writer, userGroupReadAttributes.Members, jsonSerializerOptions);
            }
        }
    }
}
