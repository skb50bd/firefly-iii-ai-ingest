// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// Defines DataDestroyObject
    /// </summary>
    public enum DataDestroyObject
    {
        /// <summary>
        /// Enum NotAssetsLiabilities for value: not_assets_liabilities
        /// </summary>
        NotAssetsLiabilities = 1,

        /// <summary>
        /// Enum Budgets for value: budgets
        /// </summary>
        Budgets = 2,

        /// <summary>
        /// Enum Bills for value: bills
        /// </summary>
        Bills = 3,

        /// <summary>
        /// Enum PiggyBanks for value: piggy_banks
        /// </summary>
        PiggyBanks = 4,

        /// <summary>
        /// Enum Rules for value: rules
        /// </summary>
        Rules = 5,

        /// <summary>
        /// Enum Recurring for value: recurring
        /// </summary>
        Recurring = 6,

        /// <summary>
        /// Enum Categories for value: categories
        /// </summary>
        Categories = 7,

        /// <summary>
        /// Enum Tags for value: tags
        /// </summary>
        Tags = 8,

        /// <summary>
        /// Enum ObjectGroups for value: object_groups
        /// </summary>
        ObjectGroups = 9,

        /// <summary>
        /// Enum Accounts for value: accounts
        /// </summary>
        Accounts = 10,

        /// <summary>
        /// Enum AssetAccounts for value: asset_accounts
        /// </summary>
        AssetAccounts = 11,

        /// <summary>
        /// Enum ExpenseAccounts for value: expense_accounts
        /// </summary>
        ExpenseAccounts = 12,

        /// <summary>
        /// Enum RevenueAccounts for value: revenue_accounts
        /// </summary>
        RevenueAccounts = 13,

        /// <summary>
        /// Enum Liabilities for value: liabilities
        /// </summary>
        Liabilities = 14,

        /// <summary>
        /// Enum Transactions for value: transactions
        /// </summary>
        Transactions = 15,

        /// <summary>
        /// Enum Withdrawals for value: withdrawals
        /// </summary>
        Withdrawals = 16,

        /// <summary>
        /// Enum Deposits for value: deposits
        /// </summary>
        Deposits = 17,

        /// <summary>
        /// Enum Transfers for value: transfers
        /// </summary>
        Transfers = 18
    }

    /// <summary>
    /// Converts <see cref="DataDestroyObject"/> to and from the JSON value
    /// </summary>
    public static class DataDestroyObjectValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="DataDestroyObject"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DataDestroyObject FromString(string value)
        {
            if (value.Equals("not_assets_liabilities"))
                return DataDestroyObject.NotAssetsLiabilities;

            if (value.Equals("budgets"))
                return DataDestroyObject.Budgets;

            if (value.Equals("bills"))
                return DataDestroyObject.Bills;

            if (value.Equals("piggy_banks"))
                return DataDestroyObject.PiggyBanks;

            if (value.Equals("rules"))
                return DataDestroyObject.Rules;

            if (value.Equals("recurring"))
                return DataDestroyObject.Recurring;

            if (value.Equals("categories"))
                return DataDestroyObject.Categories;

            if (value.Equals("tags"))
                return DataDestroyObject.Tags;

            if (value.Equals("object_groups"))
                return DataDestroyObject.ObjectGroups;

            if (value.Equals("accounts"))
                return DataDestroyObject.Accounts;

            if (value.Equals("asset_accounts"))
                return DataDestroyObject.AssetAccounts;

            if (value.Equals("expense_accounts"))
                return DataDestroyObject.ExpenseAccounts;

            if (value.Equals("revenue_accounts"))
                return DataDestroyObject.RevenueAccounts;

            if (value.Equals("liabilities"))
                return DataDestroyObject.Liabilities;

            if (value.Equals("transactions"))
                return DataDestroyObject.Transactions;

            if (value.Equals("withdrawals"))
                return DataDestroyObject.Withdrawals;

            if (value.Equals("deposits"))
                return DataDestroyObject.Deposits;

            if (value.Equals("transfers"))
                return DataDestroyObject.Transfers;

            throw new NotImplementedException($"Could not convert value to type DataDestroyObject: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="DataDestroyObject"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DataDestroyObject? FromStringOrDefault(string value)
        {
            if (value.Equals("not_assets_liabilities"))
                return DataDestroyObject.NotAssetsLiabilities;

            if (value.Equals("budgets"))
                return DataDestroyObject.Budgets;

            if (value.Equals("bills"))
                return DataDestroyObject.Bills;

            if (value.Equals("piggy_banks"))
                return DataDestroyObject.PiggyBanks;

            if (value.Equals("rules"))
                return DataDestroyObject.Rules;

            if (value.Equals("recurring"))
                return DataDestroyObject.Recurring;

            if (value.Equals("categories"))
                return DataDestroyObject.Categories;

            if (value.Equals("tags"))
                return DataDestroyObject.Tags;

            if (value.Equals("object_groups"))
                return DataDestroyObject.ObjectGroups;

            if (value.Equals("accounts"))
                return DataDestroyObject.Accounts;

            if (value.Equals("asset_accounts"))
                return DataDestroyObject.AssetAccounts;

            if (value.Equals("expense_accounts"))
                return DataDestroyObject.ExpenseAccounts;

            if (value.Equals("revenue_accounts"))
                return DataDestroyObject.RevenueAccounts;

            if (value.Equals("liabilities"))
                return DataDestroyObject.Liabilities;

            if (value.Equals("transactions"))
                return DataDestroyObject.Transactions;

            if (value.Equals("withdrawals"))
                return DataDestroyObject.Withdrawals;

            if (value.Equals("deposits"))
                return DataDestroyObject.Deposits;

            if (value.Equals("transfers"))
                return DataDestroyObject.Transfers;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DataDestroyObject"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(DataDestroyObject value)
        {
            if (value == DataDestroyObject.NotAssetsLiabilities)
                return "not_assets_liabilities";

            if (value == DataDestroyObject.Budgets)
                return "budgets";

            if (value == DataDestroyObject.Bills)
                return "bills";

            if (value == DataDestroyObject.PiggyBanks)
                return "piggy_banks";

            if (value == DataDestroyObject.Rules)
                return "rules";

            if (value == DataDestroyObject.Recurring)
                return "recurring";

            if (value == DataDestroyObject.Categories)
                return "categories";

            if (value == DataDestroyObject.Tags)
                return "tags";

            if (value == DataDestroyObject.ObjectGroups)
                return "object_groups";

            if (value == DataDestroyObject.Accounts)
                return "accounts";

            if (value == DataDestroyObject.AssetAccounts)
                return "asset_accounts";

            if (value == DataDestroyObject.ExpenseAccounts)
                return "expense_accounts";

            if (value == DataDestroyObject.RevenueAccounts)
                return "revenue_accounts";

            if (value == DataDestroyObject.Liabilities)
                return "liabilities";

            if (value == DataDestroyObject.Transactions)
                return "transactions";

            if (value == DataDestroyObject.Withdrawals)
                return "withdrawals";

            if (value == DataDestroyObject.Deposits)
                return "deposits";

            if (value == DataDestroyObject.Transfers)
                return "transfers";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DataDestroyObject"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class DataDestroyObjectJsonConverter : JsonConverter<DataDestroyObject>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DataDestroyObject Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DataDestroyObject? result = rawValue == null
                ? null
                : DataDestroyObjectValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DataDestroyObject to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dataDestroyObject"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DataDestroyObject dataDestroyObject, JsonSerializerOptions options)
        {
            writer.WriteStringValue(DataDestroyObjectValueConverter.ToJsonValue(dataDestroyObject).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DataDestroyObject"/>
    /// </summary>
    public class DataDestroyObjectNullableJsonConverter : JsonConverter<DataDestroyObject?>
    {
        /// <summary>
        /// Returns a DataDestroyObject from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DataDestroyObject? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DataDestroyObject? result = rawValue == null
                ? null
                : DataDestroyObjectValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DataDestroyObject to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dataDestroyObject"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DataDestroyObject? dataDestroyObject, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dataDestroyObject.HasValue ? DataDestroyObjectValueConverter.ToJsonValue(dataDestroyObject.Value).ToString() : "null");
        }
    }
}
