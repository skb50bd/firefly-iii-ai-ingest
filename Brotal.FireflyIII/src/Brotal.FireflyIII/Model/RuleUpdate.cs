// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// RuleUpdate
    /// </summary>
    public partial class RuleUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleUpdate" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="ruleGroupId">ID of the rule group under which the rule must be stored. Either this field or rule_group_title is mandatory.</param>
        /// <param name="order">order</param>
        /// <param name="trigger">trigger</param>
        /// <param name="active">Whether or not the rule is even active. Default is true. (default to true)</param>
        /// <param name="strict">If the rule is set to be strict, ALL triggers must hit in order for the rule to fire. Otherwise, just one is enough. Default value is true.</param>
        /// <param name="stopProcessing">If this value is true and the rule is triggered, other rules  after this one in the group will be skipped. Default value is false. (default to false)</param>
        /// <param name="triggers">triggers</param>
        /// <param name="actions">actions</param>
        [JsonConstructor]
        public RuleUpdate(Option<string?> title = default, Option<string?> description = default, Option<string?> ruleGroupId = default, Option<int?> order = default, Option<RuleTriggerType?> trigger = default, Option<bool?> active = default, Option<bool?> strict = default, Option<bool?> stopProcessing = default, Option<List<RuleTriggerUpdate>?> triggers = default, Option<List<RuleActionUpdate>?> actions = default)
        {
            TitleOption = title;
            DescriptionOption = description;
            RuleGroupIdOption = ruleGroupId;
            OrderOption = order;
            TriggerOption = trigger;
            ActiveOption = active;
            StrictOption = strict;
            StopProcessingOption = stopProcessing;
            TriggersOption = triggers;
            ActionsOption = actions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Trigger
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RuleTriggerType?> TriggerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Trigger
        /// </summary>
        [JsonPropertyName("trigger")]
        public RuleTriggerType? Trigger { get { return this.TriggerOption; } set { this.TriggerOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        /* <example>First rule title.</example> */
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /* <example>First rule description</example> */
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of RuleGroupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RuleGroupIdOption { get; private set; }

        /// <summary>
        /// ID of the rule group under which the rule must be stored. Either this field or rule_group_title is mandatory.
        /// </summary>
        /// <value>ID of the rule group under which the rule must be stored. Either this field or rule_group_title is mandatory.</value>
        /* <example>81</example> */
        [JsonPropertyName("rule_group_id")]
        public string? RuleGroupId { get { return this.RuleGroupIdOption; } set { this.RuleGroupIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Order
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OrderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        /* <example>5</example> */
        [JsonPropertyName("order")]
        public int? Order { get { return this.OrderOption; } set { this.OrderOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// Whether or not the rule is even active. Default is true.
        /// </summary>
        /// <value>Whether or not the rule is even active. Default is true.</value>
        /* <example>true</example> */
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Strict
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> StrictOption { get; private set; }

        /// <summary>
        /// If the rule is set to be strict, ALL triggers must hit in order for the rule to fire. Otherwise, just one is enough. Default value is true.
        /// </summary>
        /// <value>If the rule is set to be strict, ALL triggers must hit in order for the rule to fire. Otherwise, just one is enough. Default value is true.</value>
        /* <example>true</example> */
        [JsonPropertyName("strict")]
        public bool? Strict { get { return this.StrictOption; } set { this.StrictOption = new(value); } }

        /// <summary>
        /// Used to track the state of StopProcessing
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> StopProcessingOption { get; private set; }

        /// <summary>
        /// If this value is true and the rule is triggered, other rules  after this one in the group will be skipped. Default value is false.
        /// </summary>
        /// <value>If this value is true and the rule is triggered, other rules  after this one in the group will be skipped. Default value is false.</value>
        /* <example>false</example> */
        [JsonPropertyName("stop_processing")]
        public bool? StopProcessing { get { return this.StopProcessingOption; } set { this.StopProcessingOption = new(value); } }

        /// <summary>
        /// Used to track the state of Triggers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<RuleTriggerUpdate>?> TriggersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Triggers
        /// </summary>
        [JsonPropertyName("triggers")]
        public List<RuleTriggerUpdate>? Triggers { get { return this.TriggersOption; } set { this.TriggersOption = new(value); } }

        /// <summary>
        /// Used to track the state of Actions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<RuleActionUpdate>?> ActionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [JsonPropertyName("actions")]
        public List<RuleActionUpdate>? Actions { get { return this.ActionsOption; } set { this.ActionsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RuleUpdate {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RuleGroupId: ").Append(RuleGroupId).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Strict: ").Append(Strict).Append("\n");
            sb.Append("  StopProcessing: ").Append(StopProcessing).Append("\n");
            sb.Append("  Triggers: ").Append(Triggers).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RuleUpdate" />
    /// </summary>
    public class RuleUpdateJsonConverter : JsonConverter<RuleUpdate>
    {
        /// <summary>
        /// Deserializes json to <see cref="RuleUpdate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RuleUpdate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<string?> description = default;
            Option<string?> ruleGroupId = default;
            Option<int?> order = default;
            Option<RuleTriggerType?> trigger = default;
            Option<bool?> active = default;
            Option<bool?> strict = default;
            Option<bool?> stopProcessing = default;
            Option<List<RuleTriggerUpdate>?> triggers = default;
            Option<List<RuleActionUpdate>?> actions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "rule_group_id":
                            ruleGroupId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "order":
                            order = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "trigger":
                            string? triggerRawValue = utf8JsonReader.GetString();
                            if (triggerRawValue != null)
                                trigger = new Option<RuleTriggerType?>(RuleTriggerTypeValueConverter.FromStringOrDefault(triggerRawValue));
                            break;
                        case "active":
                            active = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "strict":
                            strict = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "stop_processing":
                            stopProcessing = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "triggers":
                            triggers = new Option<List<RuleTriggerUpdate>?>(JsonSerializer.Deserialize<List<RuleTriggerUpdate>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "actions":
                            actions = new Option<List<RuleActionUpdate>?>(JsonSerializer.Deserialize<List<RuleActionUpdate>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class RuleUpdate.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class RuleUpdate.");

            if (ruleGroupId.IsSet && ruleGroupId.Value == null)
                throw new ArgumentNullException(nameof(ruleGroupId), "Property is not nullable for class RuleUpdate.");

            if (order.IsSet && order.Value == null)
                throw new ArgumentNullException(nameof(order), "Property is not nullable for class RuleUpdate.");

            if (trigger.IsSet && trigger.Value == null)
                throw new ArgumentNullException(nameof(trigger), "Property is not nullable for class RuleUpdate.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class RuleUpdate.");

            if (strict.IsSet && strict.Value == null)
                throw new ArgumentNullException(nameof(strict), "Property is not nullable for class RuleUpdate.");

            if (stopProcessing.IsSet && stopProcessing.Value == null)
                throw new ArgumentNullException(nameof(stopProcessing), "Property is not nullable for class RuleUpdate.");

            if (triggers.IsSet && triggers.Value == null)
                throw new ArgumentNullException(nameof(triggers), "Property is not nullable for class RuleUpdate.");

            if (actions.IsSet && actions.Value == null)
                throw new ArgumentNullException(nameof(actions), "Property is not nullable for class RuleUpdate.");

            return new RuleUpdate(title, description, ruleGroupId, order, trigger, active, strict, stopProcessing, triggers, actions);
        }

        /// <summary>
        /// Serializes a <see cref="RuleUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ruleUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RuleUpdate ruleUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, ruleUpdate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RuleUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ruleUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RuleUpdate ruleUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (ruleUpdate.TitleOption.IsSet && ruleUpdate.Title == null)
                throw new ArgumentNullException(nameof(ruleUpdate.Title), "Property is required for class RuleUpdate.");

            if (ruleUpdate.DescriptionOption.IsSet && ruleUpdate.Description == null)
                throw new ArgumentNullException(nameof(ruleUpdate.Description), "Property is required for class RuleUpdate.");

            if (ruleUpdate.RuleGroupIdOption.IsSet && ruleUpdate.RuleGroupId == null)
                throw new ArgumentNullException(nameof(ruleUpdate.RuleGroupId), "Property is required for class RuleUpdate.");

            if (ruleUpdate.TriggersOption.IsSet && ruleUpdate.Triggers == null)
                throw new ArgumentNullException(nameof(ruleUpdate.Triggers), "Property is required for class RuleUpdate.");

            if (ruleUpdate.ActionsOption.IsSet && ruleUpdate.Actions == null)
                throw new ArgumentNullException(nameof(ruleUpdate.Actions), "Property is required for class RuleUpdate.");

            if (ruleUpdate.TitleOption.IsSet)
                writer.WriteString("title", ruleUpdate.Title);

            if (ruleUpdate.DescriptionOption.IsSet)
                writer.WriteString("description", ruleUpdate.Description);

            if (ruleUpdate.RuleGroupIdOption.IsSet)
                writer.WriteString("rule_group_id", ruleUpdate.RuleGroupId);

            if (ruleUpdate.OrderOption.IsSet)
                writer.WriteNumber("order", ruleUpdate.OrderOption.Value!.Value);

            if (ruleUpdate.TriggerOption.IsSet)
            {
                var triggerRawValue = RuleTriggerTypeValueConverter.ToJsonValue(ruleUpdate.Trigger!.Value);
                writer.WriteString("trigger", triggerRawValue);
            }
            if (ruleUpdate.ActiveOption.IsSet)
                writer.WriteBoolean("active", ruleUpdate.ActiveOption.Value!.Value);

            if (ruleUpdate.StrictOption.IsSet)
                writer.WriteBoolean("strict", ruleUpdate.StrictOption.Value!.Value);

            if (ruleUpdate.StopProcessingOption.IsSet)
                writer.WriteBoolean("stop_processing", ruleUpdate.StopProcessingOption.Value!.Value);

            if (ruleUpdate.TriggersOption.IsSet)
            {
                writer.WritePropertyName("triggers");
                JsonSerializer.Serialize(writer, ruleUpdate.Triggers, jsonSerializerOptions);
            }
            if (ruleUpdate.ActionsOption.IsSet)
            {
                writer.WritePropertyName("actions");
                JsonSerializer.Serialize(writer, ruleUpdate.Actions, jsonSerializerOptions);
            }
        }
    }
}
