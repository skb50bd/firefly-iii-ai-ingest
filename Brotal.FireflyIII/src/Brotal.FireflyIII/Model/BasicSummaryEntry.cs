// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// BasicSummaryEntry
    /// </summary>
    public partial class BasicSummaryEntry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicSummaryEntry" /> class.
        /// </summary>
        /// <param name="key">This is a reference to the type of info shared, not influenced by translations or user preferences. The EUR value is a reference to the currency code. Possibilities are: balance-in-ABC, spent-in-ABC, earned-in-ABC, bills-paid-in-ABC, bills-unpaid-in-ABC, left-to-spend-in-ABC and net-worth-in-ABC.</param>
        /// <param name="title">A translated title for the information shared.</param>
        /// <param name="monetaryValue">The amount as a float.</param>
        /// <param name="currencyId">The currency ID of the associated currency.</param>
        /// <param name="currencyCode">currencyCode</param>
        /// <param name="currencySymbol">currencySymbol</param>
        /// <param name="currencyDecimalPlaces">Number of decimals for the associated currency.</param>
        /// <param name="noAvailableBudgets">True if there are no available budgets available.</param>
        /// <param name="valueParsed">The amount formatted according to the users locale</param>
        /// <param name="localIcon">Reference to a font-awesome icon without the fa- part.</param>
        /// <param name="subTitle">A short explanation of the amounts origin. Already formatted according to the locale of the user or translated, if relevant.</param>
        [JsonConstructor]
        public BasicSummaryEntry(Option<string?> key = default, Option<string?> title = default, Option<double?> monetaryValue = default, Option<string?> currencyId = default, Option<string?> currencyCode = default, Option<string?> currencySymbol = default, Option<int?> currencyDecimalPlaces = default, Option<bool?> noAvailableBudgets = default, Option<string?> valueParsed = default, Option<string?> localIcon = default, Option<string?> subTitle = default)
        {
            KeyOption = key;
            TitleOption = title;
            MonetaryValueOption = monetaryValue;
            CurrencyIdOption = currencyId;
            CurrencyCodeOption = currencyCode;
            CurrencySymbolOption = currencySymbol;
            CurrencyDecimalPlacesOption = currencyDecimalPlaces;
            NoAvailableBudgetsOption = noAvailableBudgets;
            ValueParsedOption = valueParsed;
            LocalIconOption = localIcon;
            SubTitleOption = subTitle;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Key
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeyOption { get; private set; }

        /// <summary>
        /// This is a reference to the type of info shared, not influenced by translations or user preferences. The EUR value is a reference to the currency code. Possibilities are: balance-in-ABC, spent-in-ABC, earned-in-ABC, bills-paid-in-ABC, bills-unpaid-in-ABC, left-to-spend-in-ABC and net-worth-in-ABC.
        /// </summary>
        /// <value>This is a reference to the type of info shared, not influenced by translations or user preferences. The EUR value is a reference to the currency code. Possibilities are: balance-in-ABC, spent-in-ABC, earned-in-ABC, bills-paid-in-ABC, bills-unpaid-in-ABC, left-to-spend-in-ABC and net-worth-in-ABC.</value>
        /* <example>balance-in-EUR</example> */
        [JsonPropertyName("key")]
        public string? Key { get { return this.KeyOption; } set { this.KeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// A translated title for the information shared.
        /// </summary>
        /// <value>A translated title for the information shared.</value>
        /* <example>Balance ($)</example> */
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of MonetaryValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> MonetaryValueOption { get; private set; }

        /// <summary>
        /// The amount as a float.
        /// </summary>
        /// <value>The amount as a float.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("monetary_value")]
        public double? MonetaryValue { get { return this.MonetaryValueOption; } set { this.MonetaryValueOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyIdOption { get; private set; }

        /// <summary>
        /// The currency ID of the associated currency.
        /// </summary>
        /// <value>The currency ID of the associated currency.</value>
        /* <example>5</example> */
        [JsonPropertyName("currency_id")]
        public string? CurrencyId { get { return this.CurrencyIdOption; } set { this.CurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        /* <example>EUR</example> */
        [JsonPropertyName("currency_code")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencySymbolOption { get; private set; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        /* <example>$</example> */
        [JsonPropertyName("currency_symbol")]
        public string? CurrencySymbol { get { return this.CurrencySymbolOption; } set { this.CurrencySymbolOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CurrencyDecimalPlacesOption { get; private set; }

        /// <summary>
        /// Number of decimals for the associated currency.
        /// </summary>
        /// <value>Number of decimals for the associated currency.</value>
        /* <example>2</example> */
        [JsonPropertyName("currency_decimal_places")]
        public int? CurrencyDecimalPlaces { get { return this.CurrencyDecimalPlacesOption; } set { this.CurrencyDecimalPlacesOption = new(value); } }

        /// <summary>
        /// Used to track the state of NoAvailableBudgets
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> NoAvailableBudgetsOption { get; private set; }

        /// <summary>
        /// True if there are no available budgets available.
        /// </summary>
        /// <value>True if there are no available budgets available.</value>
        /* <example>false</example> */
        [JsonPropertyName("no_available_budgets")]
        public bool? NoAvailableBudgets { get { return this.NoAvailableBudgetsOption; } set { this.NoAvailableBudgetsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValueParsed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueParsedOption { get; private set; }

        /// <summary>
        /// The amount formatted according to the users locale
        /// </summary>
        /// <value>The amount formatted according to the users locale</value>
        /* <example>$ 12.45</example> */
        [JsonPropertyName("value_parsed")]
        public string? ValueParsed { get { return this.ValueParsedOption; } set { this.ValueParsedOption = new(value); } }

        /// <summary>
        /// Used to track the state of LocalIcon
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocalIconOption { get; private set; }

        /// <summary>
        /// Reference to a font-awesome icon without the fa- part.
        /// </summary>
        /// <value>Reference to a font-awesome icon without the fa- part.</value>
        /* <example>balance-scale</example> */
        [JsonPropertyName("local_icon")]
        public string? LocalIcon { get { return this.LocalIconOption; } set { this.LocalIconOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubTitleOption { get; private set; }

        /// <summary>
        /// A short explanation of the amounts origin. Already formatted according to the locale of the user or translated, if relevant.
        /// </summary>
        /// <value>A short explanation of the amounts origin. Already formatted according to the locale of the user or translated, if relevant.</value>
        /* <example>$20 + $-40</example> */
        [JsonPropertyName("sub_title")]
        public string? SubTitle { get { return this.SubTitleOption; } set { this.SubTitleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BasicSummaryEntry {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  MonetaryValue: ").Append(MonetaryValue).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  CurrencyDecimalPlaces: ").Append(CurrencyDecimalPlaces).Append("\n");
            sb.Append("  NoAvailableBudgets: ").Append(NoAvailableBudgets).Append("\n");
            sb.Append("  ValueParsed: ").Append(ValueParsed).Append("\n");
            sb.Append("  LocalIcon: ").Append(LocalIcon).Append("\n");
            sb.Append("  SubTitle: ").Append(SubTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BasicSummaryEntry" />
    /// </summary>
    public class BasicSummaryEntryJsonConverter : JsonConverter<BasicSummaryEntry>
    {
        /// <summary>
        /// Deserializes json to <see cref="BasicSummaryEntry" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BasicSummaryEntry Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> key = default;
            Option<string?> title = default;
            Option<double?> monetaryValue = default;
            Option<string?> currencyId = default;
            Option<string?> currencyCode = default;
            Option<string?> currencySymbol = default;
            Option<int?> currencyDecimalPlaces = default;
            Option<bool?> noAvailableBudgets = default;
            Option<string?> valueParsed = default;
            Option<string?> localIcon = default;
            Option<string?> subTitle = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "monetary_value":
                            monetaryValue = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_symbol":
                            currencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_decimal_places":
                            currencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "no_available_budgets":
                            noAvailableBudgets = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "value_parsed":
                            valueParsed = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "local_icon":
                            localIcon = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sub_title":
                            subTitle = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class BasicSummaryEntry.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class BasicSummaryEntry.");

            if (monetaryValue.IsSet && monetaryValue.Value == null)
                throw new ArgumentNullException(nameof(monetaryValue), "Property is not nullable for class BasicSummaryEntry.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class BasicSummaryEntry.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class BasicSummaryEntry.");

            if (currencySymbol.IsSet && currencySymbol.Value == null)
                throw new ArgumentNullException(nameof(currencySymbol), "Property is not nullable for class BasicSummaryEntry.");

            if (currencyDecimalPlaces.IsSet && currencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(currencyDecimalPlaces), "Property is not nullable for class BasicSummaryEntry.");

            if (noAvailableBudgets.IsSet && noAvailableBudgets.Value == null)
                throw new ArgumentNullException(nameof(noAvailableBudgets), "Property is not nullable for class BasicSummaryEntry.");

            if (valueParsed.IsSet && valueParsed.Value == null)
                throw new ArgumentNullException(nameof(valueParsed), "Property is not nullable for class BasicSummaryEntry.");

            if (localIcon.IsSet && localIcon.Value == null)
                throw new ArgumentNullException(nameof(localIcon), "Property is not nullable for class BasicSummaryEntry.");

            if (subTitle.IsSet && subTitle.Value == null)
                throw new ArgumentNullException(nameof(subTitle), "Property is not nullable for class BasicSummaryEntry.");

            return new BasicSummaryEntry(key, title, monetaryValue, currencyId, currencyCode, currencySymbol, currencyDecimalPlaces, noAvailableBudgets, valueParsed, localIcon, subTitle);
        }

        /// <summary>
        /// Serializes a <see cref="BasicSummaryEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="basicSummaryEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BasicSummaryEntry basicSummaryEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, basicSummaryEntry, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BasicSummaryEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="basicSummaryEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BasicSummaryEntry basicSummaryEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            if (basicSummaryEntry.KeyOption.IsSet && basicSummaryEntry.Key == null)
                throw new ArgumentNullException(nameof(basicSummaryEntry.Key), "Property is required for class BasicSummaryEntry.");

            if (basicSummaryEntry.TitleOption.IsSet && basicSummaryEntry.Title == null)
                throw new ArgumentNullException(nameof(basicSummaryEntry.Title), "Property is required for class BasicSummaryEntry.");

            if (basicSummaryEntry.CurrencyIdOption.IsSet && basicSummaryEntry.CurrencyId == null)
                throw new ArgumentNullException(nameof(basicSummaryEntry.CurrencyId), "Property is required for class BasicSummaryEntry.");

            if (basicSummaryEntry.CurrencyCodeOption.IsSet && basicSummaryEntry.CurrencyCode == null)
                throw new ArgumentNullException(nameof(basicSummaryEntry.CurrencyCode), "Property is required for class BasicSummaryEntry.");

            if (basicSummaryEntry.CurrencySymbolOption.IsSet && basicSummaryEntry.CurrencySymbol == null)
                throw new ArgumentNullException(nameof(basicSummaryEntry.CurrencySymbol), "Property is required for class BasicSummaryEntry.");

            if (basicSummaryEntry.ValueParsedOption.IsSet && basicSummaryEntry.ValueParsed == null)
                throw new ArgumentNullException(nameof(basicSummaryEntry.ValueParsed), "Property is required for class BasicSummaryEntry.");

            if (basicSummaryEntry.LocalIconOption.IsSet && basicSummaryEntry.LocalIcon == null)
                throw new ArgumentNullException(nameof(basicSummaryEntry.LocalIcon), "Property is required for class BasicSummaryEntry.");

            if (basicSummaryEntry.SubTitleOption.IsSet && basicSummaryEntry.SubTitle == null)
                throw new ArgumentNullException(nameof(basicSummaryEntry.SubTitle), "Property is required for class BasicSummaryEntry.");

            if (basicSummaryEntry.KeyOption.IsSet)
                writer.WriteString("key", basicSummaryEntry.Key);

            if (basicSummaryEntry.TitleOption.IsSet)
                writer.WriteString("title", basicSummaryEntry.Title);

            if (basicSummaryEntry.MonetaryValueOption.IsSet)
                writer.WriteNumber("monetary_value", basicSummaryEntry.MonetaryValueOption.Value!.Value);

            if (basicSummaryEntry.CurrencyIdOption.IsSet)
                writer.WriteString("currency_id", basicSummaryEntry.CurrencyId);

            if (basicSummaryEntry.CurrencyCodeOption.IsSet)
                writer.WriteString("currency_code", basicSummaryEntry.CurrencyCode);

            if (basicSummaryEntry.CurrencySymbolOption.IsSet)
                writer.WriteString("currency_symbol", basicSummaryEntry.CurrencySymbol);

            if (basicSummaryEntry.CurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("currency_decimal_places", basicSummaryEntry.CurrencyDecimalPlacesOption.Value!.Value);

            if (basicSummaryEntry.NoAvailableBudgetsOption.IsSet)
                writer.WriteBoolean("no_available_budgets", basicSummaryEntry.NoAvailableBudgetsOption.Value!.Value);

            if (basicSummaryEntry.ValueParsedOption.IsSet)
                writer.WriteString("value_parsed", basicSummaryEntry.ValueParsed);

            if (basicSummaryEntry.LocalIconOption.IsSet)
                writer.WriteString("local_icon", basicSummaryEntry.LocalIcon);

            if (basicSummaryEntry.SubTitleOption.IsSet)
                writer.WriteString("sub_title", basicSummaryEntry.SubTitle);
        }
    }
}
