// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// CurrencyUpdate
    /// </summary>
    public partial class CurrencyUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyUpdate" /> class.
        /// </summary>
        /// <param name="enabled">If the currency is enabled</param>
        /// <param name="primary">If the currency must be the primary for the user. You can only submit TRUE. Submitting FALSE will not drop this currency as the primary currency, because then the system would be without one.</param>
        /// <param name="code">The currency code</param>
        /// <param name="name">The currency name</param>
        /// <param name="symbol">The currency symbol</param>
        /// <param name="decimalPlaces">How many decimals to use when displaying this currency. Between 0 and 16.</param>
        [JsonConstructor]
        public CurrencyUpdate(Option<bool?> enabled = default, Option<bool?> primary = default, Option<string?> code = default, Option<string?> name = default, Option<string?> symbol = default, Option<int?> decimalPlaces = default)
        {
            EnabledOption = enabled;
            PrimaryOption = primary;
            CodeOption = code;
            NameOption = name;
            SymbolOption = symbol;
            DecimalPlacesOption = decimalPlaces;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Enabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnabledOption { get; private set; }

        /// <summary>
        /// If the currency is enabled
        /// </summary>
        /// <value>If the currency is enabled</value>
        /* <example>true</example> */
        [JsonPropertyName("enabled")]
        public bool? Enabled { get { return this.EnabledOption; } set { this.EnabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of Primary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PrimaryOption { get; private set; }

        /// <summary>
        /// If the currency must be the primary for the user. You can only submit TRUE. Submitting FALSE will not drop this currency as the primary currency, because then the system would be without one.
        /// </summary>
        /// <value>If the currency must be the primary for the user. You can only submit TRUE. Submitting FALSE will not drop this currency as the primary currency, because then the system would be without one.</value>
        /* <example>true</example> */
        [JsonPropertyName("primary")]
        public bool? Primary { get { return this.PrimaryOption; } set { this.PrimaryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// The currency code
        /// </summary>
        /// <value>The currency code</value>
        /* <example>AMS</example> */
        [JsonPropertyName("code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The currency name
        /// </summary>
        /// <value>The currency name</value>
        /* <example>Ankh-Morpork dollar</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Symbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolOption { get; private set; }

        /// <summary>
        /// The currency symbol
        /// </summary>
        /// <value>The currency symbol</value>
        /* <example>AM$</example> */
        [JsonPropertyName("symbol")]
        public string? Symbol { get { return this.SymbolOption; } set { this.SymbolOption = new(value); } }

        /// <summary>
        /// Used to track the state of DecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DecimalPlacesOption { get; private set; }

        /// <summary>
        /// How many decimals to use when displaying this currency. Between 0 and 16.
        /// </summary>
        /// <value>How many decimals to use when displaying this currency. Between 0 and 16.</value>
        /* <example>2</example> */
        [JsonPropertyName("decimal_places")]
        public int? DecimalPlaces { get { return this.DecimalPlacesOption; } set { this.DecimalPlacesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CurrencyUpdate {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  DecimalPlaces: ").Append(DecimalPlaces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CurrencyUpdate" />
    /// </summary>
    public class CurrencyUpdateJsonConverter : JsonConverter<CurrencyUpdate>
    {
        /// <summary>
        /// Deserializes json to <see cref="CurrencyUpdate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CurrencyUpdate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> enabled = default;
            Option<bool?> primary = default;
            Option<string?> code = default;
            Option<string?> name = default;
            Option<string?> symbol = default;
            Option<int?> decimalPlaces = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "enabled":
                            enabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "primary":
                            primary = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "symbol":
                            symbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "decimal_places":
                            decimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (enabled.IsSet && enabled.Value == null)
                throw new ArgumentNullException(nameof(enabled), "Property is not nullable for class CurrencyUpdate.");

            if (primary.IsSet && primary.Value == null)
                throw new ArgumentNullException(nameof(primary), "Property is not nullable for class CurrencyUpdate.");

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class CurrencyUpdate.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CurrencyUpdate.");

            if (symbol.IsSet && symbol.Value == null)
                throw new ArgumentNullException(nameof(symbol), "Property is not nullable for class CurrencyUpdate.");

            if (decimalPlaces.IsSet && decimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(decimalPlaces), "Property is not nullable for class CurrencyUpdate.");

            return new CurrencyUpdate(enabled, primary, code, name, symbol, decimalPlaces);
        }

        /// <summary>
        /// Serializes a <see cref="CurrencyUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currencyUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CurrencyUpdate currencyUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, currencyUpdate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CurrencyUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currencyUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CurrencyUpdate currencyUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (currencyUpdate.CodeOption.IsSet && currencyUpdate.Code == null)
                throw new ArgumentNullException(nameof(currencyUpdate.Code), "Property is required for class CurrencyUpdate.");

            if (currencyUpdate.NameOption.IsSet && currencyUpdate.Name == null)
                throw new ArgumentNullException(nameof(currencyUpdate.Name), "Property is required for class CurrencyUpdate.");

            if (currencyUpdate.SymbolOption.IsSet && currencyUpdate.Symbol == null)
                throw new ArgumentNullException(nameof(currencyUpdate.Symbol), "Property is required for class CurrencyUpdate.");

            if (currencyUpdate.EnabledOption.IsSet)
                writer.WriteBoolean("enabled", currencyUpdate.EnabledOption.Value!.Value);

            if (currencyUpdate.PrimaryOption.IsSet)
                writer.WriteBoolean("primary", currencyUpdate.PrimaryOption.Value!.Value);

            if (currencyUpdate.CodeOption.IsSet)
                writer.WriteString("code", currencyUpdate.Code);

            if (currencyUpdate.NameOption.IsSet)
                writer.WriteString("name", currencyUpdate.Name);

            if (currencyUpdate.SymbolOption.IsSet)
                writer.WriteString("symbol", currencyUpdate.Symbol);

            if (currencyUpdate.DecimalPlacesOption.IsSet)
                writer.WriteNumber("decimal_places", currencyUpdate.DecimalPlacesOption.Value!.Value);
        }
    }
}
