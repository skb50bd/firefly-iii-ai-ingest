// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// AttachmentStore
    /// </summary>
    public partial class AttachmentStore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentStore" /> class.
        /// </summary>
        /// <param name="filename">filename</param>
        /// <param name="attachableType">attachableType</param>
        /// <param name="attachableId">ID of the model this attachment is linked to.</param>
        /// <param name="title">title</param>
        /// <param name="notes">notes</param>
        [JsonConstructor]
        public AttachmentStore(string filename, AttachableType attachableType, string attachableId, Option<string?> title = default, Option<string?> notes = default)
        {
            Filename = filename;
            AttachableType = attachableType;
            AttachableId = attachableId;
            TitleOption = title;
            NotesOption = notes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AttachableType
        /// </summary>
        [JsonPropertyName("attachable_type")]
        public AttachableType AttachableType { get; set; }

        /// <summary>
        /// Gets or Sets Filename
        /// </summary>
        /* <example>file.pdf</example> */
        [JsonPropertyName("filename")]
        public string Filename { get; set; }

        /// <summary>
        /// ID of the model this attachment is linked to.
        /// </summary>
        /// <value>ID of the model this attachment is linked to.</value>
        /* <example>134</example> */
        [JsonPropertyName("attachable_id")]
        public string AttachableId { get; set; }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        /* <example>Some PDF file</example> */
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        /* <example>Some notes</example> */
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachmentStore {\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  AttachableType: ").Append(AttachableType).Append("\n");
            sb.Append("  AttachableId: ").Append(AttachableId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AttachmentStore" />
    /// </summary>
    public class AttachmentStoreJsonConverter : JsonConverter<AttachmentStore>
    {
        /// <summary>
        /// Deserializes json to <see cref="AttachmentStore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AttachmentStore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> filename = default;
            Option<AttachableType?> attachableType = default;
            Option<string?> attachableId = default;
            Option<string?> title = default;
            Option<string?> notes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "filename":
                            filename = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "attachable_type":
                            string? attachableTypeRawValue = utf8JsonReader.GetString();
                            if (attachableTypeRawValue != null)
                                attachableType = new Option<AttachableType?>(AttachableTypeValueConverter.FromStringOrDefault(attachableTypeRawValue));
                            break;
                        case "attachable_id":
                            attachableId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!filename.IsSet)
                throw new ArgumentException("Property is required for class AttachmentStore.", nameof(filename));

            if (!attachableType.IsSet)
                throw new ArgumentException("Property is required for class AttachmentStore.", nameof(attachableType));

            if (!attachableId.IsSet)
                throw new ArgumentException("Property is required for class AttachmentStore.", nameof(attachableId));

            if (filename.IsSet && filename.Value == null)
                throw new ArgumentNullException(nameof(filename), "Property is not nullable for class AttachmentStore.");

            if (attachableType.IsSet && attachableType.Value == null)
                throw new ArgumentNullException(nameof(attachableType), "Property is not nullable for class AttachmentStore.");

            if (attachableId.IsSet && attachableId.Value == null)
                throw new ArgumentNullException(nameof(attachableId), "Property is not nullable for class AttachmentStore.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class AttachmentStore.");

            return new AttachmentStore(filename.Value!, attachableType.Value!.Value!, attachableId.Value!, title, notes);
        }

        /// <summary>
        /// Serializes a <see cref="AttachmentStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachmentStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AttachmentStore attachmentStore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, attachmentStore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AttachmentStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachmentStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AttachmentStore attachmentStore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (attachmentStore.Filename == null)
                throw new ArgumentNullException(nameof(attachmentStore.Filename), "Property is required for class AttachmentStore.");

            if (attachmentStore.AttachableId == null)
                throw new ArgumentNullException(nameof(attachmentStore.AttachableId), "Property is required for class AttachmentStore.");

            if (attachmentStore.TitleOption.IsSet && attachmentStore.Title == null)
                throw new ArgumentNullException(nameof(attachmentStore.Title), "Property is required for class AttachmentStore.");

            writer.WriteString("filename", attachmentStore.Filename);

            var attachableTypeRawValue = AttachableTypeValueConverter.ToJsonValue(attachmentStore.AttachableType);
            writer.WriteString("attachable_type", attachableTypeRawValue);

            writer.WriteString("attachable_id", attachmentStore.AttachableId);

            if (attachmentStore.TitleOption.IsSet)
                writer.WriteString("title", attachmentStore.Title);

            if (attachmentStore.NotesOption.IsSet)
                if (attachmentStore.NotesOption.Value != null)
                    writer.WriteString("notes", attachmentStore.Notes);
                else
                    writer.WriteNull("notes");
        }
    }
}
