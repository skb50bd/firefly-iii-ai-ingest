// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// InsightGroupEntry
    /// </summary>
    public partial class InsightGroupEntry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsightGroupEntry" /> class.
        /// </summary>
        /// <param name="id">This ID is a reference to the original object.</param>
        /// <param name="name">This is the name of the object.</param>
        /// <param name="difference">The amount spent or earned between start date and end date, a number defined as a string, for this object and all asset accounts.</param>
        /// <param name="differenceFloat">The amount spent or earned between start date and end date, a number as a float, for this object and all asset accounts. May have rounding errors.</param>
        /// <param name="currencyId">The currency ID of the expenses listed for this account.</param>
        /// <param name="currencyCode">The currency code of the expenses listed for this account.</param>
        [JsonConstructor]
        public InsightGroupEntry(Option<string?> id = default, Option<string?> name = default, Option<string?> difference = default, Option<double?> differenceFloat = default, Option<string?> currencyId = default, Option<string?> currencyCode = default)
        {
            IdOption = id;
            NameOption = name;
            DifferenceOption = difference;
            DifferenceFloatOption = differenceFloat;
            CurrencyIdOption = currencyId;
            CurrencyCodeOption = currencyCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// This ID is a reference to the original object.
        /// </summary>
        /// <value>This ID is a reference to the original object.</value>
        /* <example>123</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// This is the name of the object.
        /// </summary>
        /// <value>This is the name of the object.</value>
        /* <example>Land lord</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Difference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DifferenceOption { get; private set; }

        /// <summary>
        /// The amount spent or earned between start date and end date, a number defined as a string, for this object and all asset accounts.
        /// </summary>
        /// <value>The amount spent or earned between start date and end date, a number defined as a string, for this object and all asset accounts.</value>
        /* <example>-123.45</example> */
        [JsonPropertyName("difference")]
        public string? Difference { get { return this.DifferenceOption; } set { this.DifferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of DifferenceFloat
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> DifferenceFloatOption { get; private set; }

        /// <summary>
        /// The amount spent or earned between start date and end date, a number as a float, for this object and all asset accounts. May have rounding errors.
        /// </summary>
        /// <value>The amount spent or earned between start date and end date, a number as a float, for this object and all asset accounts. May have rounding errors.</value>
        /* <example>-123.45</example> */
        [JsonPropertyName("difference_float")]
        public double? DifferenceFloat { get { return this.DifferenceFloatOption; } set { this.DifferenceFloatOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyIdOption { get; private set; }

        /// <summary>
        /// The currency ID of the expenses listed for this account.
        /// </summary>
        /// <value>The currency ID of the expenses listed for this account.</value>
        /* <example>5</example> */
        [JsonPropertyName("currency_id")]
        public string? CurrencyId { get { return this.CurrencyIdOption; } set { this.CurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The currency code of the expenses listed for this account.
        /// </summary>
        /// <value>The currency code of the expenses listed for this account.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("currency_code")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsightGroupEntry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Difference: ").Append(Difference).Append("\n");
            sb.Append("  DifferenceFloat: ").Append(DifferenceFloat).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InsightGroupEntry" />
    /// </summary>
    public class InsightGroupEntryJsonConverter : JsonConverter<InsightGroupEntry>
    {
        /// <summary>
        /// Deserializes json to <see cref="InsightGroupEntry" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InsightGroupEntry Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> difference = default;
            Option<double?> differenceFloat = default;
            Option<string?> currencyId = default;
            Option<string?> currencyCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "difference":
                            difference = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "difference_float":
                            differenceFloat = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class InsightGroupEntry.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class InsightGroupEntry.");

            if (difference.IsSet && difference.Value == null)
                throw new ArgumentNullException(nameof(difference), "Property is not nullable for class InsightGroupEntry.");

            if (differenceFloat.IsSet && differenceFloat.Value == null)
                throw new ArgumentNullException(nameof(differenceFloat), "Property is not nullable for class InsightGroupEntry.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class InsightGroupEntry.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class InsightGroupEntry.");

            return new InsightGroupEntry(id, name, difference, differenceFloat, currencyId, currencyCode);
        }

        /// <summary>
        /// Serializes a <see cref="InsightGroupEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="insightGroupEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InsightGroupEntry insightGroupEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, insightGroupEntry, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InsightGroupEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="insightGroupEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InsightGroupEntry insightGroupEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            if (insightGroupEntry.IdOption.IsSet && insightGroupEntry.Id == null)
                throw new ArgumentNullException(nameof(insightGroupEntry.Id), "Property is required for class InsightGroupEntry.");

            if (insightGroupEntry.NameOption.IsSet && insightGroupEntry.Name == null)
                throw new ArgumentNullException(nameof(insightGroupEntry.Name), "Property is required for class InsightGroupEntry.");

            if (insightGroupEntry.DifferenceOption.IsSet && insightGroupEntry.Difference == null)
                throw new ArgumentNullException(nameof(insightGroupEntry.Difference), "Property is required for class InsightGroupEntry.");

            if (insightGroupEntry.CurrencyIdOption.IsSet && insightGroupEntry.CurrencyId == null)
                throw new ArgumentNullException(nameof(insightGroupEntry.CurrencyId), "Property is required for class InsightGroupEntry.");

            if (insightGroupEntry.CurrencyCodeOption.IsSet && insightGroupEntry.CurrencyCode == null)
                throw new ArgumentNullException(nameof(insightGroupEntry.CurrencyCode), "Property is required for class InsightGroupEntry.");

            if (insightGroupEntry.IdOption.IsSet)
                writer.WriteString("id", insightGroupEntry.Id);

            if (insightGroupEntry.NameOption.IsSet)
                writer.WriteString("name", insightGroupEntry.Name);

            if (insightGroupEntry.DifferenceOption.IsSet)
                writer.WriteString("difference", insightGroupEntry.Difference);

            if (insightGroupEntry.DifferenceFloatOption.IsSet)
                writer.WriteNumber("difference_float", insightGroupEntry.DifferenceFloatOption.Value!.Value);

            if (insightGroupEntry.CurrencyIdOption.IsSet)
                writer.WriteString("currency_id", insightGroupEntry.CurrencyId);

            if (insightGroupEntry.CurrencyCodeOption.IsSet)
                writer.WriteString("currency_code", insightGroupEntry.CurrencyCode);
        }
    }
}
