// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// TransactionSplitStore
    /// </summary>
    public partial class TransactionSplitStore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSplitStore" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="date">Date of the transaction</param>
        /// <param name="amount">Amount of the transaction.</param>
        /// <param name="description">Description of the transaction.</param>
        /// <param name="order">Order of this entry in the list of transactions.</param>
        /// <param name="currencyId">Currency ID. Default is the source account&#39;s currency, or the user&#39;s financial administration&#39;s currency. The value you submit may be overruled by the source or destination account.</param>
        /// <param name="currencyCode">Currency code. Default is the source account&#39;s currency, or the user&#39;s financial administration&#39;s primary currency. The value you submit may be overruled by the source or destination account.</param>
        /// <param name="foreignAmount">The amount in a foreign currency.</param>
        /// <param name="foreignCurrencyId">Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.</param>
        /// <param name="foreignCurrencyCode">Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.</param>
        /// <param name="budgetId">The budget ID for this transaction.</param>
        /// <param name="budgetName">The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.</param>
        /// <param name="categoryId">The category ID for this transaction.</param>
        /// <param name="categoryName">The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.</param>
        /// <param name="sourceId">ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.</param>
        /// <param name="sourceName">Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.</param>
        /// <param name="destinationId">ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.</param>
        /// <param name="destinationName">Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.</param>
        /// <param name="reconciled">If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.</param>
        /// <param name="piggyBankId">Optional. Use either this or the piggy_bank_name</param>
        /// <param name="piggyBankName">Optional. Use either this or the piggy_bank_id</param>
        /// <param name="billId">Optional. Use either this or the bill_name</param>
        /// <param name="billName">Optional. Use either this or the bill_id</param>
        /// <param name="tags">Array of tags.</param>
        /// <param name="notes">notes</param>
        /// <param name="internalReference">Reference to internal reference of other systems.</param>
        /// <param name="externalId">Reference to external ID in other systems.</param>
        /// <param name="externalUrl">External, custom URL for this transaction.</param>
        /// <param name="sepaCc">SEPA Clearing Code</param>
        /// <param name="sepaCtOp">SEPA Opposing Account Identifier</param>
        /// <param name="sepaCtId">SEPA end-to-end Identifier</param>
        /// <param name="sepaDb">SEPA mandate identifier</param>
        /// <param name="sepaCountry">SEPA Country</param>
        /// <param name="sepaEp">SEPA External Purpose indicator</param>
        /// <param name="sepaCi">SEPA Creditor Identifier</param>
        /// <param name="sepaBatchId">SEPA Batch ID</param>
        /// <param name="interestDate">interestDate</param>
        /// <param name="bookDate">bookDate</param>
        /// <param name="processDate">processDate</param>
        /// <param name="dueDate">dueDate</param>
        /// <param name="paymentDate">paymentDate</param>
        /// <param name="invoiceDate">invoiceDate</param>
        [JsonConstructor]
        public TransactionSplitStore(TransactionTypeProperty type, DateTime date, string amount, string description, Option<int?> order = default, Option<string?> currencyId = default, Option<string?> currencyCode = default, Option<string?> foreignAmount = default, Option<string?> foreignCurrencyId = default, Option<string?> foreignCurrencyCode = default, Option<string?> budgetId = default, Option<string?> budgetName = default, Option<string?> categoryId = default, Option<string?> categoryName = default, Option<string?> sourceId = default, Option<string?> sourceName = default, Option<string?> destinationId = default, Option<string?> destinationName = default, Option<bool?> reconciled = default, Option<int?> piggyBankId = default, Option<string?> piggyBankName = default, Option<string?> billId = default, Option<string?> billName = default, Option<List<string>?> tags = default, Option<string?> notes = default, Option<string?> internalReference = default, Option<string?> externalId = default, Option<string?> externalUrl = default, Option<string?> sepaCc = default, Option<string?> sepaCtOp = default, Option<string?> sepaCtId = default, Option<string?> sepaDb = default, Option<string?> sepaCountry = default, Option<string?> sepaEp = default, Option<string?> sepaCi = default, Option<string?> sepaBatchId = default, Option<DateTime?> interestDate = default, Option<DateTime?> bookDate = default, Option<DateTime?> processDate = default, Option<DateTime?> dueDate = default, Option<DateTime?> paymentDate = default, Option<DateTime?> invoiceDate = default)
        {
            Type = type;
            Date = date;
            Amount = amount;
            Description = description;
            OrderOption = order;
            CurrencyIdOption = currencyId;
            CurrencyCodeOption = currencyCode;
            ForeignAmountOption = foreignAmount;
            ForeignCurrencyIdOption = foreignCurrencyId;
            ForeignCurrencyCodeOption = foreignCurrencyCode;
            BudgetIdOption = budgetId;
            BudgetNameOption = budgetName;
            CategoryIdOption = categoryId;
            CategoryNameOption = categoryName;
            SourceIdOption = sourceId;
            SourceNameOption = sourceName;
            DestinationIdOption = destinationId;
            DestinationNameOption = destinationName;
            ReconciledOption = reconciled;
            PiggyBankIdOption = piggyBankId;
            PiggyBankNameOption = piggyBankName;
            BillIdOption = billId;
            BillNameOption = billName;
            TagsOption = tags;
            NotesOption = notes;
            InternalReferenceOption = internalReference;
            ExternalIdOption = externalId;
            ExternalUrlOption = externalUrl;
            SepaCcOption = sepaCc;
            SepaCtOpOption = sepaCtOp;
            SepaCtIdOption = sepaCtId;
            SepaDbOption = sepaDb;
            SepaCountryOption = sepaCountry;
            SepaEpOption = sepaEp;
            SepaCiOption = sepaCi;
            SepaBatchIdOption = sepaBatchId;
            InterestDateOption = interestDate;
            BookDateOption = bookDate;
            ProcessDateOption = processDate;
            DueDateOption = dueDate;
            PaymentDateOption = paymentDate;
            InvoiceDateOption = invoiceDate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TransactionTypeProperty Type { get; set; }

        /// <summary>
        /// Date of the transaction
        /// </summary>
        /// <value>Date of the transaction</value>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("date")]
        public DateTime Date { get; set; }

        /// <summary>
        /// Amount of the transaction.
        /// </summary>
        /// <value>Amount of the transaction.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Description of the transaction.
        /// </summary>
        /// <value>Description of the transaction.</value>
        /* <example>Vegetables</example> */
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Used to track the state of Order
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OrderOption { get; private set; }

        /// <summary>
        /// Order of this entry in the list of transactions.
        /// </summary>
        /// <value>Order of this entry in the list of transactions.</value>
        /* <example>0</example> */
        [JsonPropertyName("order")]
        public int? Order { get { return this.OrderOption; } set { this.OrderOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyIdOption { get; private set; }

        /// <summary>
        /// Currency ID. Default is the source account&#39;s currency, or the user&#39;s financial administration&#39;s currency. The value you submit may be overruled by the source or destination account.
        /// </summary>
        /// <value>Currency ID. Default is the source account&#39;s currency, or the user&#39;s financial administration&#39;s currency. The value you submit may be overruled by the source or destination account.</value>
        /* <example>12</example> */
        [JsonPropertyName("currency_id")]
        public string? CurrencyId { get { return this.CurrencyIdOption; } set { this.CurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// Currency code. Default is the source account&#39;s currency, or the user&#39;s financial administration&#39;s primary currency. The value you submit may be overruled by the source or destination account.
        /// </summary>
        /// <value>Currency code. Default is the source account&#39;s currency, or the user&#39;s financial administration&#39;s primary currency. The value you submit may be overruled by the source or destination account.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("currency_code")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForeignAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForeignAmountOption { get; private set; }

        /// <summary>
        /// The amount in a foreign currency.
        /// </summary>
        /// <value>The amount in a foreign currency.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("foreign_amount")]
        public string? ForeignAmount { get { return this.ForeignAmountOption; } set { this.ForeignAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForeignCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForeignCurrencyIdOption { get; private set; }

        /// <summary>
        /// Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.
        /// </summary>
        /// <value>Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.</value>
        /* <example>17</example> */
        [JsonPropertyName("foreign_currency_id")]
        public string? ForeignCurrencyId { get { return this.ForeignCurrencyIdOption; } set { this.ForeignCurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForeignCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForeignCurrencyCodeOption { get; private set; }

        /// <summary>
        /// Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.
        /// </summary>
        /// <value>Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.</value>
        /* <example>USD</example> */
        [JsonPropertyName("foreign_currency_code")]
        public string? ForeignCurrencyCode { get { return this.ForeignCurrencyCodeOption; } set { this.ForeignCurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of BudgetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BudgetIdOption { get; private set; }

        /// <summary>
        /// The budget ID for this transaction.
        /// </summary>
        /// <value>The budget ID for this transaction.</value>
        /* <example>4</example> */
        [JsonPropertyName("budget_id")]
        public string? BudgetId { get { return this.BudgetIdOption; } set { this.BudgetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BudgetName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BudgetNameOption { get; private set; }

        /// <summary>
        /// The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.
        /// </summary>
        /// <value>The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.</value>
        /* <example>Groceries</example> */
        [JsonPropertyName("budget_name")]
        public string? BudgetName { get { return this.BudgetNameOption; } set { this.BudgetNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of CategoryId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CategoryIdOption { get; private set; }

        /// <summary>
        /// The category ID for this transaction.
        /// </summary>
        /// <value>The category ID for this transaction.</value>
        /* <example>43</example> */
        [JsonPropertyName("category_id")]
        public string? CategoryId { get { return this.CategoryIdOption; } set { this.CategoryIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CategoryName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CategoryNameOption { get; private set; }

        /// <summary>
        /// The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.
        /// </summary>
        /// <value>The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.</value>
        /* <example>Groceries</example> */
        [JsonPropertyName("category_name")]
        public string? CategoryName { get { return this.CategoryNameOption; } set { this.CategoryNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceIdOption { get; private set; }

        /// <summary>
        /// ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.
        /// </summary>
        /// <value>ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.</value>
        /* <example>2</example> */
        [JsonPropertyName("source_id")]
        public string? SourceId { get { return this.SourceIdOption; } set { this.SourceIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceNameOption { get; private set; }

        /// <summary>
        /// Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.
        /// </summary>
        /// <value>Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.</value>
        /* <example>Checking account</example> */
        [JsonPropertyName("source_name")]
        public string? SourceName { get { return this.SourceNameOption; } set { this.SourceNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of DestinationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DestinationIdOption { get; private set; }

        /// <summary>
        /// ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.
        /// </summary>
        /// <value>ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.</value>
        /* <example>2</example> */
        [JsonPropertyName("destination_id")]
        public string? DestinationId { get { return this.DestinationIdOption; } set { this.DestinationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DestinationName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DestinationNameOption { get; private set; }

        /// <summary>
        /// Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.
        /// </summary>
        /// <value>Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.</value>
        /* <example>Buy and Large</example> */
        [JsonPropertyName("destination_name")]
        public string? DestinationName { get { return this.DestinationNameOption; } set { this.DestinationNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reconciled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ReconciledOption { get; private set; }

        /// <summary>
        /// If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.
        /// </summary>
        /// <value>If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.</value>
        /* <example>false</example> */
        [JsonPropertyName("reconciled")]
        public bool? Reconciled { get { return this.ReconciledOption; } set { this.ReconciledOption = new(value); } }

        /// <summary>
        /// Used to track the state of PiggyBankId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PiggyBankIdOption { get; private set; }

        /// <summary>
        /// Optional. Use either this or the piggy_bank_name
        /// </summary>
        /// <value>Optional. Use either this or the piggy_bank_name</value>
        [JsonPropertyName("piggy_bank_id")]
        public int? PiggyBankId { get { return this.PiggyBankIdOption; } set { this.PiggyBankIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PiggyBankName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PiggyBankNameOption { get; private set; }

        /// <summary>
        /// Optional. Use either this or the piggy_bank_id
        /// </summary>
        /// <value>Optional. Use either this or the piggy_bank_id</value>
        [JsonPropertyName("piggy_bank_name")]
        public string? PiggyBankName { get { return this.PiggyBankNameOption; } set { this.PiggyBankNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of BillId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BillIdOption { get; private set; }

        /// <summary>
        /// Optional. Use either this or the bill_name
        /// </summary>
        /// <value>Optional. Use either this or the bill_name</value>
        /* <example>112</example> */
        [JsonPropertyName("bill_id")]
        public string? BillId { get { return this.BillIdOption; } set { this.BillIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BillName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BillNameOption { get; private set; }

        /// <summary>
        /// Optional. Use either this or the bill_id
        /// </summary>
        /// <value>Optional. Use either this or the bill_id</value>
        /* <example>Monthly rent</example> */
        [JsonPropertyName("bill_name")]
        public string? BillName { get { return this.BillNameOption; } set { this.BillNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TagsOption { get; private set; }

        /// <summary>
        /// Array of tags.
        /// </summary>
        /// <value>Array of tags.</value>
        [JsonPropertyName("tags")]
        public List<string>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        /* <example>Some example notes</example> */
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Used to track the state of InternalReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InternalReferenceOption { get; private set; }

        /// <summary>
        /// Reference to internal reference of other systems.
        /// </summary>
        /// <value>Reference to internal reference of other systems.</value>
        [JsonPropertyName("internal_reference")]
        public string? InternalReference { get { return this.InternalReferenceOption; } set { this.InternalReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalIdOption { get; private set; }

        /// <summary>
        /// Reference to external ID in other systems.
        /// </summary>
        /// <value>Reference to external ID in other systems.</value>
        [JsonPropertyName("external_id")]
        public string? ExternalId { get { return this.ExternalIdOption; } set { this.ExternalIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalUrlOption { get; private set; }

        /// <summary>
        /// External, custom URL for this transaction.
        /// </summary>
        /// <value>External, custom URL for this transaction.</value>
        [JsonPropertyName("external_url")]
        public string? ExternalUrl { get { return this.ExternalUrlOption; } set { this.ExternalUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of SepaCc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SepaCcOption { get; private set; }

        /// <summary>
        /// SEPA Clearing Code
        /// </summary>
        /// <value>SEPA Clearing Code</value>
        [JsonPropertyName("sepa_cc")]
        public string? SepaCc { get { return this.SepaCcOption; } set { this.SepaCcOption = new(value); } }

        /// <summary>
        /// Used to track the state of SepaCtOp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SepaCtOpOption { get; private set; }

        /// <summary>
        /// SEPA Opposing Account Identifier
        /// </summary>
        /// <value>SEPA Opposing Account Identifier</value>
        [JsonPropertyName("sepa_ct_op")]
        public string? SepaCtOp { get { return this.SepaCtOpOption; } set { this.SepaCtOpOption = new(value); } }

        /// <summary>
        /// Used to track the state of SepaCtId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SepaCtIdOption { get; private set; }

        /// <summary>
        /// SEPA end-to-end Identifier
        /// </summary>
        /// <value>SEPA end-to-end Identifier</value>
        [JsonPropertyName("sepa_ct_id")]
        public string? SepaCtId { get { return this.SepaCtIdOption; } set { this.SepaCtIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SepaDb
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SepaDbOption { get; private set; }

        /// <summary>
        /// SEPA mandate identifier
        /// </summary>
        /// <value>SEPA mandate identifier</value>
        [JsonPropertyName("sepa_db")]
        public string? SepaDb { get { return this.SepaDbOption; } set { this.SepaDbOption = new(value); } }

        /// <summary>
        /// Used to track the state of SepaCountry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SepaCountryOption { get; private set; }

        /// <summary>
        /// SEPA Country
        /// </summary>
        /// <value>SEPA Country</value>
        [JsonPropertyName("sepa_country")]
        public string? SepaCountry { get { return this.SepaCountryOption; } set { this.SepaCountryOption = new(value); } }

        /// <summary>
        /// Used to track the state of SepaEp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SepaEpOption { get; private set; }

        /// <summary>
        /// SEPA External Purpose indicator
        /// </summary>
        /// <value>SEPA External Purpose indicator</value>
        [JsonPropertyName("sepa_ep")]
        public string? SepaEp { get { return this.SepaEpOption; } set { this.SepaEpOption = new(value); } }

        /// <summary>
        /// Used to track the state of SepaCi
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SepaCiOption { get; private set; }

        /// <summary>
        /// SEPA Creditor Identifier
        /// </summary>
        /// <value>SEPA Creditor Identifier</value>
        [JsonPropertyName("sepa_ci")]
        public string? SepaCi { get { return this.SepaCiOption; } set { this.SepaCiOption = new(value); } }

        /// <summary>
        /// Used to track the state of SepaBatchId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SepaBatchIdOption { get; private set; }

        /// <summary>
        /// SEPA Batch ID
        /// </summary>
        /// <value>SEPA Batch ID</value>
        [JsonPropertyName("sepa_batch_id")]
        public string? SepaBatchId { get { return this.SepaBatchIdOption; } set { this.SepaBatchIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of InterestDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> InterestDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets InterestDate
        /// </summary>
        [JsonPropertyName("interest_date")]
        public DateTime? InterestDate { get { return this.InterestDateOption; } set { this.InterestDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of BookDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> BookDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets BookDate
        /// </summary>
        [JsonPropertyName("book_date")]
        public DateTime? BookDate { get { return this.BookDateOption; } set { this.BookDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProcessDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ProcessDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProcessDate
        /// </summary>
        [JsonPropertyName("process_date")]
        public DateTime? ProcessDate { get { return this.ProcessDateOption; } set { this.ProcessDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of DueDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DueDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [JsonPropertyName("due_date")]
        public DateTime? DueDate { get { return this.DueDateOption; } set { this.DueDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of PaymentDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> PaymentDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentDate
        /// </summary>
        [JsonPropertyName("payment_date")]
        public DateTime? PaymentDate { get { return this.PaymentDateOption; } set { this.PaymentDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of InvoiceDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> InvoiceDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets InvoiceDate
        /// </summary>
        [JsonPropertyName("invoice_date")]
        public DateTime? InvoiceDate { get { return this.InvoiceDateOption; } set { this.InvoiceDateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionSplitStore {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ForeignAmount: ").Append(ForeignAmount).Append("\n");
            sb.Append("  ForeignCurrencyId: ").Append(ForeignCurrencyId).Append("\n");
            sb.Append("  ForeignCurrencyCode: ").Append(ForeignCurrencyCode).Append("\n");
            sb.Append("  BudgetId: ").Append(BudgetId).Append("\n");
            sb.Append("  BudgetName: ").Append(BudgetName).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  SourceName: ").Append(SourceName).Append("\n");
            sb.Append("  DestinationId: ").Append(DestinationId).Append("\n");
            sb.Append("  DestinationName: ").Append(DestinationName).Append("\n");
            sb.Append("  Reconciled: ").Append(Reconciled).Append("\n");
            sb.Append("  PiggyBankId: ").Append(PiggyBankId).Append("\n");
            sb.Append("  PiggyBankName: ").Append(PiggyBankName).Append("\n");
            sb.Append("  BillId: ").Append(BillId).Append("\n");
            sb.Append("  BillName: ").Append(BillName).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  InternalReference: ").Append(InternalReference).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  ExternalUrl: ").Append(ExternalUrl).Append("\n");
            sb.Append("  SepaCc: ").Append(SepaCc).Append("\n");
            sb.Append("  SepaCtOp: ").Append(SepaCtOp).Append("\n");
            sb.Append("  SepaCtId: ").Append(SepaCtId).Append("\n");
            sb.Append("  SepaDb: ").Append(SepaDb).Append("\n");
            sb.Append("  SepaCountry: ").Append(SepaCountry).Append("\n");
            sb.Append("  SepaEp: ").Append(SepaEp).Append("\n");
            sb.Append("  SepaCi: ").Append(SepaCi).Append("\n");
            sb.Append("  SepaBatchId: ").Append(SepaBatchId).Append("\n");
            sb.Append("  InterestDate: ").Append(InterestDate).Append("\n");
            sb.Append("  BookDate: ").Append(BookDate).Append("\n");
            sb.Append("  ProcessDate: ").Append(ProcessDate).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransactionSplitStore" />
    /// </summary>
    public class TransactionSplitStoreJsonConverter : JsonConverter<TransactionSplitStore>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize InterestDate
        /// </summary>
        public static string InterestDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize BookDate
        /// </summary>
        public static string BookDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ProcessDate
        /// </summary>
        public static string ProcessDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DueDate
        /// </summary>
        public static string DueDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize PaymentDate
        /// </summary>
        public static string PaymentDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize InvoiceDate
        /// </summary>
        public static string InvoiceDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="TransactionSplitStore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransactionSplitStore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<TransactionTypeProperty?> type = default;
            Option<DateTime?> date = default;
            Option<string?> amount = default;
            Option<string?> description = default;
            Option<int?> order = default;
            Option<string?> currencyId = default;
            Option<string?> currencyCode = default;
            Option<string?> foreignAmount = default;
            Option<string?> foreignCurrencyId = default;
            Option<string?> foreignCurrencyCode = default;
            Option<string?> budgetId = default;
            Option<string?> budgetName = default;
            Option<string?> categoryId = default;
            Option<string?> categoryName = default;
            Option<string?> sourceId = default;
            Option<string?> sourceName = default;
            Option<string?> destinationId = default;
            Option<string?> destinationName = default;
            Option<bool?> reconciled = default;
            Option<int?> piggyBankId = default;
            Option<string?> piggyBankName = default;
            Option<string?> billId = default;
            Option<string?> billName = default;
            Option<List<string>?> tags = default;
            Option<string?> notes = default;
            Option<string?> internalReference = default;
            Option<string?> externalId = default;
            Option<string?> externalUrl = default;
            Option<string?> sepaCc = default;
            Option<string?> sepaCtOp = default;
            Option<string?> sepaCtId = default;
            Option<string?> sepaDb = default;
            Option<string?> sepaCountry = default;
            Option<string?> sepaEp = default;
            Option<string?> sepaCi = default;
            Option<string?> sepaBatchId = default;
            Option<DateTime?> interestDate = default;
            Option<DateTime?> bookDate = default;
            Option<DateTime?> processDate = default;
            Option<DateTime?> dueDate = default;
            Option<DateTime?> paymentDate = default;
            Option<DateTime?> invoiceDate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<TransactionTypeProperty?>(TransactionTypePropertyValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "date":
                            date = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "amount":
                            amount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "order":
                            order = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "foreign_amount":
                            foreignAmount = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "foreign_currency_id":
                            foreignCurrencyId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "foreign_currency_code":
                            foreignCurrencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "budget_id":
                            budgetId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "budget_name":
                            budgetName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "category_id":
                            categoryId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "category_name":
                            categoryName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "source_id":
                            sourceId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "source_name":
                            sourceName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "destination_id":
                            destinationId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "destination_name":
                            destinationName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "reconciled":
                            reconciled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "piggy_bank_id":
                            piggyBankId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "piggy_bank_name":
                            piggyBankName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "bill_id":
                            billId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "bill_name":
                            billName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "tags":
                            tags = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "internal_reference":
                            internalReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "external_id":
                            externalId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "external_url":
                            externalUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sepa_cc":
                            sepaCc = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sepa_ct_op":
                            sepaCtOp = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sepa_ct_id":
                            sepaCtId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sepa_db":
                            sepaDb = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sepa_country":
                            sepaCountry = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sepa_ep":
                            sepaEp = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sepa_ci":
                            sepaCi = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sepa_batch_id":
                            sepaBatchId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "interest_date":
                            interestDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "book_date":
                            bookDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "process_date":
                            processDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "due_date":
                            dueDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payment_date":
                            paymentDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "invoice_date":
                            invoiceDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class TransactionSplitStore.", nameof(type));

            if (!date.IsSet)
                throw new ArgumentException("Property is required for class TransactionSplitStore.", nameof(date));

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class TransactionSplitStore.", nameof(amount));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class TransactionSplitStore.", nameof(description));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class TransactionSplitStore.");

            if (date.IsSet && date.Value == null)
                throw new ArgumentNullException(nameof(date), "Property is not nullable for class TransactionSplitStore.");

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class TransactionSplitStore.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class TransactionSplitStore.");

            if (reconciled.IsSet && reconciled.Value == null)
                throw new ArgumentNullException(nameof(reconciled), "Property is not nullable for class TransactionSplitStore.");

            return new TransactionSplitStore(type.Value!.Value!, date.Value!.Value!, amount.Value!, description.Value!, order, currencyId, currencyCode, foreignAmount, foreignCurrencyId, foreignCurrencyCode, budgetId, budgetName, categoryId, categoryName, sourceId, sourceName, destinationId, destinationName, reconciled, piggyBankId, piggyBankName, billId, billName, tags, notes, internalReference, externalId, externalUrl, sepaCc, sepaCtOp, sepaCtId, sepaDb, sepaCountry, sepaEp, sepaCi, sepaBatchId, interestDate, bookDate, processDate, dueDate, paymentDate, invoiceDate);
        }

        /// <summary>
        /// Serializes a <see cref="TransactionSplitStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionSplitStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransactionSplitStore transactionSplitStore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, transactionSplitStore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransactionSplitStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionSplitStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TransactionSplitStore transactionSplitStore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (transactionSplitStore.Amount == null)
                throw new ArgumentNullException(nameof(transactionSplitStore.Amount), "Property is required for class TransactionSplitStore.");

            if (transactionSplitStore.Description == null)
                throw new ArgumentNullException(nameof(transactionSplitStore.Description), "Property is required for class TransactionSplitStore.");

            var typeRawValue = TransactionTypePropertyValueConverter.ToJsonValue(transactionSplitStore.Type);
            writer.WriteString("type", typeRawValue);

            writer.WriteString("date", transactionSplitStore.Date.ToString(DateFormat));

            writer.WriteString("amount", transactionSplitStore.Amount);

            writer.WriteString("description", transactionSplitStore.Description);

            if (transactionSplitStore.OrderOption.IsSet)
                if (transactionSplitStore.OrderOption.Value != null)
                    writer.WriteNumber("order", transactionSplitStore.OrderOption.Value!.Value);
                else
                    writer.WriteNull("order");

            if (transactionSplitStore.CurrencyIdOption.IsSet)
                if (transactionSplitStore.CurrencyIdOption.Value != null)
                    writer.WriteString("currency_id", transactionSplitStore.CurrencyId);
                else
                    writer.WriteNull("currency_id");

            if (transactionSplitStore.CurrencyCodeOption.IsSet)
                if (transactionSplitStore.CurrencyCodeOption.Value != null)
                    writer.WriteString("currency_code", transactionSplitStore.CurrencyCode);
                else
                    writer.WriteNull("currency_code");

            if (transactionSplitStore.ForeignAmountOption.IsSet)
                if (transactionSplitStore.ForeignAmountOption.Value != null)
                    writer.WriteString("foreign_amount", transactionSplitStore.ForeignAmount);
                else
                    writer.WriteNull("foreign_amount");

            if (transactionSplitStore.ForeignCurrencyIdOption.IsSet)
                if (transactionSplitStore.ForeignCurrencyIdOption.Value != null)
                    writer.WriteString("foreign_currency_id", transactionSplitStore.ForeignCurrencyId);
                else
                    writer.WriteNull("foreign_currency_id");

            if (transactionSplitStore.ForeignCurrencyCodeOption.IsSet)
                if (transactionSplitStore.ForeignCurrencyCodeOption.Value != null)
                    writer.WriteString("foreign_currency_code", transactionSplitStore.ForeignCurrencyCode);
                else
                    writer.WriteNull("foreign_currency_code");

            if (transactionSplitStore.BudgetIdOption.IsSet)
                if (transactionSplitStore.BudgetIdOption.Value != null)
                    writer.WriteString("budget_id", transactionSplitStore.BudgetId);
                else
                    writer.WriteNull("budget_id");

            if (transactionSplitStore.BudgetNameOption.IsSet)
                if (transactionSplitStore.BudgetNameOption.Value != null)
                    writer.WriteString("budget_name", transactionSplitStore.BudgetName);
                else
                    writer.WriteNull("budget_name");

            if (transactionSplitStore.CategoryIdOption.IsSet)
                if (transactionSplitStore.CategoryIdOption.Value != null)
                    writer.WriteString("category_id", transactionSplitStore.CategoryId);
                else
                    writer.WriteNull("category_id");

            if (transactionSplitStore.CategoryNameOption.IsSet)
                if (transactionSplitStore.CategoryNameOption.Value != null)
                    writer.WriteString("category_name", transactionSplitStore.CategoryName);
                else
                    writer.WriteNull("category_name");

            if (transactionSplitStore.SourceIdOption.IsSet)
                if (transactionSplitStore.SourceIdOption.Value != null)
                    writer.WriteString("source_id", transactionSplitStore.SourceId);
                else
                    writer.WriteNull("source_id");

            if (transactionSplitStore.SourceNameOption.IsSet)
                if (transactionSplitStore.SourceNameOption.Value != null)
                    writer.WriteString("source_name", transactionSplitStore.SourceName);
                else
                    writer.WriteNull("source_name");

            if (transactionSplitStore.DestinationIdOption.IsSet)
                if (transactionSplitStore.DestinationIdOption.Value != null)
                    writer.WriteString("destination_id", transactionSplitStore.DestinationId);
                else
                    writer.WriteNull("destination_id");

            if (transactionSplitStore.DestinationNameOption.IsSet)
                if (transactionSplitStore.DestinationNameOption.Value != null)
                    writer.WriteString("destination_name", transactionSplitStore.DestinationName);
                else
                    writer.WriteNull("destination_name");

            if (transactionSplitStore.ReconciledOption.IsSet)
                writer.WriteBoolean("reconciled", transactionSplitStore.ReconciledOption.Value!.Value);

            if (transactionSplitStore.PiggyBankIdOption.IsSet)
                if (transactionSplitStore.PiggyBankIdOption.Value != null)
                    writer.WriteNumber("piggy_bank_id", transactionSplitStore.PiggyBankIdOption.Value!.Value);
                else
                    writer.WriteNull("piggy_bank_id");

            if (transactionSplitStore.PiggyBankNameOption.IsSet)
                if (transactionSplitStore.PiggyBankNameOption.Value != null)
                    writer.WriteString("piggy_bank_name", transactionSplitStore.PiggyBankName);
                else
                    writer.WriteNull("piggy_bank_name");

            if (transactionSplitStore.BillIdOption.IsSet)
                if (transactionSplitStore.BillIdOption.Value != null)
                    writer.WriteString("bill_id", transactionSplitStore.BillId);
                else
                    writer.WriteNull("bill_id");

            if (transactionSplitStore.BillNameOption.IsSet)
                if (transactionSplitStore.BillNameOption.Value != null)
                    writer.WriteString("bill_name", transactionSplitStore.BillName);
                else
                    writer.WriteNull("bill_name");

            if (transactionSplitStore.TagsOption.IsSet)
                if (transactionSplitStore.TagsOption.Value != null)
                {
                    writer.WritePropertyName("tags");
                    JsonSerializer.Serialize(writer, transactionSplitStore.Tags, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("tags");
            if (transactionSplitStore.NotesOption.IsSet)
                if (transactionSplitStore.NotesOption.Value != null)
                    writer.WriteString("notes", transactionSplitStore.Notes);
                else
                    writer.WriteNull("notes");

            if (transactionSplitStore.InternalReferenceOption.IsSet)
                if (transactionSplitStore.InternalReferenceOption.Value != null)
                    writer.WriteString("internal_reference", transactionSplitStore.InternalReference);
                else
                    writer.WriteNull("internal_reference");

            if (transactionSplitStore.ExternalIdOption.IsSet)
                if (transactionSplitStore.ExternalIdOption.Value != null)
                    writer.WriteString("external_id", transactionSplitStore.ExternalId);
                else
                    writer.WriteNull("external_id");

            if (transactionSplitStore.ExternalUrlOption.IsSet)
                if (transactionSplitStore.ExternalUrlOption.Value != null)
                    writer.WriteString("external_url", transactionSplitStore.ExternalUrl);
                else
                    writer.WriteNull("external_url");

            if (transactionSplitStore.SepaCcOption.IsSet)
                if (transactionSplitStore.SepaCcOption.Value != null)
                    writer.WriteString("sepa_cc", transactionSplitStore.SepaCc);
                else
                    writer.WriteNull("sepa_cc");

            if (transactionSplitStore.SepaCtOpOption.IsSet)
                if (transactionSplitStore.SepaCtOpOption.Value != null)
                    writer.WriteString("sepa_ct_op", transactionSplitStore.SepaCtOp);
                else
                    writer.WriteNull("sepa_ct_op");

            if (transactionSplitStore.SepaCtIdOption.IsSet)
                if (transactionSplitStore.SepaCtIdOption.Value != null)
                    writer.WriteString("sepa_ct_id", transactionSplitStore.SepaCtId);
                else
                    writer.WriteNull("sepa_ct_id");

            if (transactionSplitStore.SepaDbOption.IsSet)
                if (transactionSplitStore.SepaDbOption.Value != null)
                    writer.WriteString("sepa_db", transactionSplitStore.SepaDb);
                else
                    writer.WriteNull("sepa_db");

            if (transactionSplitStore.SepaCountryOption.IsSet)
                if (transactionSplitStore.SepaCountryOption.Value != null)
                    writer.WriteString("sepa_country", transactionSplitStore.SepaCountry);
                else
                    writer.WriteNull("sepa_country");

            if (transactionSplitStore.SepaEpOption.IsSet)
                if (transactionSplitStore.SepaEpOption.Value != null)
                    writer.WriteString("sepa_ep", transactionSplitStore.SepaEp);
                else
                    writer.WriteNull("sepa_ep");

            if (transactionSplitStore.SepaCiOption.IsSet)
                if (transactionSplitStore.SepaCiOption.Value != null)
                    writer.WriteString("sepa_ci", transactionSplitStore.SepaCi);
                else
                    writer.WriteNull("sepa_ci");

            if (transactionSplitStore.SepaBatchIdOption.IsSet)
                if (transactionSplitStore.SepaBatchIdOption.Value != null)
                    writer.WriteString("sepa_batch_id", transactionSplitStore.SepaBatchId);
                else
                    writer.WriteNull("sepa_batch_id");

            if (transactionSplitStore.InterestDateOption.IsSet)
                if (transactionSplitStore.InterestDateOption.Value != null)
                    writer.WriteString("interest_date", transactionSplitStore.InterestDateOption.Value!.Value.ToString(InterestDateFormat));
                else
                    writer.WriteNull("interest_date");

            if (transactionSplitStore.BookDateOption.IsSet)
                if (transactionSplitStore.BookDateOption.Value != null)
                    writer.WriteString("book_date", transactionSplitStore.BookDateOption.Value!.Value.ToString(BookDateFormat));
                else
                    writer.WriteNull("book_date");

            if (transactionSplitStore.ProcessDateOption.IsSet)
                if (transactionSplitStore.ProcessDateOption.Value != null)
                    writer.WriteString("process_date", transactionSplitStore.ProcessDateOption.Value!.Value.ToString(ProcessDateFormat));
                else
                    writer.WriteNull("process_date");

            if (transactionSplitStore.DueDateOption.IsSet)
                if (transactionSplitStore.DueDateOption.Value != null)
                    writer.WriteString("due_date", transactionSplitStore.DueDateOption.Value!.Value.ToString(DueDateFormat));
                else
                    writer.WriteNull("due_date");

            if (transactionSplitStore.PaymentDateOption.IsSet)
                if (transactionSplitStore.PaymentDateOption.Value != null)
                    writer.WriteString("payment_date", transactionSplitStore.PaymentDateOption.Value!.Value.ToString(PaymentDateFormat));
                else
                    writer.WriteNull("payment_date");

            if (transactionSplitStore.InvoiceDateOption.IsSet)
                if (transactionSplitStore.InvoiceDateOption.Value != null)
                    writer.WriteString("invoice_date", transactionSplitStore.InvoiceDateOption.Value!.Value.ToString(InvoiceDateFormat));
                else
                    writer.WriteNull("invoice_date");
        }
    }
}
