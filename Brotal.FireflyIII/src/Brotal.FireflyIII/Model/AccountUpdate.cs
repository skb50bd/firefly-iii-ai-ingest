// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// AccountUpdate
    /// </summary>
    public partial class AccountUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountUpdate" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="iban">iban</param>
        /// <param name="bic">bic</param>
        /// <param name="accountNumber">accountNumber</param>
        /// <param name="openingBalance">openingBalance</param>
        /// <param name="openingBalanceDate">openingBalanceDate</param>
        /// <param name="virtualBalance">virtualBalance</param>
        /// <param name="currencyId">Use either currency_id or currency_code. Defaults to the user&#39;s financial administration&#39;s currency.</param>
        /// <param name="currencyCode">Use either currency_id or currency_code. Defaults to the user&#39;s financial administration&#39;s currency.</param>
        /// <param name="active">If omitted, defaults to true. (default to true)</param>
        /// <param name="order">Order of the account</param>
        /// <param name="includeNetWorth">If omitted, defaults to true. (default to true)</param>
        /// <param name="accountRole">accountRole</param>
        /// <param name="creditCardType">creditCardType</param>
        /// <param name="monthlyPaymentDate">Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank.</param>
        /// <param name="liabilityType">liabilityType</param>
        /// <param name="interest">Mandatory when type is liability. Interest percentage.</param>
        /// <param name="interestPeriod">interestPeriod</param>
        /// <param name="notes">notes</param>
        /// <param name="latitude">Latitude of the account&#39;s location, if applicable. Can be used to draw a map. If omitted, the existing location will be kept. If submitted as NULL, the current location will be removed.</param>
        /// <param name="longitude">Latitude of the account&#39;s location, if applicable. Can be used to draw a map. If omitted, the existing location will be kept. If submitted as NULL, the current location will be removed.</param>
        /// <param name="zoomLevel">Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels. If omitted, the existing location will be kept. If submitted as NULL, the current location will be removed.</param>
        [JsonConstructor]
        public AccountUpdate(string name, Option<string?> iban = default, Option<string?> bic = default, Option<string?> accountNumber = default, Option<string?> openingBalance = default, Option<DateTime?> openingBalanceDate = default, Option<string?> virtualBalance = default, Option<string?> currencyId = default, Option<string?> currencyCode = default, Option<bool?> active = default, Option<int?> order = default, Option<bool?> includeNetWorth = default, Option<AccountRoleProperty?> accountRole = default, Option<CreditCardTypeProperty?> creditCardType = default, Option<DateTime?> monthlyPaymentDate = default, Option<LiabilityTypeProperty?> liabilityType = default, Option<string?> interest = default, Option<InterestPeriodProperty?> interestPeriod = default, Option<string?> notes = default, Option<double?> latitude = default, Option<double?> longitude = default, Option<int?> zoomLevel = default)
        {
            Name = name;
            IbanOption = iban;
            BicOption = bic;
            AccountNumberOption = accountNumber;
            OpeningBalanceOption = openingBalance;
            OpeningBalanceDateOption = openingBalanceDate;
            VirtualBalanceOption = virtualBalance;
            CurrencyIdOption = currencyId;
            CurrencyCodeOption = currencyCode;
            ActiveOption = active;
            OrderOption = order;
            IncludeNetWorthOption = includeNetWorth;
            AccountRoleOption = accountRole;
            CreditCardTypeOption = creditCardType;
            MonthlyPaymentDateOption = monthlyPaymentDate;
            LiabilityTypeOption = liabilityType;
            InterestOption = interest;
            InterestPeriodOption = interestPeriod;
            NotesOption = notes;
            LatitudeOption = latitude;
            LongitudeOption = longitude;
            ZoomLevelOption = zoomLevel;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AccountRole
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccountRoleProperty?> AccountRoleOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccountRole
        /// </summary>
        [JsonPropertyName("account_role")]
        public AccountRoleProperty? AccountRole { get { return this.AccountRoleOption; } set { this.AccountRoleOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreditCardType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreditCardTypeProperty?> CreditCardTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreditCardType
        /// </summary>
        [JsonPropertyName("credit_card_type")]
        public CreditCardTypeProperty? CreditCardType { get { return this.CreditCardTypeOption; } set { this.CreditCardTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of LiabilityType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<LiabilityTypeProperty?> LiabilityTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets LiabilityType
        /// </summary>
        [JsonPropertyName("liability_type")]
        public LiabilityTypeProperty? LiabilityType { get { return this.LiabilityTypeOption; } set { this.LiabilityTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of InterestPeriod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InterestPeriodProperty?> InterestPeriodOption { get; private set; }

        /// <summary>
        /// Gets or Sets InterestPeriod
        /// </summary>
        [JsonPropertyName("interest_period")]
        public InterestPeriodProperty? InterestPeriod { get { return this.InterestPeriodOption; } set { this.InterestPeriodOption = new(value); } }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>My checking account</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of Iban
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IbanOption { get; private set; }

        /// <summary>
        /// Gets or Sets Iban
        /// </summary>
        /* <example>GB98MIDL07009312345678</example> */
        [JsonPropertyName("iban")]
        public string? Iban { get { return this.IbanOption; } set { this.IbanOption = new(value); } }

        /// <summary>
        /// Used to track the state of Bic
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BicOption { get; private set; }

        /// <summary>
        /// Gets or Sets Bic
        /// </summary>
        /* <example>BOFAUS3N</example> */
        [JsonPropertyName("bic")]
        public string? Bic { get { return this.BicOption; } set { this.BicOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AccountNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        /* <example>7009312345678</example> */
        [JsonPropertyName("account_number")]
        public string? AccountNumber { get { return this.AccountNumberOption; } set { this.AccountNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of OpeningBalance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OpeningBalanceOption { get; private set; }

        /// <summary>
        /// Gets or Sets OpeningBalance
        /// </summary>
        /* <example>-1012.12</example> */
        [JsonPropertyName("opening_balance")]
        public string? OpeningBalance { get { return this.OpeningBalanceOption; } set { this.OpeningBalanceOption = new(value); } }

        /// <summary>
        /// Used to track the state of OpeningBalanceDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> OpeningBalanceDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets OpeningBalanceDate
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("opening_balance_date")]
        public DateTime? OpeningBalanceDate { get { return this.OpeningBalanceDateOption; } set { this.OpeningBalanceDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of VirtualBalance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VirtualBalanceOption { get; private set; }

        /// <summary>
        /// Gets or Sets VirtualBalance
        /// </summary>
        /* <example>123.45</example> */
        [JsonPropertyName("virtual_balance")]
        public string? VirtualBalance { get { return this.VirtualBalanceOption; } set { this.VirtualBalanceOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyIdOption { get; private set; }

        /// <summary>
        /// Use either currency_id or currency_code. Defaults to the user&#39;s financial administration&#39;s currency.
        /// </summary>
        /// <value>Use either currency_id or currency_code. Defaults to the user&#39;s financial administration&#39;s currency.</value>
        /* <example>12</example> */
        [JsonPropertyName("currency_id")]
        public string? CurrencyId { get { return this.CurrencyIdOption; } set { this.CurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// Use either currency_id or currency_code. Defaults to the user&#39;s financial administration&#39;s currency.
        /// </summary>
        /// <value>Use either currency_id or currency_code. Defaults to the user&#39;s financial administration&#39;s currency.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("currency_code")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// If omitted, defaults to true.
        /// </summary>
        /// <value>If omitted, defaults to true.</value>
        /* <example>false</example> */
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Order
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OrderOption { get; private set; }

        /// <summary>
        /// Order of the account
        /// </summary>
        /// <value>Order of the account</value>
        /* <example>1</example> */
        [JsonPropertyName("order")]
        public int? Order { get { return this.OrderOption; } set { this.OrderOption = new(value); } }

        /// <summary>
        /// Used to track the state of IncludeNetWorth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IncludeNetWorthOption { get; private set; }

        /// <summary>
        /// If omitted, defaults to true.
        /// </summary>
        /// <value>If omitted, defaults to true.</value>
        /* <example>true</example> */
        [JsonPropertyName("include_net_worth")]
        public bool? IncludeNetWorth { get { return this.IncludeNetWorthOption; } set { this.IncludeNetWorthOption = new(value); } }

        /// <summary>
        /// Used to track the state of MonthlyPaymentDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> MonthlyPaymentDateOption { get; private set; }

        /// <summary>
        /// Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank.
        /// </summary>
        /// <value>Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank.</value>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("monthly_payment_date")]
        public DateTime? MonthlyPaymentDate { get { return this.MonthlyPaymentDateOption; } set { this.MonthlyPaymentDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Interest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InterestOption { get; private set; }

        /// <summary>
        /// Mandatory when type is liability. Interest percentage.
        /// </summary>
        /// <value>Mandatory when type is liability. Interest percentage.</value>
        /* <example>5.3</example> */
        [JsonPropertyName("interest")]
        public string? Interest { get { return this.InterestOption; } set { this.InterestOption = new(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        /* <example>Some example notes</example> */
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Latitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> LatitudeOption { get; private set; }

        /// <summary>
        /// Latitude of the account&#39;s location, if applicable. Can be used to draw a map. If omitted, the existing location will be kept. If submitted as NULL, the current location will be removed.
        /// </summary>
        /// <value>Latitude of the account&#39;s location, if applicable. Can be used to draw a map. If omitted, the existing location will be kept. If submitted as NULL, the current location will be removed.</value>
        /* <example>51.983333</example> */
        [JsonPropertyName("latitude")]
        public double? Latitude { get { return this.LatitudeOption; } set { this.LatitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Longitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> LongitudeOption { get; private set; }

        /// <summary>
        /// Latitude of the account&#39;s location, if applicable. Can be used to draw a map. If omitted, the existing location will be kept. If submitted as NULL, the current location will be removed.
        /// </summary>
        /// <value>Latitude of the account&#39;s location, if applicable. Can be used to draw a map. If omitted, the existing location will be kept. If submitted as NULL, the current location will be removed.</value>
        /* <example>5.916667</example> */
        [JsonPropertyName("longitude")]
        public double? Longitude { get { return this.LongitudeOption; } set { this.LongitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ZoomLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ZoomLevelOption { get; private set; }

        /// <summary>
        /// Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels. If omitted, the existing location will be kept. If submitted as NULL, the current location will be removed.
        /// </summary>
        /// <value>Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels. If omitted, the existing location will be kept. If submitted as NULL, the current location will be removed.</value>
        /* <example>6</example> */
        [JsonPropertyName("zoom_level")]
        public int? ZoomLevel { get { return this.ZoomLevelOption; } set { this.ZoomLevelOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountUpdate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  Bic: ").Append(Bic).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  OpeningBalance: ").Append(OpeningBalance).Append("\n");
            sb.Append("  OpeningBalanceDate: ").Append(OpeningBalanceDate).Append("\n");
            sb.Append("  VirtualBalance: ").Append(VirtualBalance).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  IncludeNetWorth: ").Append(IncludeNetWorth).Append("\n");
            sb.Append("  AccountRole: ").Append(AccountRole).Append("\n");
            sb.Append("  CreditCardType: ").Append(CreditCardType).Append("\n");
            sb.Append("  MonthlyPaymentDate: ").Append(MonthlyPaymentDate).Append("\n");
            sb.Append("  LiabilityType: ").Append(LiabilityType).Append("\n");
            sb.Append("  Interest: ").Append(Interest).Append("\n");
            sb.Append("  InterestPeriod: ").Append(InterestPeriod).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  ZoomLevel: ").Append(ZoomLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AccountUpdate" />
    /// </summary>
    public class AccountUpdateJsonConverter : JsonConverter<AccountUpdate>
    {
        /// <summary>
        /// The format to use to serialize OpeningBalanceDate
        /// </summary>
        public static string OpeningBalanceDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize MonthlyPaymentDate
        /// </summary>
        public static string MonthlyPaymentDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AccountUpdate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AccountUpdate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> iban = default;
            Option<string?> bic = default;
            Option<string?> accountNumber = default;
            Option<string?> openingBalance = default;
            Option<DateTime?> openingBalanceDate = default;
            Option<string?> virtualBalance = default;
            Option<string?> currencyId = default;
            Option<string?> currencyCode = default;
            Option<bool?> active = default;
            Option<int?> order = default;
            Option<bool?> includeNetWorth = default;
            Option<AccountRoleProperty?> accountRole = default;
            Option<CreditCardTypeProperty?> creditCardType = default;
            Option<DateTime?> monthlyPaymentDate = default;
            Option<LiabilityTypeProperty?> liabilityType = default;
            Option<string?> interest = default;
            Option<InterestPeriodProperty?> interestPeriod = default;
            Option<string?> notes = default;
            Option<double?> latitude = default;
            Option<double?> longitude = default;
            Option<int?> zoomLevel = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "iban":
                            iban = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "bic":
                            bic = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "account_number":
                            accountNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "opening_balance":
                            openingBalance = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "opening_balance_date":
                            openingBalanceDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "virtual_balance":
                            virtualBalance = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "active":
                            active = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "order":
                            order = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "include_net_worth":
                            includeNetWorth = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "account_role":
                            string? accountRoleRawValue = utf8JsonReader.GetString();
                            if (accountRoleRawValue != null)
                                accountRole = new Option<AccountRoleProperty?>(AccountRolePropertyValueConverter.FromStringOrDefault(accountRoleRawValue));
                            break;
                        case "credit_card_type":
                            string? creditCardTypeRawValue = utf8JsonReader.GetString();
                            if (creditCardTypeRawValue != null)
                                creditCardType = new Option<CreditCardTypeProperty?>(CreditCardTypePropertyValueConverter.FromStringOrDefault(creditCardTypeRawValue));
                            break;
                        case "monthly_payment_date":
                            monthlyPaymentDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "liability_type":
                            string? liabilityTypeRawValue = utf8JsonReader.GetString();
                            if (liabilityTypeRawValue != null)
                                liabilityType = new Option<LiabilityTypeProperty?>(LiabilityTypePropertyValueConverter.FromStringOrDefault(liabilityTypeRawValue));
                            break;
                        case "interest":
                            interest = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "interest_period":
                            string? interestPeriodRawValue = utf8JsonReader.GetString();
                            if (interestPeriodRawValue != null)
                                interestPeriod = new Option<InterestPeriodProperty?>(InterestPeriodPropertyValueConverter.FromStringOrDefault(interestPeriodRawValue));
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "latitude":
                            latitude = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "longitude":
                            longitude = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "zoom_level":
                            zoomLevel = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class AccountUpdate.", nameof(name));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class AccountUpdate.");

            if (openingBalance.IsSet && openingBalance.Value == null)
                throw new ArgumentNullException(nameof(openingBalance), "Property is not nullable for class AccountUpdate.");

            if (virtualBalance.IsSet && virtualBalance.Value == null)
                throw new ArgumentNullException(nameof(virtualBalance), "Property is not nullable for class AccountUpdate.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class AccountUpdate.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class AccountUpdate.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class AccountUpdate.");

            if (order.IsSet && order.Value == null)
                throw new ArgumentNullException(nameof(order), "Property is not nullable for class AccountUpdate.");

            if (includeNetWorth.IsSet && includeNetWorth.Value == null)
                throw new ArgumentNullException(nameof(includeNetWorth), "Property is not nullable for class AccountUpdate.");

            return new AccountUpdate(name.Value!, iban, bic, accountNumber, openingBalance, openingBalanceDate, virtualBalance, currencyId, currencyCode, active, order, includeNetWorth, accountRole, creditCardType, monthlyPaymentDate, liabilityType, interest, interestPeriod, notes, latitude, longitude, zoomLevel);
        }

        /// <summary>
        /// Serializes a <see cref="AccountUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AccountUpdate accountUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, accountUpdate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AccountUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AccountUpdate accountUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (accountUpdate.Name == null)
                throw new ArgumentNullException(nameof(accountUpdate.Name), "Property is required for class AccountUpdate.");

            if (accountUpdate.OpeningBalanceOption.IsSet && accountUpdate.OpeningBalance == null)
                throw new ArgumentNullException(nameof(accountUpdate.OpeningBalance), "Property is required for class AccountUpdate.");

            if (accountUpdate.VirtualBalanceOption.IsSet && accountUpdate.VirtualBalance == null)
                throw new ArgumentNullException(nameof(accountUpdate.VirtualBalance), "Property is required for class AccountUpdate.");

            if (accountUpdate.CurrencyIdOption.IsSet && accountUpdate.CurrencyId == null)
                throw new ArgumentNullException(nameof(accountUpdate.CurrencyId), "Property is required for class AccountUpdate.");

            if (accountUpdate.CurrencyCodeOption.IsSet && accountUpdate.CurrencyCode == null)
                throw new ArgumentNullException(nameof(accountUpdate.CurrencyCode), "Property is required for class AccountUpdate.");

            writer.WriteString("name", accountUpdate.Name);

            if (accountUpdate.IbanOption.IsSet)
                if (accountUpdate.IbanOption.Value != null)
                    writer.WriteString("iban", accountUpdate.Iban);
                else
                    writer.WriteNull("iban");

            if (accountUpdate.BicOption.IsSet)
                if (accountUpdate.BicOption.Value != null)
                    writer.WriteString("bic", accountUpdate.Bic);
                else
                    writer.WriteNull("bic");

            if (accountUpdate.AccountNumberOption.IsSet)
                if (accountUpdate.AccountNumberOption.Value != null)
                    writer.WriteString("account_number", accountUpdate.AccountNumber);
                else
                    writer.WriteNull("account_number");

            if (accountUpdate.OpeningBalanceOption.IsSet)
                writer.WriteString("opening_balance", accountUpdate.OpeningBalance);

            if (accountUpdate.OpeningBalanceDateOption.IsSet)
                if (accountUpdate.OpeningBalanceDateOption.Value != null)
                    writer.WriteString("opening_balance_date", accountUpdate.OpeningBalanceDateOption.Value!.Value.ToString(OpeningBalanceDateFormat));
                else
                    writer.WriteNull("opening_balance_date");

            if (accountUpdate.VirtualBalanceOption.IsSet)
                writer.WriteString("virtual_balance", accountUpdate.VirtualBalance);

            if (accountUpdate.CurrencyIdOption.IsSet)
                writer.WriteString("currency_id", accountUpdate.CurrencyId);

            if (accountUpdate.CurrencyCodeOption.IsSet)
                writer.WriteString("currency_code", accountUpdate.CurrencyCode);

            if (accountUpdate.ActiveOption.IsSet)
                writer.WriteBoolean("active", accountUpdate.ActiveOption.Value!.Value);

            if (accountUpdate.OrderOption.IsSet)
                writer.WriteNumber("order", accountUpdate.OrderOption.Value!.Value);

            if (accountUpdate.IncludeNetWorthOption.IsSet)
                writer.WriteBoolean("include_net_worth", accountUpdate.IncludeNetWorthOption.Value!.Value);

            if (accountUpdate.AccountRoleOption.IsSet)
                if (accountUpdate.AccountRoleOption!.Value != null)
                {
                    var accountRoleRawValue = AccountRolePropertyValueConverter.ToJsonValue(accountUpdate.AccountRoleOption.Value!.Value);
                    writer.WriteString("account_role", accountRoleRawValue);
                }
                else
                    writer.WriteNull("account_role");
            if (accountUpdate.CreditCardTypeOption.IsSet)
                if (accountUpdate.CreditCardTypeOption!.Value != null)
                {
                    var creditCardTypeRawValue = CreditCardTypePropertyValueConverter.ToJsonValue(accountUpdate.CreditCardTypeOption.Value!.Value);
                    writer.WriteString("credit_card_type", creditCardTypeRawValue);
                }
                else
                    writer.WriteNull("credit_card_type");
            if (accountUpdate.MonthlyPaymentDateOption.IsSet)
                if (accountUpdate.MonthlyPaymentDateOption.Value != null)
                    writer.WriteString("monthly_payment_date", accountUpdate.MonthlyPaymentDateOption.Value!.Value.ToString(MonthlyPaymentDateFormat));
                else
                    writer.WriteNull("monthly_payment_date");

            if (accountUpdate.LiabilityTypeOption.IsSet)
                if (accountUpdate.LiabilityTypeOption!.Value != null)
                {
                    var liabilityTypeRawValue = LiabilityTypePropertyValueConverter.ToJsonValue(accountUpdate.LiabilityTypeOption.Value!.Value);
                    writer.WriteString("liability_type", liabilityTypeRawValue);
                }
                else
                    writer.WriteNull("liability_type");
            if (accountUpdate.InterestOption.IsSet)
                if (accountUpdate.InterestOption.Value != null)
                    writer.WriteString("interest", accountUpdate.Interest);
                else
                    writer.WriteNull("interest");

            if (accountUpdate.InterestPeriodOption.IsSet)
                if (accountUpdate.InterestPeriodOption!.Value != null)
                {
                    var interestPeriodRawValue = InterestPeriodPropertyValueConverter.ToJsonValue(accountUpdate.InterestPeriodOption.Value!.Value);
                    writer.WriteString("interest_period", interestPeriodRawValue);
                }
                else
                    writer.WriteNull("interest_period");
            if (accountUpdate.NotesOption.IsSet)
                if (accountUpdate.NotesOption.Value != null)
                    writer.WriteString("notes", accountUpdate.Notes);
                else
                    writer.WriteNull("notes");

            if (accountUpdate.LatitudeOption.IsSet)
                if (accountUpdate.LatitudeOption.Value != null)
                    writer.WriteNumber("latitude", accountUpdate.LatitudeOption.Value!.Value);
                else
                    writer.WriteNull("latitude");

            if (accountUpdate.LongitudeOption.IsSet)
                if (accountUpdate.LongitudeOption.Value != null)
                    writer.WriteNumber("longitude", accountUpdate.LongitudeOption.Value!.Value);
                else
                    writer.WriteNull("longitude");

            if (accountUpdate.ZoomLevelOption.IsSet)
                if (accountUpdate.ZoomLevelOption.Value != null)
                    writer.WriteNumber("zoom_level", accountUpdate.ZoomLevelOption.Value!.Value);
                else
                    writer.WriteNull("zoom_level");
        }
    }
}
