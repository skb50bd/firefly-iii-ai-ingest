// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// AutocompleteAccount
    /// </summary>
    public partial class AutocompleteAccount : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutocompleteAccount" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">Name of the account found by an auto-complete search.</param>
        /// <param name="nameWithBalance">Asset accounts and liabilities have a second field with the given date&#39;s account balance in the account currency or primary currency.</param>
        /// <param name="type">Account type of the account found by the auto-complete search.</param>
        /// <param name="currencyId">ID for the currency used by this account. If the user prefers amounts converted to their primary currency, this primary currency is used instead.</param>
        /// <param name="currencyName">Currency name for the currency used by this account. If the user prefers amounts converted to their primary currency, this primary currency is used instead.</param>
        /// <param name="currencyCode">Currency code for the currency used by this account. If the user prefers amounts converted to their primary currency, this primary currency is used instead.</param>
        /// <param name="currencySymbol">Currency symbol for the currency used by this account. If the user prefers amounts converted to their primary currency, this primary currency is used instead.</param>
        /// <param name="currencyDecimalPlaces">Number of decimal places for the currency used by this account. If the user prefers amounts converted to their primary currency, this primary currency is used instead.</param>
        /// <param name="accountCurrencyId">ID for the currency used by this account. Even if \&quot;convertToPrimary\&quot; is on, the account currency ID is displayed here.</param>
        /// <param name="accountCurrencyName">Name for the currency used by this account. Even if \&quot;convertToPrimary\&quot; is on, the account currency name is displayed here.</param>
        /// <param name="accountCurrencyCode">Code for the currency used by this account. Even if \&quot;convertToPrimary\&quot; is on, the account currency code is displayed here.</param>
        /// <param name="accountCurrencySymbol">Code for the currency used by this account. Even if \&quot;convertToPrimary\&quot; is on, the account currency code is displayed here.</param>
        /// <param name="accountCurrencyDecimalPlaces">Number of decimal places for the currency used by this account. Even if \&quot;convertToPrimary\&quot; is on, the account currency code is displayed here.</param>
        [JsonConstructor]
        public AutocompleteAccount(string id, string name, string nameWithBalance, string type, string currencyId, string currencyName, string currencyCode, string currencySymbol, int currencyDecimalPlaces, Option<string?> accountCurrencyId = default, Option<string?> accountCurrencyName = default, Option<string?> accountCurrencyCode = default, Option<string?> accountCurrencySymbol = default, Option<int?> accountCurrencyDecimalPlaces = default)
        {
            Id = id;
            Name = name;
            NameWithBalance = nameWithBalance;
            Type = type;
            CurrencyId = currencyId;
            CurrencyName = currencyName;
            CurrencyCode = currencyCode;
            CurrencySymbol = currencySymbol;
            CurrencyDecimalPlaces = currencyDecimalPlaces;
            AccountCurrencyIdOption = accountCurrencyId;
            AccountCurrencyNameOption = accountCurrencyName;
            AccountCurrencyCodeOption = accountCurrencyCode;
            AccountCurrencySymbolOption = accountCurrencySymbol;
            AccountCurrencyDecimalPlacesOption = accountCurrencyDecimalPlaces;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /* <example>2</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the account found by an auto-complete search.
        /// </summary>
        /// <value>Name of the account found by an auto-complete search.</value>
        /* <example>Checking Account</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Asset accounts and liabilities have a second field with the given date&#39;s account balance in the account currency or primary currency.
        /// </summary>
        /// <value>Asset accounts and liabilities have a second field with the given date&#39;s account balance in the account currency or primary currency.</value>
        /* <example>Checking Account ($123.45)</example> */
        [JsonPropertyName("name_with_balance")]
        public string NameWithBalance { get; set; }

        /// <summary>
        /// Account type of the account found by the auto-complete search.
        /// </summary>
        /// <value>Account type of the account found by the auto-complete search.</value>
        /* <example>Asset account</example> */
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// ID for the currency used by this account. If the user prefers amounts converted to their primary currency, this primary currency is used instead.
        /// </summary>
        /// <value>ID for the currency used by this account. If the user prefers amounts converted to their primary currency, this primary currency is used instead.</value>
        /* <example>12</example> */
        [JsonPropertyName("currency_id")]
        public string CurrencyId { get; set; }

        /// <summary>
        /// Currency name for the currency used by this account. If the user prefers amounts converted to their primary currency, this primary currency is used instead.
        /// </summary>
        /// <value>Currency name for the currency used by this account. If the user prefers amounts converted to their primary currency, this primary currency is used instead.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("currency_name")]
        public string CurrencyName { get; set; }

        /// <summary>
        /// Currency code for the currency used by this account. If the user prefers amounts converted to their primary currency, this primary currency is used instead.
        /// </summary>
        /// <value>Currency code for the currency used by this account. If the user prefers amounts converted to their primary currency, this primary currency is used instead.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("currency_code")]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Currency symbol for the currency used by this account. If the user prefers amounts converted to their primary currency, this primary currency is used instead.
        /// </summary>
        /// <value>Currency symbol for the currency used by this account. If the user prefers amounts converted to their primary currency, this primary currency is used instead.</value>
        /* <example>$</example> */
        [JsonPropertyName("currency_symbol")]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Number of decimal places for the currency used by this account. If the user prefers amounts converted to their primary currency, this primary currency is used instead.
        /// </summary>
        /// <value>Number of decimal places for the currency used by this account. If the user prefers amounts converted to their primary currency, this primary currency is used instead.</value>
        /* <example>2</example> */
        [JsonPropertyName("currency_decimal_places")]
        public int CurrencyDecimalPlaces { get; set; }

        /// <summary>
        /// Used to track the state of AccountCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AccountCurrencyIdOption { get; private set; }

        /// <summary>
        /// ID for the currency used by this account. Even if \&quot;convertToPrimary\&quot; is on, the account currency ID is displayed here.
        /// </summary>
        /// <value>ID for the currency used by this account. Even if \&quot;convertToPrimary\&quot; is on, the account currency ID is displayed here.</value>
        /* <example>2</example> */
        [JsonPropertyName("account_currency_id")]
        public string? AccountCurrencyId { get { return this.AccountCurrencyIdOption; } set { this.AccountCurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountCurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AccountCurrencyNameOption { get; private set; }

        /// <summary>
        /// Name for the currency used by this account. Even if \&quot;convertToPrimary\&quot; is on, the account currency name is displayed here.
        /// </summary>
        /// <value>Name for the currency used by this account. Even if \&quot;convertToPrimary\&quot; is on, the account currency name is displayed here.</value>
        /* <example>US Dollar</example> */
        [JsonPropertyName("account_currency_name")]
        public string? AccountCurrencyName { get { return this.AccountCurrencyNameOption; } set { this.AccountCurrencyNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AccountCurrencyCodeOption { get; private set; }

        /// <summary>
        /// Code for the currency used by this account. Even if \&quot;convertToPrimary\&quot; is on, the account currency code is displayed here.
        /// </summary>
        /// <value>Code for the currency used by this account. Even if \&quot;convertToPrimary\&quot; is on, the account currency code is displayed here.</value>
        /* <example>USD</example> */
        [JsonPropertyName("account_currency_code")]
        public string? AccountCurrencyCode { get { return this.AccountCurrencyCodeOption; } set { this.AccountCurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountCurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AccountCurrencySymbolOption { get; private set; }

        /// <summary>
        /// Code for the currency used by this account. Even if \&quot;convertToPrimary\&quot; is on, the account currency code is displayed here.
        /// </summary>
        /// <value>Code for the currency used by this account. Even if \&quot;convertToPrimary\&quot; is on, the account currency code is displayed here.</value>
        /* <example>$</example> */
        [JsonPropertyName("account_currency_symbol")]
        public string? AccountCurrencySymbol { get { return this.AccountCurrencySymbolOption; } set { this.AccountCurrencySymbolOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountCurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AccountCurrencyDecimalPlacesOption { get; private set; }

        /// <summary>
        /// Number of decimal places for the currency used by this account. Even if \&quot;convertToPrimary\&quot; is on, the account currency code is displayed here.
        /// </summary>
        /// <value>Number of decimal places for the currency used by this account. Even if \&quot;convertToPrimary\&quot; is on, the account currency code is displayed here.</value>
        /* <example>2</example> */
        [JsonPropertyName("account_currency_decimal_places")]
        public int? AccountCurrencyDecimalPlaces { get { return this.AccountCurrencyDecimalPlacesOption; } set { this.AccountCurrencyDecimalPlacesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutocompleteAccount {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NameWithBalance: ").Append(NameWithBalance).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  CurrencyDecimalPlaces: ").Append(CurrencyDecimalPlaces).Append("\n");
            sb.Append("  AccountCurrencyId: ").Append(AccountCurrencyId).Append("\n");
            sb.Append("  AccountCurrencyName: ").Append(AccountCurrencyName).Append("\n");
            sb.Append("  AccountCurrencyCode: ").Append(AccountCurrencyCode).Append("\n");
            sb.Append("  AccountCurrencySymbol: ").Append(AccountCurrencySymbol).Append("\n");
            sb.Append("  AccountCurrencyDecimalPlaces: ").Append(AccountCurrencyDecimalPlaces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AutocompleteAccount" />
    /// </summary>
    public class AutocompleteAccountJsonConverter : JsonConverter<AutocompleteAccount>
    {
        /// <summary>
        /// Deserializes json to <see cref="AutocompleteAccount" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AutocompleteAccount Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> nameWithBalance = default;
            Option<string?> type = default;
            Option<string?> currencyId = default;
            Option<string?> currencyName = default;
            Option<string?> currencyCode = default;
            Option<string?> currencySymbol = default;
            Option<int?> currencyDecimalPlaces = default;
            Option<string?> accountCurrencyId = default;
            Option<string?> accountCurrencyName = default;
            Option<string?> accountCurrencyCode = default;
            Option<string?> accountCurrencySymbol = default;
            Option<int?> accountCurrencyDecimalPlaces = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name_with_balance":
                            nameWithBalance = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_name":
                            currencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_symbol":
                            currencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_decimal_places":
                            currencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "account_currency_id":
                            accountCurrencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "account_currency_name":
                            accountCurrencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "account_currency_code":
                            accountCurrencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "account_currency_symbol":
                            accountCurrencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "account_currency_decimal_places":
                            accountCurrencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class AutocompleteAccount.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class AutocompleteAccount.", nameof(name));

            if (!nameWithBalance.IsSet)
                throw new ArgumentException("Property is required for class AutocompleteAccount.", nameof(nameWithBalance));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class AutocompleteAccount.", nameof(type));

            if (!currencyId.IsSet)
                throw new ArgumentException("Property is required for class AutocompleteAccount.", nameof(currencyId));

            if (!currencyName.IsSet)
                throw new ArgumentException("Property is required for class AutocompleteAccount.", nameof(currencyName));

            if (!currencyCode.IsSet)
                throw new ArgumentException("Property is required for class AutocompleteAccount.", nameof(currencyCode));

            if (!currencySymbol.IsSet)
                throw new ArgumentException("Property is required for class AutocompleteAccount.", nameof(currencySymbol));

            if (!currencyDecimalPlaces.IsSet)
                throw new ArgumentException("Property is required for class AutocompleteAccount.", nameof(currencyDecimalPlaces));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AutocompleteAccount.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class AutocompleteAccount.");

            if (nameWithBalance.IsSet && nameWithBalance.Value == null)
                throw new ArgumentNullException(nameof(nameWithBalance), "Property is not nullable for class AutocompleteAccount.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class AutocompleteAccount.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class AutocompleteAccount.");

            if (currencyName.IsSet && currencyName.Value == null)
                throw new ArgumentNullException(nameof(currencyName), "Property is not nullable for class AutocompleteAccount.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class AutocompleteAccount.");

            if (currencySymbol.IsSet && currencySymbol.Value == null)
                throw new ArgumentNullException(nameof(currencySymbol), "Property is not nullable for class AutocompleteAccount.");

            if (currencyDecimalPlaces.IsSet && currencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(currencyDecimalPlaces), "Property is not nullable for class AutocompleteAccount.");

            if (accountCurrencyId.IsSet && accountCurrencyId.Value == null)
                throw new ArgumentNullException(nameof(accountCurrencyId), "Property is not nullable for class AutocompleteAccount.");

            if (accountCurrencyName.IsSet && accountCurrencyName.Value == null)
                throw new ArgumentNullException(nameof(accountCurrencyName), "Property is not nullable for class AutocompleteAccount.");

            if (accountCurrencyCode.IsSet && accountCurrencyCode.Value == null)
                throw new ArgumentNullException(nameof(accountCurrencyCode), "Property is not nullable for class AutocompleteAccount.");

            if (accountCurrencySymbol.IsSet && accountCurrencySymbol.Value == null)
                throw new ArgumentNullException(nameof(accountCurrencySymbol), "Property is not nullable for class AutocompleteAccount.");

            if (accountCurrencyDecimalPlaces.IsSet && accountCurrencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(accountCurrencyDecimalPlaces), "Property is not nullable for class AutocompleteAccount.");

            return new AutocompleteAccount(id.Value!, name.Value!, nameWithBalance.Value!, type.Value!, currencyId.Value!, currencyName.Value!, currencyCode.Value!, currencySymbol.Value!, currencyDecimalPlaces.Value!.Value!, accountCurrencyId, accountCurrencyName, accountCurrencyCode, accountCurrencySymbol, accountCurrencyDecimalPlaces);
        }

        /// <summary>
        /// Serializes a <see cref="AutocompleteAccount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="autocompleteAccount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AutocompleteAccount autocompleteAccount, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, autocompleteAccount, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AutocompleteAccount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="autocompleteAccount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AutocompleteAccount autocompleteAccount, JsonSerializerOptions jsonSerializerOptions)
        {
            if (autocompleteAccount.Id == null)
                throw new ArgumentNullException(nameof(autocompleteAccount.Id), "Property is required for class AutocompleteAccount.");

            if (autocompleteAccount.Name == null)
                throw new ArgumentNullException(nameof(autocompleteAccount.Name), "Property is required for class AutocompleteAccount.");

            if (autocompleteAccount.NameWithBalance == null)
                throw new ArgumentNullException(nameof(autocompleteAccount.NameWithBalance), "Property is required for class AutocompleteAccount.");

            if (autocompleteAccount.Type == null)
                throw new ArgumentNullException(nameof(autocompleteAccount.Type), "Property is required for class AutocompleteAccount.");

            if (autocompleteAccount.CurrencyId == null)
                throw new ArgumentNullException(nameof(autocompleteAccount.CurrencyId), "Property is required for class AutocompleteAccount.");

            if (autocompleteAccount.CurrencyName == null)
                throw new ArgumentNullException(nameof(autocompleteAccount.CurrencyName), "Property is required for class AutocompleteAccount.");

            if (autocompleteAccount.CurrencyCode == null)
                throw new ArgumentNullException(nameof(autocompleteAccount.CurrencyCode), "Property is required for class AutocompleteAccount.");

            if (autocompleteAccount.CurrencySymbol == null)
                throw new ArgumentNullException(nameof(autocompleteAccount.CurrencySymbol), "Property is required for class AutocompleteAccount.");

            if (autocompleteAccount.AccountCurrencyIdOption.IsSet && autocompleteAccount.AccountCurrencyId == null)
                throw new ArgumentNullException(nameof(autocompleteAccount.AccountCurrencyId), "Property is required for class AutocompleteAccount.");

            if (autocompleteAccount.AccountCurrencyNameOption.IsSet && autocompleteAccount.AccountCurrencyName == null)
                throw new ArgumentNullException(nameof(autocompleteAccount.AccountCurrencyName), "Property is required for class AutocompleteAccount.");

            if (autocompleteAccount.AccountCurrencyCodeOption.IsSet && autocompleteAccount.AccountCurrencyCode == null)
                throw new ArgumentNullException(nameof(autocompleteAccount.AccountCurrencyCode), "Property is required for class AutocompleteAccount.");

            if (autocompleteAccount.AccountCurrencySymbolOption.IsSet && autocompleteAccount.AccountCurrencySymbol == null)
                throw new ArgumentNullException(nameof(autocompleteAccount.AccountCurrencySymbol), "Property is required for class AutocompleteAccount.");

            writer.WriteString("id", autocompleteAccount.Id);

            writer.WriteString("name", autocompleteAccount.Name);

            writer.WriteString("name_with_balance", autocompleteAccount.NameWithBalance);

            writer.WriteString("type", autocompleteAccount.Type);

            writer.WriteString("currency_id", autocompleteAccount.CurrencyId);

            writer.WriteString("currency_name", autocompleteAccount.CurrencyName);

            writer.WriteString("currency_code", autocompleteAccount.CurrencyCode);

            writer.WriteString("currency_symbol", autocompleteAccount.CurrencySymbol);

            writer.WriteNumber("currency_decimal_places", autocompleteAccount.CurrencyDecimalPlaces);

            if (autocompleteAccount.AccountCurrencyIdOption.IsSet)
                writer.WriteString("account_currency_id", autocompleteAccount.AccountCurrencyId);

            if (autocompleteAccount.AccountCurrencyNameOption.IsSet)
                writer.WriteString("account_currency_name", autocompleteAccount.AccountCurrencyName);

            if (autocompleteAccount.AccountCurrencyCodeOption.IsSet)
                writer.WriteString("account_currency_code", autocompleteAccount.AccountCurrencyCode);

            if (autocompleteAccount.AccountCurrencySymbolOption.IsSet)
                writer.WriteString("account_currency_symbol", autocompleteAccount.AccountCurrencySymbol);

            if (autocompleteAccount.AccountCurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("account_currency_decimal_places", autocompleteAccount.AccountCurrencyDecimalPlacesOption.Value!.Value);
        }
    }
}
