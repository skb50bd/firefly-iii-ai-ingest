// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// The possible roles of the user in this user group are documented here: https://docs.firefly-iii.org/references/firefly-iii/api/ 
    /// </summary>
    /// <value>The possible roles of the user in this user group are documented here: https://docs.firefly-iii.org/references/firefly-iii/api/ </value>
    public enum UserGroupReadRole
    {
        /// <summary>
        /// Enum Owner for value: owner
        /// </summary>
        Owner = 1,

        /// <summary>
        /// Enum Ro for value: ro
        /// </summary>
        Ro = 2,

        /// <summary>
        /// Enum MngTrx for value: mng_trx
        /// </summary>
        MngTrx = 3,

        /// <summary>
        /// Enum MngMeta for value: mng_meta
        /// </summary>
        MngMeta = 4,

        /// <summary>
        /// Enum ReadBudgets for value: read_budgets
        /// </summary>
        ReadBudgets = 5,

        /// <summary>
        /// Enum ReadPiggies for value: read_piggies
        /// </summary>
        ReadPiggies = 6,

        /// <summary>
        /// Enum ReadSubscriptions for value: read_subscriptions
        /// </summary>
        ReadSubscriptions = 7,

        /// <summary>
        /// Enum ReadRules for value: read_rules
        /// </summary>
        ReadRules = 8,

        /// <summary>
        /// Enum ReadRecurring for value: read_recurring
        /// </summary>
        ReadRecurring = 9,

        /// <summary>
        /// Enum ReadWebhooks for value: read_webhooks
        /// </summary>
        ReadWebhooks = 10,

        /// <summary>
        /// Enum ReadCurrencies for value: read_currencies
        /// </summary>
        ReadCurrencies = 11,

        /// <summary>
        /// Enum MngBudgets for value: mng_budgets
        /// </summary>
        MngBudgets = 12,

        /// <summary>
        /// Enum MngPiggies for value: mng_piggies
        /// </summary>
        MngPiggies = 13,

        /// <summary>
        /// Enum MngSubscriptions for value: mng_subscriptions
        /// </summary>
        MngSubscriptions = 14,

        /// <summary>
        /// Enum MngRules for value: mng_rules
        /// </summary>
        MngRules = 15,

        /// <summary>
        /// Enum MngRecurring for value: mng_recurring
        /// </summary>
        MngRecurring = 16,

        /// <summary>
        /// Enum MngWebhooks for value: mng_webhooks
        /// </summary>
        MngWebhooks = 17,

        /// <summary>
        /// Enum MngCurrencies for value: mng_currencies
        /// </summary>
        MngCurrencies = 18,

        /// <summary>
        /// Enum ViewReports for value: view_reports
        /// </summary>
        ViewReports = 19,

        /// <summary>
        /// Enum ViewMemberships for value: view_memberships
        /// </summary>
        ViewMemberships = 20,

        /// <summary>
        /// Enum Full for value: full
        /// </summary>
        Full = 21,

        /// <summary>
        /// Enum Owner2 for value: owner
        /// </summary>
        Owner2 = 22
    }

    /// <summary>
    /// Converts <see cref="UserGroupReadRole"/> to and from the JSON value
    /// </summary>
    public static class UserGroupReadRoleValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="UserGroupReadRole"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UserGroupReadRole FromString(string value)
        {
            if (value.Equals("owner"))
                return UserGroupReadRole.Owner;

            if (value.Equals("ro"))
                return UserGroupReadRole.Ro;

            if (value.Equals("mng_trx"))
                return UserGroupReadRole.MngTrx;

            if (value.Equals("mng_meta"))
                return UserGroupReadRole.MngMeta;

            if (value.Equals("read_budgets"))
                return UserGroupReadRole.ReadBudgets;

            if (value.Equals("read_piggies"))
                return UserGroupReadRole.ReadPiggies;

            if (value.Equals("read_subscriptions"))
                return UserGroupReadRole.ReadSubscriptions;

            if (value.Equals("read_rules"))
                return UserGroupReadRole.ReadRules;

            if (value.Equals("read_recurring"))
                return UserGroupReadRole.ReadRecurring;

            if (value.Equals("read_webhooks"))
                return UserGroupReadRole.ReadWebhooks;

            if (value.Equals("read_currencies"))
                return UserGroupReadRole.ReadCurrencies;

            if (value.Equals("mng_budgets"))
                return UserGroupReadRole.MngBudgets;

            if (value.Equals("mng_piggies"))
                return UserGroupReadRole.MngPiggies;

            if (value.Equals("mng_subscriptions"))
                return UserGroupReadRole.MngSubscriptions;

            if (value.Equals("mng_rules"))
                return UserGroupReadRole.MngRules;

            if (value.Equals("mng_recurring"))
                return UserGroupReadRole.MngRecurring;

            if (value.Equals("mng_webhooks"))
                return UserGroupReadRole.MngWebhooks;

            if (value.Equals("mng_currencies"))
                return UserGroupReadRole.MngCurrencies;

            if (value.Equals("view_reports"))
                return UserGroupReadRole.ViewReports;

            if (value.Equals("view_memberships"))
                return UserGroupReadRole.ViewMemberships;

            if (value.Equals("full"))
                return UserGroupReadRole.Full;

            if (value.Equals("owner"))
                return UserGroupReadRole.Owner2;

            throw new NotImplementedException($"Could not convert value to type UserGroupReadRole: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="UserGroupReadRole"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UserGroupReadRole? FromStringOrDefault(string value)
        {
            if (value.Equals("owner"))
                return UserGroupReadRole.Owner;

            if (value.Equals("ro"))
                return UserGroupReadRole.Ro;

            if (value.Equals("mng_trx"))
                return UserGroupReadRole.MngTrx;

            if (value.Equals("mng_meta"))
                return UserGroupReadRole.MngMeta;

            if (value.Equals("read_budgets"))
                return UserGroupReadRole.ReadBudgets;

            if (value.Equals("read_piggies"))
                return UserGroupReadRole.ReadPiggies;

            if (value.Equals("read_subscriptions"))
                return UserGroupReadRole.ReadSubscriptions;

            if (value.Equals("read_rules"))
                return UserGroupReadRole.ReadRules;

            if (value.Equals("read_recurring"))
                return UserGroupReadRole.ReadRecurring;

            if (value.Equals("read_webhooks"))
                return UserGroupReadRole.ReadWebhooks;

            if (value.Equals("read_currencies"))
                return UserGroupReadRole.ReadCurrencies;

            if (value.Equals("mng_budgets"))
                return UserGroupReadRole.MngBudgets;

            if (value.Equals("mng_piggies"))
                return UserGroupReadRole.MngPiggies;

            if (value.Equals("mng_subscriptions"))
                return UserGroupReadRole.MngSubscriptions;

            if (value.Equals("mng_rules"))
                return UserGroupReadRole.MngRules;

            if (value.Equals("mng_recurring"))
                return UserGroupReadRole.MngRecurring;

            if (value.Equals("mng_webhooks"))
                return UserGroupReadRole.MngWebhooks;

            if (value.Equals("mng_currencies"))
                return UserGroupReadRole.MngCurrencies;

            if (value.Equals("view_reports"))
                return UserGroupReadRole.ViewReports;

            if (value.Equals("view_memberships"))
                return UserGroupReadRole.ViewMemberships;

            if (value.Equals("full"))
                return UserGroupReadRole.Full;

            if (value.Equals("owner"))
                return UserGroupReadRole.Owner2;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="UserGroupReadRole"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(UserGroupReadRole value)
        {
            if (value == UserGroupReadRole.Owner)
                return "owner";

            if (value == UserGroupReadRole.Ro)
                return "ro";

            if (value == UserGroupReadRole.MngTrx)
                return "mng_trx";

            if (value == UserGroupReadRole.MngMeta)
                return "mng_meta";

            if (value == UserGroupReadRole.ReadBudgets)
                return "read_budgets";

            if (value == UserGroupReadRole.ReadPiggies)
                return "read_piggies";

            if (value == UserGroupReadRole.ReadSubscriptions)
                return "read_subscriptions";

            if (value == UserGroupReadRole.ReadRules)
                return "read_rules";

            if (value == UserGroupReadRole.ReadRecurring)
                return "read_recurring";

            if (value == UserGroupReadRole.ReadWebhooks)
                return "read_webhooks";

            if (value == UserGroupReadRole.ReadCurrencies)
                return "read_currencies";

            if (value == UserGroupReadRole.MngBudgets)
                return "mng_budgets";

            if (value == UserGroupReadRole.MngPiggies)
                return "mng_piggies";

            if (value == UserGroupReadRole.MngSubscriptions)
                return "mng_subscriptions";

            if (value == UserGroupReadRole.MngRules)
                return "mng_rules";

            if (value == UserGroupReadRole.MngRecurring)
                return "mng_recurring";

            if (value == UserGroupReadRole.MngWebhooks)
                return "mng_webhooks";

            if (value == UserGroupReadRole.MngCurrencies)
                return "mng_currencies";

            if (value == UserGroupReadRole.ViewReports)
                return "view_reports";

            if (value == UserGroupReadRole.ViewMemberships)
                return "view_memberships";

            if (value == UserGroupReadRole.Full)
                return "full";

            if (value == UserGroupReadRole.Owner2)
                return "owner";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserGroupReadRole"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class UserGroupReadRoleJsonConverter : JsonConverter<UserGroupReadRole>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UserGroupReadRole Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UserGroupReadRole? result = rawValue == null
                ? null
                : UserGroupReadRoleValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the UserGroupReadRole to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userGroupReadRole"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UserGroupReadRole userGroupReadRole, JsonSerializerOptions options)
        {
            writer.WriteStringValue(UserGroupReadRoleValueConverter.ToJsonValue(userGroupReadRole).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserGroupReadRole"/>
    /// </summary>
    public class UserGroupReadRoleNullableJsonConverter : JsonConverter<UserGroupReadRole?>
    {
        /// <summary>
        /// Returns a UserGroupReadRole from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UserGroupReadRole? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UserGroupReadRole? result = rawValue == null
                ? null
                : UserGroupReadRoleValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the UserGroupReadRole to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userGroupReadRole"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UserGroupReadRole? userGroupReadRole, JsonSerializerOptions options)
        {
            writer.WriteStringValue(userGroupReadRole.HasValue ? UserGroupReadRoleValueConverter.ToJsonValue(userGroupReadRole.Value).ToString() : "null");
        }
    }
}
