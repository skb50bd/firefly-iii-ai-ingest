// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// UserGroupReadMembers
    /// </summary>
    public partial class UserGroupReadMembers : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGroupReadMembers" /> class.
        /// </summary>
        /// <param name="userId">The ID of the member.</param>
        /// <param name="userEmail">The email address of the member</param>
        /// <param name="you">Is this you? (the current user)</param>
        /// <param name="roles">roles</param>
        [JsonConstructor]
        public UserGroupReadMembers(Option<string?> userId = default, Option<string?> userEmail = default, Option<bool?> you = default, Option<List<UserGroupReadRole>?> roles = default)
        {
            UserIdOption = userId;
            UserEmailOption = userEmail;
            YouOption = you;
            RolesOption = roles;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserIdOption { get; }

        /// <summary>
        /// The ID of the member.
        /// </summary>
        /// <value>The ID of the member.</value>
        /* <example>5</example> */
        [JsonPropertyName("user_id")]
        public string? UserId { get { return this.UserIdOption; } }

        /// <summary>
        /// Used to track the state of UserEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserEmailOption { get; }

        /// <summary>
        /// The email address of the member
        /// </summary>
        /// <value>The email address of the member</value>
        /* <example>james@firefly-iii.org</example> */
        [JsonPropertyName("user_email")]
        public string? UserEmail { get { return this.UserEmailOption; } }

        /// <summary>
        /// Used to track the state of You
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> YouOption { get; }

        /// <summary>
        /// Is this you? (the current user)
        /// </summary>
        /// <value>Is this you? (the current user)</value>
        /* <example>false</example> */
        [JsonPropertyName("you")]
        public bool? You { get { return this.YouOption; } }

        /// <summary>
        /// Used to track the state of Roles
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<UserGroupReadRole>?> RolesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [JsonPropertyName("roles")]
        public List<UserGroupReadRole>? Roles { get { return this.RolesOption; } set { this.RolesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserGroupReadMembers {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("  You: ").Append(You).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserGroupReadMembers" />
    /// </summary>
    public class UserGroupReadMembersJsonConverter : JsonConverter<UserGroupReadMembers>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserGroupReadMembers" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserGroupReadMembers Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> userId = default;
            Option<string?> userEmail = default;
            Option<bool?> you = default;
            Option<List<UserGroupReadRole>?> roles = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_email":
                            userEmail = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "you":
                            you = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "roles":
                            roles = new Option<List<UserGroupReadRole>?>(JsonSerializer.Deserialize<List<UserGroupReadRole>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class UserGroupReadMembers.");

            if (userEmail.IsSet && userEmail.Value == null)
                throw new ArgumentNullException(nameof(userEmail), "Property is not nullable for class UserGroupReadMembers.");

            if (you.IsSet && you.Value == null)
                throw new ArgumentNullException(nameof(you), "Property is not nullable for class UserGroupReadMembers.");

            if (roles.IsSet && roles.Value == null)
                throw new ArgumentNullException(nameof(roles), "Property is not nullable for class UserGroupReadMembers.");

            return new UserGroupReadMembers(userId, userEmail, you, roles);
        }

        /// <summary>
        /// Serializes a <see cref="UserGroupReadMembers" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userGroupReadMembers"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserGroupReadMembers userGroupReadMembers, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userGroupReadMembers, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserGroupReadMembers" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userGroupReadMembers"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserGroupReadMembers userGroupReadMembers, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userGroupReadMembers.UserIdOption.IsSet && userGroupReadMembers.UserId == null)
                throw new ArgumentNullException(nameof(userGroupReadMembers.UserId), "Property is required for class UserGroupReadMembers.");

            if (userGroupReadMembers.UserEmailOption.IsSet && userGroupReadMembers.UserEmail == null)
                throw new ArgumentNullException(nameof(userGroupReadMembers.UserEmail), "Property is required for class UserGroupReadMembers.");

            if (userGroupReadMembers.RolesOption.IsSet && userGroupReadMembers.Roles == null)
                throw new ArgumentNullException(nameof(userGroupReadMembers.Roles), "Property is required for class UserGroupReadMembers.");

            if (userGroupReadMembers.UserIdOption.IsSet)
                writer.WriteString("user_id", userGroupReadMembers.UserId);

            if (userGroupReadMembers.UserEmailOption.IsSet)
                writer.WriteString("user_email", userGroupReadMembers.UserEmail);

            if (userGroupReadMembers.YouOption.IsSet)
                writer.WriteBoolean("you", userGroupReadMembers.YouOption.Value!.Value);

            if (userGroupReadMembers.RolesOption.IsSet)
            {
                writer.WritePropertyName("roles");
                JsonSerializer.Serialize(writer, userGroupReadMembers.Roles, jsonSerializerOptions);
            }
        }
    }
}
