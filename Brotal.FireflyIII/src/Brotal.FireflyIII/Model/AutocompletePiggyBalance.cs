// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// AutocompletePiggyBalance
    /// </summary>
    public partial class AutocompletePiggyBalance : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutocompletePiggyBalance" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">Name of the piggy bank found by an auto-complete search.</param>
        /// <param name="nameWithBalance">Name of the piggy bank found by an auto-complete search, including the currently saved amount and the target amount.</param>
        /// <param name="currencyId">Currency ID for the currency used by this piggy bank. This will always be the piggy bank&#39;s currency, never the primary currency.</param>
        /// <param name="currencyCode">Currency code for the currency used by this piggy bank. This will always be the piggy bank&#39;s currency, never the primary currency.</param>
        /// <param name="currencySymbol">Currency symbol for the currency used by this piggy bank. This will always be the piggy bank&#39;s currency, never the primary currency.</param>
        /// <param name="currencyDecimalPlaces">Currency decimal places for the currency used by this piggy bank. This will always be the piggy bank&#39;s currency, never the primary currency.</param>
        /// <param name="objectGroupId">The group ID of the group this object is part of. NULL if no group.</param>
        /// <param name="objectGroupTitle">The name of the group. NULL if no group.</param>
        [JsonConstructor]
        public AutocompletePiggyBalance(string id, string name, Option<string?> nameWithBalance = default, Option<string?> currencyId = default, Option<string?> currencyCode = default, Option<string?> currencySymbol = default, Option<int?> currencyDecimalPlaces = default, Option<int?> objectGroupId = default, Option<string?> objectGroupTitle = default)
        {
            Id = id;
            Name = name;
            NameWithBalanceOption = nameWithBalance;
            CurrencyIdOption = currencyId;
            CurrencyCodeOption = currencyCode;
            CurrencySymbolOption = currencySymbol;
            CurrencyDecimalPlacesOption = currencyDecimalPlaces;
            ObjectGroupIdOption = objectGroupId;
            ObjectGroupTitleOption = objectGroupTitle;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /* <example>2</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the piggy bank found by an auto-complete search.
        /// </summary>
        /// <value>Name of the piggy bank found by an auto-complete search.</value>
        /* <example>New couch</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of NameWithBalance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameWithBalanceOption { get; private set; }

        /// <summary>
        /// Name of the piggy bank found by an auto-complete search, including the currently saved amount and the target amount.
        /// </summary>
        /// <value>Name of the piggy bank found by an auto-complete search, including the currently saved amount and the target amount.</value>
        /* <example>New couch ($234.56 / $600)</example> */
        [JsonPropertyName("name_with_balance")]
        public string? NameWithBalance { get { return this.NameWithBalanceOption; } set { this.NameWithBalanceOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyIdOption { get; private set; }

        /// <summary>
        /// Currency ID for the currency used by this piggy bank. This will always be the piggy bank&#39;s currency, never the primary currency.
        /// </summary>
        /// <value>Currency ID for the currency used by this piggy bank. This will always be the piggy bank&#39;s currency, never the primary currency.</value>
        /* <example>12</example> */
        [JsonPropertyName("currency_id")]
        public string? CurrencyId { get { return this.CurrencyIdOption; } set { this.CurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// Currency code for the currency used by this piggy bank. This will always be the piggy bank&#39;s currency, never the primary currency.
        /// </summary>
        /// <value>Currency code for the currency used by this piggy bank. This will always be the piggy bank&#39;s currency, never the primary currency.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("currency_code")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencySymbolOption { get; private set; }

        /// <summary>
        /// Currency symbol for the currency used by this piggy bank. This will always be the piggy bank&#39;s currency, never the primary currency.
        /// </summary>
        /// <value>Currency symbol for the currency used by this piggy bank. This will always be the piggy bank&#39;s currency, never the primary currency.</value>
        /* <example>$</example> */
        [JsonPropertyName("currency_symbol")]
        public string? CurrencySymbol { get { return this.CurrencySymbolOption; } set { this.CurrencySymbolOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CurrencyDecimalPlacesOption { get; private set; }

        /// <summary>
        /// Currency decimal places for the currency used by this piggy bank. This will always be the piggy bank&#39;s currency, never the primary currency.
        /// </summary>
        /// <value>Currency decimal places for the currency used by this piggy bank. This will always be the piggy bank&#39;s currency, never the primary currency.</value>
        /* <example>2</example> */
        [JsonPropertyName("currency_decimal_places")]
        public int? CurrencyDecimalPlaces { get { return this.CurrencyDecimalPlacesOption; } set { this.CurrencyDecimalPlacesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectGroupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ObjectGroupIdOption { get; private set; }

        /// <summary>
        /// The group ID of the group this object is part of. NULL if no group.
        /// </summary>
        /// <value>The group ID of the group this object is part of. NULL if no group.</value>
        /* <example>5</example> */
        [JsonPropertyName("object_group_id")]
        public int? ObjectGroupId { get { return this.ObjectGroupIdOption; } set { this.ObjectGroupIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectGroupTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ObjectGroupTitleOption { get; private set; }

        /// <summary>
        /// The name of the group. NULL if no group.
        /// </summary>
        /// <value>The name of the group. NULL if no group.</value>
        /* <example>Example Group</example> */
        [JsonPropertyName("object_group_title")]
        public string? ObjectGroupTitle { get { return this.ObjectGroupTitleOption; } set { this.ObjectGroupTitleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutocompletePiggyBalance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NameWithBalance: ").Append(NameWithBalance).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  CurrencyDecimalPlaces: ").Append(CurrencyDecimalPlaces).Append("\n");
            sb.Append("  ObjectGroupId: ").Append(ObjectGroupId).Append("\n");
            sb.Append("  ObjectGroupTitle: ").Append(ObjectGroupTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AutocompletePiggyBalance" />
    /// </summary>
    public class AutocompletePiggyBalanceJsonConverter : JsonConverter<AutocompletePiggyBalance>
    {
        /// <summary>
        /// Deserializes json to <see cref="AutocompletePiggyBalance" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AutocompletePiggyBalance Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> nameWithBalance = default;
            Option<string?> currencyId = default;
            Option<string?> currencyCode = default;
            Option<string?> currencySymbol = default;
            Option<int?> currencyDecimalPlaces = default;
            Option<int?> objectGroupId = default;
            Option<string?> objectGroupTitle = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name_with_balance":
                            nameWithBalance = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_symbol":
                            currencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_decimal_places":
                            currencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "object_group_id":
                            objectGroupId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "object_group_title":
                            objectGroupTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class AutocompletePiggyBalance.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class AutocompletePiggyBalance.", nameof(name));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AutocompletePiggyBalance.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class AutocompletePiggyBalance.");

            if (nameWithBalance.IsSet && nameWithBalance.Value == null)
                throw new ArgumentNullException(nameof(nameWithBalance), "Property is not nullable for class AutocompletePiggyBalance.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class AutocompletePiggyBalance.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class AutocompletePiggyBalance.");

            if (currencySymbol.IsSet && currencySymbol.Value == null)
                throw new ArgumentNullException(nameof(currencySymbol), "Property is not nullable for class AutocompletePiggyBalance.");

            if (currencyDecimalPlaces.IsSet && currencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(currencyDecimalPlaces), "Property is not nullable for class AutocompletePiggyBalance.");

            return new AutocompletePiggyBalance(id.Value!, name.Value!, nameWithBalance, currencyId, currencyCode, currencySymbol, currencyDecimalPlaces, objectGroupId, objectGroupTitle);
        }

        /// <summary>
        /// Serializes a <see cref="AutocompletePiggyBalance" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="autocompletePiggyBalance"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AutocompletePiggyBalance autocompletePiggyBalance, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, autocompletePiggyBalance, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AutocompletePiggyBalance" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="autocompletePiggyBalance"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AutocompletePiggyBalance autocompletePiggyBalance, JsonSerializerOptions jsonSerializerOptions)
        {
            if (autocompletePiggyBalance.Id == null)
                throw new ArgumentNullException(nameof(autocompletePiggyBalance.Id), "Property is required for class AutocompletePiggyBalance.");

            if (autocompletePiggyBalance.Name == null)
                throw new ArgumentNullException(nameof(autocompletePiggyBalance.Name), "Property is required for class AutocompletePiggyBalance.");

            if (autocompletePiggyBalance.NameWithBalanceOption.IsSet && autocompletePiggyBalance.NameWithBalance == null)
                throw new ArgumentNullException(nameof(autocompletePiggyBalance.NameWithBalance), "Property is required for class AutocompletePiggyBalance.");

            if (autocompletePiggyBalance.CurrencyIdOption.IsSet && autocompletePiggyBalance.CurrencyId == null)
                throw new ArgumentNullException(nameof(autocompletePiggyBalance.CurrencyId), "Property is required for class AutocompletePiggyBalance.");

            if (autocompletePiggyBalance.CurrencyCodeOption.IsSet && autocompletePiggyBalance.CurrencyCode == null)
                throw new ArgumentNullException(nameof(autocompletePiggyBalance.CurrencyCode), "Property is required for class AutocompletePiggyBalance.");

            if (autocompletePiggyBalance.CurrencySymbolOption.IsSet && autocompletePiggyBalance.CurrencySymbol == null)
                throw new ArgumentNullException(nameof(autocompletePiggyBalance.CurrencySymbol), "Property is required for class AutocompletePiggyBalance.");

            writer.WriteString("id", autocompletePiggyBalance.Id);

            writer.WriteString("name", autocompletePiggyBalance.Name);

            if (autocompletePiggyBalance.NameWithBalanceOption.IsSet)
                writer.WriteString("name_with_balance", autocompletePiggyBalance.NameWithBalance);

            if (autocompletePiggyBalance.CurrencyIdOption.IsSet)
                writer.WriteString("currency_id", autocompletePiggyBalance.CurrencyId);

            if (autocompletePiggyBalance.CurrencyCodeOption.IsSet)
                writer.WriteString("currency_code", autocompletePiggyBalance.CurrencyCode);

            if (autocompletePiggyBalance.CurrencySymbolOption.IsSet)
                writer.WriteString("currency_symbol", autocompletePiggyBalance.CurrencySymbol);

            if (autocompletePiggyBalance.CurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("currency_decimal_places", autocompletePiggyBalance.CurrencyDecimalPlacesOption.Value!.Value);

            if (autocompletePiggyBalance.ObjectGroupIdOption.IsSet)
                if (autocompletePiggyBalance.ObjectGroupIdOption.Value != null)
                    writer.WriteNumber("object_group_id", autocompletePiggyBalance.ObjectGroupId!.Value);
                else
                    writer.WriteNull("object_group_id");

            if (autocompletePiggyBalance.ObjectGroupTitleOption.IsSet)
                if (autocompletePiggyBalance.ObjectGroupTitleOption.Value != null)
                    writer.WriteString("object_group_title", autocompletePiggyBalance.ObjectGroupTitle);
                else
                    writer.WriteNull("object_group_title");
        }
    }
}
