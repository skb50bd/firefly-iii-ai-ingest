// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// Defines AccountTypeFilter
    /// </summary>
    public enum AccountTypeFilter
    {
        /// <summary>
        /// Enum All for value: all
        /// </summary>
        All = 1,

        /// <summary>
        /// Enum Asset for value: asset
        /// </summary>
        Asset = 2,

        /// <summary>
        /// Enum Cash for value: cash
        /// </summary>
        Cash = 3,

        /// <summary>
        /// Enum Expense for value: expense
        /// </summary>
        Expense = 4,

        /// <summary>
        /// Enum Revenue for value: revenue
        /// </summary>
        Revenue = 5,

        /// <summary>
        /// Enum Special for value: special
        /// </summary>
        Special = 6,

        /// <summary>
        /// Enum Hidden for value: hidden
        /// </summary>
        Hidden = 7,

        /// <summary>
        /// Enum Liability for value: liability
        /// </summary>
        Liability = 8,

        /// <summary>
        /// Enum Liabilities for value: liabilities
        /// </summary>
        Liabilities = 9,

        /// <summary>
        /// Enum DefaultAccount for value: Default account
        /// </summary>
        DefaultAccount = 10,

        /// <summary>
        /// Enum CashAccount for value: Cash account
        /// </summary>
        CashAccount = 11,

        /// <summary>
        /// Enum AssetAccount for value: Asset account
        /// </summary>
        AssetAccount = 12,

        /// <summary>
        /// Enum ExpenseAccount for value: Expense account
        /// </summary>
        ExpenseAccount = 13,

        /// <summary>
        /// Enum RevenueAccount for value: Revenue account
        /// </summary>
        RevenueAccount = 14,

        /// <summary>
        /// Enum InitialBalanceAccount for value: Initial balance account
        /// </summary>
        InitialBalanceAccount = 15,

        /// <summary>
        /// Enum BeneficiaryAccount for value: Beneficiary account
        /// </summary>
        BeneficiaryAccount = 16,

        /// <summary>
        /// Enum ImportAccount for value: Import account
        /// </summary>
        ImportAccount = 17,

        /// <summary>
        /// Enum ReconciliationAccount for value: Reconciliation account
        /// </summary>
        ReconciliationAccount = 18,

        /// <summary>
        /// Enum Loan for value: Loan
        /// </summary>
        Loan = 19,

        /// <summary>
        /// Enum Debt for value: Debt
        /// </summary>
        Debt = 20,

        /// <summary>
        /// Enum Mortgage for value: Mortgage
        /// </summary>
        Mortgage = 21
    }

    /// <summary>
    /// Converts <see cref="AccountTypeFilter"/> to and from the JSON value
    /// </summary>
    public static class AccountTypeFilterValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AccountTypeFilter"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AccountTypeFilter FromString(string value)
        {
            if (value.Equals("all"))
                return AccountTypeFilter.All;

            if (value.Equals("asset"))
                return AccountTypeFilter.Asset;

            if (value.Equals("cash"))
                return AccountTypeFilter.Cash;

            if (value.Equals("expense"))
                return AccountTypeFilter.Expense;

            if (value.Equals("revenue"))
                return AccountTypeFilter.Revenue;

            if (value.Equals("special"))
                return AccountTypeFilter.Special;

            if (value.Equals("hidden"))
                return AccountTypeFilter.Hidden;

            if (value.Equals("liability"))
                return AccountTypeFilter.Liability;

            if (value.Equals("liabilities"))
                return AccountTypeFilter.Liabilities;

            if (value.Equals("Default account"))
                return AccountTypeFilter.DefaultAccount;

            if (value.Equals("Cash account"))
                return AccountTypeFilter.CashAccount;

            if (value.Equals("Asset account"))
                return AccountTypeFilter.AssetAccount;

            if (value.Equals("Expense account"))
                return AccountTypeFilter.ExpenseAccount;

            if (value.Equals("Revenue account"))
                return AccountTypeFilter.RevenueAccount;

            if (value.Equals("Initial balance account"))
                return AccountTypeFilter.InitialBalanceAccount;

            if (value.Equals("Beneficiary account"))
                return AccountTypeFilter.BeneficiaryAccount;

            if (value.Equals("Import account"))
                return AccountTypeFilter.ImportAccount;

            if (value.Equals("Reconciliation account"))
                return AccountTypeFilter.ReconciliationAccount;

            if (value.Equals("Loan"))
                return AccountTypeFilter.Loan;

            if (value.Equals("Debt"))
                return AccountTypeFilter.Debt;

            if (value.Equals("Mortgage"))
                return AccountTypeFilter.Mortgage;

            throw new NotImplementedException($"Could not convert value to type AccountTypeFilter: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AccountTypeFilter"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AccountTypeFilter? FromStringOrDefault(string value)
        {
            if (value.Equals("all"))
                return AccountTypeFilter.All;

            if (value.Equals("asset"))
                return AccountTypeFilter.Asset;

            if (value.Equals("cash"))
                return AccountTypeFilter.Cash;

            if (value.Equals("expense"))
                return AccountTypeFilter.Expense;

            if (value.Equals("revenue"))
                return AccountTypeFilter.Revenue;

            if (value.Equals("special"))
                return AccountTypeFilter.Special;

            if (value.Equals("hidden"))
                return AccountTypeFilter.Hidden;

            if (value.Equals("liability"))
                return AccountTypeFilter.Liability;

            if (value.Equals("liabilities"))
                return AccountTypeFilter.Liabilities;

            if (value.Equals("Default account"))
                return AccountTypeFilter.DefaultAccount;

            if (value.Equals("Cash account"))
                return AccountTypeFilter.CashAccount;

            if (value.Equals("Asset account"))
                return AccountTypeFilter.AssetAccount;

            if (value.Equals("Expense account"))
                return AccountTypeFilter.ExpenseAccount;

            if (value.Equals("Revenue account"))
                return AccountTypeFilter.RevenueAccount;

            if (value.Equals("Initial balance account"))
                return AccountTypeFilter.InitialBalanceAccount;

            if (value.Equals("Beneficiary account"))
                return AccountTypeFilter.BeneficiaryAccount;

            if (value.Equals("Import account"))
                return AccountTypeFilter.ImportAccount;

            if (value.Equals("Reconciliation account"))
                return AccountTypeFilter.ReconciliationAccount;

            if (value.Equals("Loan"))
                return AccountTypeFilter.Loan;

            if (value.Equals("Debt"))
                return AccountTypeFilter.Debt;

            if (value.Equals("Mortgage"))
                return AccountTypeFilter.Mortgage;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AccountTypeFilter"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(AccountTypeFilter value)
        {
            if (value == AccountTypeFilter.All)
                return "all";

            if (value == AccountTypeFilter.Asset)
                return "asset";

            if (value == AccountTypeFilter.Cash)
                return "cash";

            if (value == AccountTypeFilter.Expense)
                return "expense";

            if (value == AccountTypeFilter.Revenue)
                return "revenue";

            if (value == AccountTypeFilter.Special)
                return "special";

            if (value == AccountTypeFilter.Hidden)
                return "hidden";

            if (value == AccountTypeFilter.Liability)
                return "liability";

            if (value == AccountTypeFilter.Liabilities)
                return "liabilities";

            if (value == AccountTypeFilter.DefaultAccount)
                return "Default account";

            if (value == AccountTypeFilter.CashAccount)
                return "Cash account";

            if (value == AccountTypeFilter.AssetAccount)
                return "Asset account";

            if (value == AccountTypeFilter.ExpenseAccount)
                return "Expense account";

            if (value == AccountTypeFilter.RevenueAccount)
                return "Revenue account";

            if (value == AccountTypeFilter.InitialBalanceAccount)
                return "Initial balance account";

            if (value == AccountTypeFilter.BeneficiaryAccount)
                return "Beneficiary account";

            if (value == AccountTypeFilter.ImportAccount)
                return "Import account";

            if (value == AccountTypeFilter.ReconciliationAccount)
                return "Reconciliation account";

            if (value == AccountTypeFilter.Loan)
                return "Loan";

            if (value == AccountTypeFilter.Debt)
                return "Debt";

            if (value == AccountTypeFilter.Mortgage)
                return "Mortgage";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AccountTypeFilter"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AccountTypeFilterJsonConverter : JsonConverter<AccountTypeFilter>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AccountTypeFilter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AccountTypeFilter? result = rawValue == null
                ? null
                : AccountTypeFilterValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AccountTypeFilter to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountTypeFilter"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AccountTypeFilter accountTypeFilter, JsonSerializerOptions options)
        {
            writer.WriteStringValue(AccountTypeFilterValueConverter.ToJsonValue(accountTypeFilter).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AccountTypeFilter"/>
    /// </summary>
    public class AccountTypeFilterNullableJsonConverter : JsonConverter<AccountTypeFilter?>
    {
        /// <summary>
        /// Returns a AccountTypeFilter from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AccountTypeFilter? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AccountTypeFilter? result = rawValue == null
                ? null
                : AccountTypeFilterValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AccountTypeFilter to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountTypeFilter"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AccountTypeFilter? accountTypeFilter, JsonSerializerOptions options)
        {
            writer.WriteStringValue(accountTypeFilter.HasValue ? AccountTypeFilterValueConverter.ToJsonValue(accountTypeFilter.Value).ToString() : "null");
        }
    }
}
