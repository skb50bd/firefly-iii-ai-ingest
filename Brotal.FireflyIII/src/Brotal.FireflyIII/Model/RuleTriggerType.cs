// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// Which action is necessary for the rule to fire? Use either store-journal or update-journal.
    /// </summary>
    /// <value>Which action is necessary for the rule to fire? Use either store-journal or update-journal.</value>
    public enum RuleTriggerType
    {
        /// <summary>
        /// Enum StoreJournal for value: store-journal
        /// </summary>
        StoreJournal = 1,

        /// <summary>
        /// Enum UpdateJournal for value: update-journal
        /// </summary>
        UpdateJournal = 2
    }

    /// <summary>
    /// Converts <see cref="RuleTriggerType"/> to and from the JSON value
    /// </summary>
    public static class RuleTriggerTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="RuleTriggerType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RuleTriggerType FromString(string value)
        {
            if (value.Equals("store-journal"))
                return RuleTriggerType.StoreJournal;

            if (value.Equals("update-journal"))
                return RuleTriggerType.UpdateJournal;

            throw new NotImplementedException($"Could not convert value to type RuleTriggerType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="RuleTriggerType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RuleTriggerType? FromStringOrDefault(string value)
        {
            if (value.Equals("store-journal"))
                return RuleTriggerType.StoreJournal;

            if (value.Equals("update-journal"))
                return RuleTriggerType.UpdateJournal;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RuleTriggerType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(RuleTriggerType value)
        {
            if (value == RuleTriggerType.StoreJournal)
                return "store-journal";

            if (value == RuleTriggerType.UpdateJournal)
                return "update-journal";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RuleTriggerType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class RuleTriggerTypeJsonConverter : JsonConverter<RuleTriggerType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RuleTriggerType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RuleTriggerType? result = rawValue == null
                ? null
                : RuleTriggerTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the RuleTriggerType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ruleTriggerType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RuleTriggerType ruleTriggerType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(RuleTriggerTypeValueConverter.ToJsonValue(ruleTriggerType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RuleTriggerType"/>
    /// </summary>
    public class RuleTriggerTypeNullableJsonConverter : JsonConverter<RuleTriggerType?>
    {
        /// <summary>
        /// Returns a RuleTriggerType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RuleTriggerType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RuleTriggerType? result = rawValue == null
                ? null
                : RuleTriggerTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the RuleTriggerType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ruleTriggerType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RuleTriggerType? ruleTriggerType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(ruleTriggerType.HasValue ? RuleTriggerTypeValueConverter.ToJsonValue(ruleTriggerType.Value).ToString() : "null");
        }
    }
}
