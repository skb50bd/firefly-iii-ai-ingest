// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// User
    /// </summary>
    public partial class User : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="email">The new users email address.</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="blocked">Boolean to indicate if the user is blocked.</param>
        /// <param name="blockedCode">blockedCode</param>
        /// <param name="role">role</param>
        [JsonConstructor]
        public User(string email, Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default, Option<bool?> blocked = default, Option<UserBlockedCodeProperty?> blockedCode = default, Option<UserRoleProperty?> role = default)
        {
            Email = email;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            BlockedOption = blocked;
            BlockedCodeOption = blockedCode;
            RoleOption = role;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BlockedCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UserBlockedCodeProperty?> BlockedCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets BlockedCode
        /// </summary>
        [JsonPropertyName("blocked_code")]
        public UserBlockedCodeProperty? BlockedCode { get { return this.BlockedCodeOption; } set { this.BlockedCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Role
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UserRoleProperty?> RoleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [JsonPropertyName("role")]
        public UserRoleProperty? Role { get { return this.RoleOption; } set { this.RoleOption = new(value); } }

        /// <summary>
        /// The new users email address.
        /// </summary>
        /// <value>The new users email address.</value>
        /* <example>james@firefly-iii.org</example> */
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } }

        /// <summary>
        /// Used to track the state of Blocked
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> BlockedOption { get; private set; }

        /// <summary>
        /// Boolean to indicate if the user is blocked.
        /// </summary>
        /// <value>Boolean to indicate if the user is blocked.</value>
        /* <example>false</example> */
        [JsonPropertyName("blocked")]
        public bool? Blocked { get { return this.BlockedOption; } set { this.BlockedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  BlockedCode: ").Append(BlockedCode).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="User" />
    /// </summary>
    public class UserJsonConverter : JsonConverter<User>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="User" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override User Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> email = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<bool?> blocked = default;
            Option<UserBlockedCodeProperty?> blockedCode = default;
            Option<UserRoleProperty?> role = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "blocked":
                            blocked = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "blocked_code":
                            string? blockedCodeRawValue = utf8JsonReader.GetString();
                            if (blockedCodeRawValue != null)
                                blockedCode = new Option<UserBlockedCodeProperty?>(UserBlockedCodePropertyValueConverter.FromStringOrDefault(blockedCodeRawValue));
                            break;
                        case "role":
                            string? roleRawValue = utf8JsonReader.GetString();
                            if (roleRawValue != null)
                                role = new Option<UserRoleProperty?>(UserRolePropertyValueConverter.FromStringOrDefault(roleRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class User.", nameof(email));

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class User.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class User.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class User.");

            if (blocked.IsSet && blocked.Value == null)
                throw new ArgumentNullException(nameof(blocked), "Property is not nullable for class User.");

            return new User(email.Value!, createdAt, updatedAt, blocked, blockedCode, role);
        }

        /// <summary>
        /// Serializes a <see cref="User" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="user"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, User user, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, user, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="User" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="user"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, User user, JsonSerializerOptions jsonSerializerOptions)
        {
            if (user.Email == null)
                throw new ArgumentNullException(nameof(user.Email), "Property is required for class User.");

            writer.WriteString("email", user.Email);

            if (user.CreatedAtOption.IsSet)
                writer.WriteString("created_at", user.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (user.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", user.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));

            if (user.BlockedOption.IsSet)
                writer.WriteBoolean("blocked", user.BlockedOption.Value!.Value);

            if (user.BlockedCodeOption.IsSet)
                if (user.BlockedCodeOption!.Value != null)
                {
                    var blockedCodeRawValue = UserBlockedCodePropertyValueConverter.ToJsonValue(user.BlockedCodeOption.Value!.Value);
                    writer.WriteString("blocked_code", blockedCodeRawValue);
                }
                else
                    writer.WriteNull("blocked_code");
            if (user.RoleOption.IsSet)
                if (user.RoleOption!.Value != null)
                {
                    var roleRawValue = UserRolePropertyValueConverter.ToJsonValue(user.RoleOption.Value!.Value);
                    writer.WriteString("role", roleRawValue);
                }
                else
                    writer.WriteNull("role");
        }
    }
}
