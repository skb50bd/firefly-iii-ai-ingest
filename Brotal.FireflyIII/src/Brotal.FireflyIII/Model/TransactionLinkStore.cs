// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// TransactionLinkStore
    /// </summary>
    public partial class TransactionLinkStore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionLinkStore" /> class.
        /// </summary>
        /// <param name="linkTypeId">The link type ID to use. You can also use the link_type_name field.</param>
        /// <param name="inwardId">The inward transaction transaction_journal_id for the link. This becomes the &#39;is paid by&#39; transaction of the set.</param>
        /// <param name="outwardId">The outward transaction transaction_journal_id for the link. This becomes the &#39;pays for&#39; transaction of the set.</param>
        /// <param name="linkTypeName">The link type name to use. You can also use the link_type_id field.</param>
        /// <param name="notes">Optional. Some notes.</param>
        [JsonConstructor]
        public TransactionLinkStore(string linkTypeId, string inwardId, string outwardId, Option<string?> linkTypeName = default, Option<string?> notes = default)
        {
            LinkTypeId = linkTypeId;
            InwardId = inwardId;
            OutwardId = outwardId;
            LinkTypeNameOption = linkTypeName;
            NotesOption = notes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The link type ID to use. You can also use the link_type_name field.
        /// </summary>
        /// <value>The link type ID to use. You can also use the link_type_name field.</value>
        /* <example>5</example> */
        [JsonPropertyName("link_type_id")]
        public string LinkTypeId { get; set; }

        /// <summary>
        /// The inward transaction transaction_journal_id for the link. This becomes the &#39;is paid by&#39; transaction of the set.
        /// </summary>
        /// <value>The inward transaction transaction_journal_id for the link. This becomes the &#39;is paid by&#39; transaction of the set.</value>
        /* <example>131</example> */
        [JsonPropertyName("inward_id")]
        public string InwardId { get; set; }

        /// <summary>
        /// The outward transaction transaction_journal_id for the link. This becomes the &#39;pays for&#39; transaction of the set.
        /// </summary>
        /// <value>The outward transaction transaction_journal_id for the link. This becomes the &#39;pays for&#39; transaction of the set.</value>
        /* <example>131</example> */
        [JsonPropertyName("outward_id")]
        public string OutwardId { get; set; }

        /// <summary>
        /// Used to track the state of LinkTypeName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LinkTypeNameOption { get; private set; }

        /// <summary>
        /// The link type name to use. You can also use the link_type_id field.
        /// </summary>
        /// <value>The link type name to use. You can also use the link_type_id field.</value>
        /* <example>Is paid by</example> */
        [JsonPropertyName("link_type_name")]
        public string? LinkTypeName { get { return this.LinkTypeNameOption; } set { this.LinkTypeNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Optional. Some notes.
        /// </summary>
        /// <value>Optional. Some notes.</value>
        /* <example>Some example notes</example> */
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionLinkStore {\n");
            sb.Append("  LinkTypeId: ").Append(LinkTypeId).Append("\n");
            sb.Append("  InwardId: ").Append(InwardId).Append("\n");
            sb.Append("  OutwardId: ").Append(OutwardId).Append("\n");
            sb.Append("  LinkTypeName: ").Append(LinkTypeName).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransactionLinkStore" />
    /// </summary>
    public class TransactionLinkStoreJsonConverter : JsonConverter<TransactionLinkStore>
    {
        /// <summary>
        /// Deserializes json to <see cref="TransactionLinkStore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransactionLinkStore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> linkTypeId = default;
            Option<string?> inwardId = default;
            Option<string?> outwardId = default;
            Option<string?> linkTypeName = default;
            Option<string?> notes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "link_type_id":
                            linkTypeId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "inward_id":
                            inwardId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "outward_id":
                            outwardId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "link_type_name":
                            linkTypeName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!linkTypeId.IsSet)
                throw new ArgumentException("Property is required for class TransactionLinkStore.", nameof(linkTypeId));

            if (!inwardId.IsSet)
                throw new ArgumentException("Property is required for class TransactionLinkStore.", nameof(inwardId));

            if (!outwardId.IsSet)
                throw new ArgumentException("Property is required for class TransactionLinkStore.", nameof(outwardId));

            if (linkTypeId.IsSet && linkTypeId.Value == null)
                throw new ArgumentNullException(nameof(linkTypeId), "Property is not nullable for class TransactionLinkStore.");

            if (inwardId.IsSet && inwardId.Value == null)
                throw new ArgumentNullException(nameof(inwardId), "Property is not nullable for class TransactionLinkStore.");

            if (outwardId.IsSet && outwardId.Value == null)
                throw new ArgumentNullException(nameof(outwardId), "Property is not nullable for class TransactionLinkStore.");

            if (linkTypeName.IsSet && linkTypeName.Value == null)
                throw new ArgumentNullException(nameof(linkTypeName), "Property is not nullable for class TransactionLinkStore.");

            return new TransactionLinkStore(linkTypeId.Value!, inwardId.Value!, outwardId.Value!, linkTypeName, notes);
        }

        /// <summary>
        /// Serializes a <see cref="TransactionLinkStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionLinkStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransactionLinkStore transactionLinkStore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, transactionLinkStore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransactionLinkStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionLinkStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TransactionLinkStore transactionLinkStore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (transactionLinkStore.LinkTypeId == null)
                throw new ArgumentNullException(nameof(transactionLinkStore.LinkTypeId), "Property is required for class TransactionLinkStore.");

            if (transactionLinkStore.InwardId == null)
                throw new ArgumentNullException(nameof(transactionLinkStore.InwardId), "Property is required for class TransactionLinkStore.");

            if (transactionLinkStore.OutwardId == null)
                throw new ArgumentNullException(nameof(transactionLinkStore.OutwardId), "Property is required for class TransactionLinkStore.");

            if (transactionLinkStore.LinkTypeNameOption.IsSet && transactionLinkStore.LinkTypeName == null)
                throw new ArgumentNullException(nameof(transactionLinkStore.LinkTypeName), "Property is required for class TransactionLinkStore.");

            writer.WriteString("link_type_id", transactionLinkStore.LinkTypeId);

            writer.WriteString("inward_id", transactionLinkStore.InwardId);

            writer.WriteString("outward_id", transactionLinkStore.OutwardId);

            if (transactionLinkStore.LinkTypeNameOption.IsSet)
                writer.WriteString("link_type_name", transactionLinkStore.LinkTypeName);

            if (transactionLinkStore.NotesOption.IsSet)
                if (transactionLinkStore.NotesOption.Value != null)
                    writer.WriteString("notes", transactionLinkStore.Notes);
                else
                    writer.WriteNull("notes");
        }
    }
}
