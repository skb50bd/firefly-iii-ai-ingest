// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// BudgetLimitUpdate
    /// </summary>
    public partial class BudgetLimitUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetLimitUpdate" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="start">Start date of the budget limit.</param>
        /// <param name="end">End date of the budget limit.</param>
        /// <param name="budgetId">The budget ID of the associated budget.</param>
        /// <param name="objectHasCurrencySetting">Indicates whether the object has a currency setting. If false, the object uses the administration&#39;s primary currency.</param>
        /// <param name="currencyId">The currency ID of the currency associated with this object.</param>
        /// <param name="currencyName">The currency name of the currency associated with this object.</param>
        /// <param name="currencyCode">The currency code of the currency associated with this object.</param>
        /// <param name="currencySymbol">currencySymbol</param>
        /// <param name="currencyDecimalPlaces">currencyDecimalPlaces</param>
        /// <param name="primaryCurrencyId">The currency ID of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyName">The currency name of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyCode">The currency code of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencySymbol">The currency symbol of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyDecimalPlaces">The currency decimal places of the administration&#39;s primary currency.</param>
        /// <param name="period">Period of the budget limit. Only used when auto-generated by auto-budget.</param>
        /// <param name="amount">amount</param>
        /// <param name="pcAmount">The amount of this budget limit in the user&#39;s primary currency, if the original amount is in a different currency.</param>
        /// <param name="spent">Will be in the primary currency if this is turned on by the user.</param>
        /// <param name="notes">Some notes for this specific budget limit.</param>
        [JsonConstructor]
        public BudgetLimitUpdate(Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default, Option<DateTime?> start = default, Option<DateTime?> end = default, Option<string?> budgetId = default, Option<bool?> objectHasCurrencySetting = default, Option<string?> currencyId = default, Option<string?> currencyName = default, Option<string?> currencyCode = default, Option<string?> currencySymbol = default, Option<int?> currencyDecimalPlaces = default, Option<string?> primaryCurrencyId = default, Option<string?> primaryCurrencyName = default, Option<string?> primaryCurrencyCode = default, Option<string?> primaryCurrencySymbol = default, Option<int?> primaryCurrencyDecimalPlaces = default, Option<string?> period = default, Option<string?> amount = default, Option<string?> pcAmount = default, Option<string?> spent = default, Option<string?> notes = default)
        {
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            StartOption = start;
            EndOption = end;
            BudgetIdOption = budgetId;
            ObjectHasCurrencySettingOption = objectHasCurrencySetting;
            CurrencyIdOption = currencyId;
            CurrencyNameOption = currencyName;
            CurrencyCodeOption = currencyCode;
            CurrencySymbolOption = currencySymbol;
            CurrencyDecimalPlacesOption = currencyDecimalPlaces;
            PrimaryCurrencyIdOption = primaryCurrencyId;
            PrimaryCurrencyNameOption = primaryCurrencyName;
            PrimaryCurrencyCodeOption = primaryCurrencyCode;
            PrimaryCurrencySymbolOption = primaryCurrencySymbol;
            PrimaryCurrencyDecimalPlacesOption = primaryCurrencyDecimalPlaces;
            PeriodOption = period;
            AmountOption = amount;
            PcAmountOption = pcAmount;
            SpentOption = spent;
            NotesOption = notes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } }

        /// <summary>
        /// Used to track the state of Start
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> StartOption { get; private set; }

        /// <summary>
        /// Start date of the budget limit.
        /// </summary>
        /// <value>Start date of the budget limit.</value>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("start")]
        public DateTime? Start { get { return this.StartOption; } set { this.StartOption = new(value); } }

        /// <summary>
        /// Used to track the state of End
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> EndOption { get; private set; }

        /// <summary>
        /// End date of the budget limit.
        /// </summary>
        /// <value>End date of the budget limit.</value>
        /* <example>2025-08-31T23:59:59Z</example> */
        [JsonPropertyName("end")]
        public DateTime? End { get { return this.EndOption; } set { this.EndOption = new(value); } }

        /// <summary>
        /// Used to track the state of BudgetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BudgetIdOption { get; }

        /// <summary>
        /// The budget ID of the associated budget.
        /// </summary>
        /// <value>The budget ID of the associated budget.</value>
        /* <example>23</example> */
        [JsonPropertyName("budget_id")]
        public string? BudgetId { get { return this.BudgetIdOption; } }

        /// <summary>
        /// Used to track the state of ObjectHasCurrencySetting
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ObjectHasCurrencySettingOption { get; }

        /// <summary>
        /// Indicates whether the object has a currency setting. If false, the object uses the administration&#39;s primary currency.
        /// </summary>
        /// <value>Indicates whether the object has a currency setting. If false, the object uses the administration&#39;s primary currency.</value>
        /* <example>true</example> */
        [JsonPropertyName("object_has_currency_setting")]
        public bool? ObjectHasCurrencySetting { get { return this.ObjectHasCurrencySettingOption; } }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyIdOption { get; private set; }

        /// <summary>
        /// The currency ID of the currency associated with this object.
        /// </summary>
        /// <value>The currency ID of the currency associated with this object.</value>
        /* <example>5</example> */
        [JsonPropertyName("currency_id")]
        public string? CurrencyId { get { return this.CurrencyIdOption; } set { this.CurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyNameOption { get; private set; }

        /// <summary>
        /// The currency name of the currency associated with this object.
        /// </summary>
        /// <value>The currency name of the currency associated with this object.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("currency_name")]
        public string? CurrencyName { get { return this.CurrencyNameOption; } set { this.CurrencyNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The currency code of the currency associated with this object.
        /// </summary>
        /// <value>The currency code of the currency associated with this object.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("currency_code")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencySymbolOption { get; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        /* <example>$</example> */
        [JsonPropertyName("currency_symbol")]
        public string? CurrencySymbol { get { return this.CurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of CurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// Gets or Sets CurrencyDecimalPlaces
        /// </summary>
        /* <example>2</example> */
        [JsonPropertyName("currency_decimal_places")]
        public int? CurrencyDecimalPlaces { get { return this.CurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyIdOption { get; }

        /// <summary>
        /// The currency ID of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency ID of the administration&#39;s primary currency.</value>
        /* <example>5</example> */
        [JsonPropertyName("primary_currency_id")]
        public string? PrimaryCurrencyId { get { return this.PrimaryCurrencyIdOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyNameOption { get; }

        /// <summary>
        /// The currency name of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency name of the administration&#39;s primary currency.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("primary_currency_name")]
        public string? PrimaryCurrencyName { get { return this.PrimaryCurrencyNameOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyCodeOption { get; }

        /// <summary>
        /// The currency code of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency code of the administration&#39;s primary currency.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("primary_currency_code")]
        public string? PrimaryCurrencyCode { get { return this.PrimaryCurrencyCodeOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencySymbolOption { get; }

        /// <summary>
        /// The currency symbol of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency symbol of the administration&#39;s primary currency.</value>
        /* <example>$</example> */
        [JsonPropertyName("primary_currency_symbol")]
        public string? PrimaryCurrencySymbol { get { return this.PrimaryCurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PrimaryCurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// The currency decimal places of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency decimal places of the administration&#39;s primary currency.</value>
        /* <example>2</example> */
        [JsonPropertyName("primary_currency_decimal_places")]
        public int? PrimaryCurrencyDecimalPlaces { get { return this.PrimaryCurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of Period
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PeriodOption { get; }

        /// <summary>
        /// Period of the budget limit. Only used when auto-generated by auto-budget.
        /// </summary>
        /// <value>Period of the budget limit. Only used when auto-generated by auto-budget.</value>
        /* <example>monthly</example> */
        [JsonPropertyName("period")]
        public string? Period { get { return this.PeriodOption; } }

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        /* <example>123.45</example> */
        [JsonPropertyName("amount")]
        public string? Amount { get { return this.AmountOption; } set { this.AmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of PcAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcAmountOption { get; }

        /// <summary>
        /// The amount of this budget limit in the user&#39;s primary currency, if the original amount is in a different currency.
        /// </summary>
        /// <value>The amount of this budget limit in the user&#39;s primary currency, if the original amount is in a different currency.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("pc_amount")]
        public string? PcAmount { get { return this.PcAmountOption; } }

        /// <summary>
        /// Used to track the state of Spent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SpentOption { get; }

        /// <summary>
        /// Will be in the primary currency if this is turned on by the user.
        /// </summary>
        /// <value>Will be in the primary currency if this is turned on by the user.</value>
        /* <example>-1012.12</example> */
        [JsonPropertyName("spent")]
        public string? Spent { get { return this.SpentOption; } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Some notes for this specific budget limit.
        /// </summary>
        /// <value>Some notes for this specific budget limit.</value>
        /* <example>Some example notes</example> */
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BudgetLimitUpdate {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  BudgetId: ").Append(BudgetId).Append("\n");
            sb.Append("  ObjectHasCurrencySetting: ").Append(ObjectHasCurrencySetting).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  CurrencyDecimalPlaces: ").Append(CurrencyDecimalPlaces).Append("\n");
            sb.Append("  PrimaryCurrencyId: ").Append(PrimaryCurrencyId).Append("\n");
            sb.Append("  PrimaryCurrencyName: ").Append(PrimaryCurrencyName).Append("\n");
            sb.Append("  PrimaryCurrencyCode: ").Append(PrimaryCurrencyCode).Append("\n");
            sb.Append("  PrimaryCurrencySymbol: ").Append(PrimaryCurrencySymbol).Append("\n");
            sb.Append("  PrimaryCurrencyDecimalPlaces: ").Append(PrimaryCurrencyDecimalPlaces).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PcAmount: ").Append(PcAmount).Append("\n");
            sb.Append("  Spent: ").Append(Spent).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BudgetLimitUpdate" />
    /// </summary>
    public class BudgetLimitUpdateJsonConverter : JsonConverter<BudgetLimitUpdate>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize Start
        /// </summary>
        public static string StartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize End
        /// </summary>
        public static string EndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="BudgetLimitUpdate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BudgetLimitUpdate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<DateTime?> start = default;
            Option<DateTime?> end = default;
            Option<string?> budgetId = default;
            Option<bool?> objectHasCurrencySetting = default;
            Option<string?> currencyId = default;
            Option<string?> currencyName = default;
            Option<string?> currencyCode = default;
            Option<string?> currencySymbol = default;
            Option<int?> currencyDecimalPlaces = default;
            Option<string?> primaryCurrencyId = default;
            Option<string?> primaryCurrencyName = default;
            Option<string?> primaryCurrencyCode = default;
            Option<string?> primaryCurrencySymbol = default;
            Option<int?> primaryCurrencyDecimalPlaces = default;
            Option<string?> period = default;
            Option<string?> amount = default;
            Option<string?> pcAmount = default;
            Option<string?> spent = default;
            Option<string?> notes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "start":
                            start = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "end":
                            end = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "budget_id":
                            budgetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "object_has_currency_setting":
                            objectHasCurrencySetting = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_name":
                            currencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_symbol":
                            currencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_decimal_places":
                            currencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "primary_currency_id":
                            primaryCurrencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_name":
                            primaryCurrencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_code":
                            primaryCurrencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_symbol":
                            primaryCurrencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_decimal_places":
                            primaryCurrencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "period":
                            period = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "amount":
                            amount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pc_amount":
                            pcAmount = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "spent":
                            spent = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class BudgetLimitUpdate.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class BudgetLimitUpdate.");

            if (start.IsSet && start.Value == null)
                throw new ArgumentNullException(nameof(start), "Property is not nullable for class BudgetLimitUpdate.");

            if (end.IsSet && end.Value == null)
                throw new ArgumentNullException(nameof(end), "Property is not nullable for class BudgetLimitUpdate.");

            if (budgetId.IsSet && budgetId.Value == null)
                throw new ArgumentNullException(nameof(budgetId), "Property is not nullable for class BudgetLimitUpdate.");

            if (objectHasCurrencySetting.IsSet && objectHasCurrencySetting.Value == null)
                throw new ArgumentNullException(nameof(objectHasCurrencySetting), "Property is not nullable for class BudgetLimitUpdate.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class BudgetLimitUpdate.");

            if (currencyName.IsSet && currencyName.Value == null)
                throw new ArgumentNullException(nameof(currencyName), "Property is not nullable for class BudgetLimitUpdate.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class BudgetLimitUpdate.");

            if (currencySymbol.IsSet && currencySymbol.Value == null)
                throw new ArgumentNullException(nameof(currencySymbol), "Property is not nullable for class BudgetLimitUpdate.");

            if (currencyDecimalPlaces.IsSet && currencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(currencyDecimalPlaces), "Property is not nullable for class BudgetLimitUpdate.");

            if (primaryCurrencyId.IsSet && primaryCurrencyId.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyId), "Property is not nullable for class BudgetLimitUpdate.");

            if (primaryCurrencyName.IsSet && primaryCurrencyName.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyName), "Property is not nullable for class BudgetLimitUpdate.");

            if (primaryCurrencyCode.IsSet && primaryCurrencyCode.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyCode), "Property is not nullable for class BudgetLimitUpdate.");

            if (primaryCurrencySymbol.IsSet && primaryCurrencySymbol.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencySymbol), "Property is not nullable for class BudgetLimitUpdate.");

            if (primaryCurrencyDecimalPlaces.IsSet && primaryCurrencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyDecimalPlaces), "Property is not nullable for class BudgetLimitUpdate.");

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class BudgetLimitUpdate.");

            return new BudgetLimitUpdate(createdAt, updatedAt, start, end, budgetId, objectHasCurrencySetting, currencyId, currencyName, currencyCode, currencySymbol, currencyDecimalPlaces, primaryCurrencyId, primaryCurrencyName, primaryCurrencyCode, primaryCurrencySymbol, primaryCurrencyDecimalPlaces, period, amount, pcAmount, spent, notes);
        }

        /// <summary>
        /// Serializes a <see cref="BudgetLimitUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="budgetLimitUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BudgetLimitUpdate budgetLimitUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, budgetLimitUpdate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BudgetLimitUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="budgetLimitUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BudgetLimitUpdate budgetLimitUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (budgetLimitUpdate.BudgetIdOption.IsSet && budgetLimitUpdate.BudgetId == null)
                throw new ArgumentNullException(nameof(budgetLimitUpdate.BudgetId), "Property is required for class BudgetLimitUpdate.");

            if (budgetLimitUpdate.CurrencyIdOption.IsSet && budgetLimitUpdate.CurrencyId == null)
                throw new ArgumentNullException(nameof(budgetLimitUpdate.CurrencyId), "Property is required for class BudgetLimitUpdate.");

            if (budgetLimitUpdate.CurrencyNameOption.IsSet && budgetLimitUpdate.CurrencyName == null)
                throw new ArgumentNullException(nameof(budgetLimitUpdate.CurrencyName), "Property is required for class BudgetLimitUpdate.");

            if (budgetLimitUpdate.CurrencyCodeOption.IsSet && budgetLimitUpdate.CurrencyCode == null)
                throw new ArgumentNullException(nameof(budgetLimitUpdate.CurrencyCode), "Property is required for class BudgetLimitUpdate.");

            if (budgetLimitUpdate.CurrencySymbolOption.IsSet && budgetLimitUpdate.CurrencySymbol == null)
                throw new ArgumentNullException(nameof(budgetLimitUpdate.CurrencySymbol), "Property is required for class BudgetLimitUpdate.");

            if (budgetLimitUpdate.PrimaryCurrencyIdOption.IsSet && budgetLimitUpdate.PrimaryCurrencyId == null)
                throw new ArgumentNullException(nameof(budgetLimitUpdate.PrimaryCurrencyId), "Property is required for class BudgetLimitUpdate.");

            if (budgetLimitUpdate.PrimaryCurrencyNameOption.IsSet && budgetLimitUpdate.PrimaryCurrencyName == null)
                throw new ArgumentNullException(nameof(budgetLimitUpdate.PrimaryCurrencyName), "Property is required for class BudgetLimitUpdate.");

            if (budgetLimitUpdate.PrimaryCurrencyCodeOption.IsSet && budgetLimitUpdate.PrimaryCurrencyCode == null)
                throw new ArgumentNullException(nameof(budgetLimitUpdate.PrimaryCurrencyCode), "Property is required for class BudgetLimitUpdate.");

            if (budgetLimitUpdate.PrimaryCurrencySymbolOption.IsSet && budgetLimitUpdate.PrimaryCurrencySymbol == null)
                throw new ArgumentNullException(nameof(budgetLimitUpdate.PrimaryCurrencySymbol), "Property is required for class BudgetLimitUpdate.");

            if (budgetLimitUpdate.AmountOption.IsSet && budgetLimitUpdate.Amount == null)
                throw new ArgumentNullException(nameof(budgetLimitUpdate.Amount), "Property is required for class BudgetLimitUpdate.");

            if (budgetLimitUpdate.CreatedAtOption.IsSet)
                writer.WriteString("created_at", budgetLimitUpdate.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (budgetLimitUpdate.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", budgetLimitUpdate.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));

            if (budgetLimitUpdate.StartOption.IsSet)
                writer.WriteString("start", budgetLimitUpdate.StartOption.Value!.Value.ToString(StartFormat));

            if (budgetLimitUpdate.EndOption.IsSet)
                writer.WriteString("end", budgetLimitUpdate.EndOption.Value!.Value.ToString(EndFormat));

            if (budgetLimitUpdate.BudgetIdOption.IsSet)
                writer.WriteString("budget_id", budgetLimitUpdate.BudgetId);

            if (budgetLimitUpdate.ObjectHasCurrencySettingOption.IsSet)
                writer.WriteBoolean("object_has_currency_setting", budgetLimitUpdate.ObjectHasCurrencySettingOption.Value!.Value);

            if (budgetLimitUpdate.CurrencyIdOption.IsSet)
                writer.WriteString("currency_id", budgetLimitUpdate.CurrencyId);

            if (budgetLimitUpdate.CurrencyNameOption.IsSet)
                writer.WriteString("currency_name", budgetLimitUpdate.CurrencyName);

            if (budgetLimitUpdate.CurrencyCodeOption.IsSet)
                writer.WriteString("currency_code", budgetLimitUpdate.CurrencyCode);

            if (budgetLimitUpdate.CurrencySymbolOption.IsSet)
                writer.WriteString("currency_symbol", budgetLimitUpdate.CurrencySymbol);

            if (budgetLimitUpdate.CurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("currency_decimal_places", budgetLimitUpdate.CurrencyDecimalPlacesOption.Value!.Value);

            if (budgetLimitUpdate.PrimaryCurrencyIdOption.IsSet)
                writer.WriteString("primary_currency_id", budgetLimitUpdate.PrimaryCurrencyId);

            if (budgetLimitUpdate.PrimaryCurrencyNameOption.IsSet)
                writer.WriteString("primary_currency_name", budgetLimitUpdate.PrimaryCurrencyName);

            if (budgetLimitUpdate.PrimaryCurrencyCodeOption.IsSet)
                writer.WriteString("primary_currency_code", budgetLimitUpdate.PrimaryCurrencyCode);

            if (budgetLimitUpdate.PrimaryCurrencySymbolOption.IsSet)
                writer.WriteString("primary_currency_symbol", budgetLimitUpdate.PrimaryCurrencySymbol);

            if (budgetLimitUpdate.PrimaryCurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("primary_currency_decimal_places", budgetLimitUpdate.PrimaryCurrencyDecimalPlacesOption.Value!.Value);

            if (budgetLimitUpdate.PeriodOption.IsSet)
                if (budgetLimitUpdate.PeriodOption.Value != null)
                    writer.WriteString("period", budgetLimitUpdate.Period);
                else
                    writer.WriteNull("period");

            if (budgetLimitUpdate.AmountOption.IsSet)
                writer.WriteString("amount", budgetLimitUpdate.Amount);

            if (budgetLimitUpdate.PcAmountOption.IsSet)
                if (budgetLimitUpdate.PcAmountOption.Value != null)
                    writer.WriteString("pc_amount", budgetLimitUpdate.PcAmount);
                else
                    writer.WriteNull("pc_amount");

            if (budgetLimitUpdate.SpentOption.IsSet)
                if (budgetLimitUpdate.SpentOption.Value != null)
                    writer.WriteString("spent", budgetLimitUpdate.Spent);
                else
                    writer.WriteNull("spent");

            if (budgetLimitUpdate.NotesOption.IsSet)
                if (budgetLimitUpdate.NotesOption.Value != null)
                    writer.WriteString("notes", budgetLimitUpdate.Notes);
                else
                    writer.WriteNull("notes");
        }
    }
}
