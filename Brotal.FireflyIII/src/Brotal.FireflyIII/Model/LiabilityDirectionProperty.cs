// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// &#39;credit&#39; indicates somebody owes you the liability. &#39;debit&#39; Indicates you owe this debt yourself. Works only for liabilities.
    /// </summary>
    /// <value>&#39;credit&#39; indicates somebody owes you the liability. &#39;debit&#39; Indicates you owe this debt yourself. Works only for liabilities.</value>
    public enum LiabilityDirectionProperty
    {
        /// <summary>
        /// Enum Credit for value: credit
        /// </summary>
        Credit = 1,

        /// <summary>
        /// Enum Debit for value: debit
        /// </summary>
        Debit = 2
    }

    /// <summary>
    /// Converts <see cref="LiabilityDirectionProperty"/> to and from the JSON value
    /// </summary>
    public static class LiabilityDirectionPropertyValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="LiabilityDirectionProperty"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LiabilityDirectionProperty FromString(string value)
        {
            if (value.Equals("credit"))
                return LiabilityDirectionProperty.Credit;

            if (value.Equals("debit"))
                return LiabilityDirectionProperty.Debit;

            throw new NotImplementedException($"Could not convert value to type LiabilityDirectionProperty: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="LiabilityDirectionProperty"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LiabilityDirectionProperty? FromStringOrDefault(string value)
        {
            if (value.Equals("credit"))
                return LiabilityDirectionProperty.Credit;

            if (value.Equals("debit"))
                return LiabilityDirectionProperty.Debit;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="LiabilityDirectionProperty"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(LiabilityDirectionProperty value)
        {
            if (value == LiabilityDirectionProperty.Credit)
                return "credit";

            if (value == LiabilityDirectionProperty.Debit)
                return "debit";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LiabilityDirectionProperty"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class LiabilityDirectionPropertyJsonConverter : JsonConverter<LiabilityDirectionProperty>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override LiabilityDirectionProperty Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            LiabilityDirectionProperty? result = rawValue == null
                ? null
                : LiabilityDirectionPropertyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the LiabilityDirectionProperty to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="liabilityDirectionProperty"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, LiabilityDirectionProperty liabilityDirectionProperty, JsonSerializerOptions options)
        {
            writer.WriteStringValue(LiabilityDirectionPropertyValueConverter.ToJsonValue(liabilityDirectionProperty).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LiabilityDirectionProperty"/>
    /// </summary>
    public class LiabilityDirectionPropertyNullableJsonConverter : JsonConverter<LiabilityDirectionProperty?>
    {
        /// <summary>
        /// Returns a LiabilityDirectionProperty from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override LiabilityDirectionProperty? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            LiabilityDirectionProperty? result = rawValue == null
                ? null
                : LiabilityDirectionPropertyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the LiabilityDirectionProperty to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="liabilityDirectionProperty"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, LiabilityDirectionProperty? liabilityDirectionProperty, JsonSerializerOptions options)
        {
            writer.WriteStringValue(liabilityDirectionProperty.HasValue ? LiabilityDirectionPropertyValueConverter.ToJsonValue(liabilityDirectionProperty.Value).ToString() : "null");
        }
    }
}
