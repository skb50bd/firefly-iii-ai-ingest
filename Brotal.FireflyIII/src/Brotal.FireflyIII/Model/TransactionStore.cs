// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// TransactionStore
    /// </summary>
    public partial class TransactionStore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionStore" /> class.
        /// </summary>
        /// <param name="transactions">transactions</param>
        /// <param name="errorIfDuplicateHash">Break if the submitted transaction exists already.</param>
        /// <param name="applyRules">Whether or not to apply rules when submitting transaction.</param>
        /// <param name="fireWebhooks">Whether or not to fire the webhooks that are related to this event. (default to true)</param>
        /// <param name="groupTitle">Title of the transaction if it has been split in more than one piece. Empty otherwise.</param>
        [JsonConstructor]
        public TransactionStore(List<TransactionSplitStore> transactions, Option<bool?> errorIfDuplicateHash = default, Option<bool?> applyRules = default, Option<bool?> fireWebhooks = default, Option<string?> groupTitle = default)
        {
            Transactions = transactions;
            ErrorIfDuplicateHashOption = errorIfDuplicateHash;
            ApplyRulesOption = applyRules;
            FireWebhooksOption = fireWebhooks;
            GroupTitleOption = groupTitle;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [JsonPropertyName("transactions")]
        public List<TransactionSplitStore> Transactions { get; set; }

        /// <summary>
        /// Used to track the state of ErrorIfDuplicateHash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ErrorIfDuplicateHashOption { get; private set; }

        /// <summary>
        /// Break if the submitted transaction exists already.
        /// </summary>
        /// <value>Break if the submitted transaction exists already.</value>
        /* <example>false</example> */
        [JsonPropertyName("error_if_duplicate_hash")]
        public bool? ErrorIfDuplicateHash { get { return this.ErrorIfDuplicateHashOption; } set { this.ErrorIfDuplicateHashOption = new(value); } }

        /// <summary>
        /// Used to track the state of ApplyRules
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ApplyRulesOption { get; private set; }

        /// <summary>
        /// Whether or not to apply rules when submitting transaction.
        /// </summary>
        /// <value>Whether or not to apply rules when submitting transaction.</value>
        /* <example>false</example> */
        [JsonPropertyName("apply_rules")]
        public bool? ApplyRules { get { return this.ApplyRulesOption; } set { this.ApplyRulesOption = new(value); } }

        /// <summary>
        /// Used to track the state of FireWebhooks
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FireWebhooksOption { get; private set; }

        /// <summary>
        /// Whether or not to fire the webhooks that are related to this event.
        /// </summary>
        /// <value>Whether or not to fire the webhooks that are related to this event.</value>
        /* <example>true</example> */
        [JsonPropertyName("fire_webhooks")]
        public bool? FireWebhooks { get { return this.FireWebhooksOption; } set { this.FireWebhooksOption = new(value); } }

        /// <summary>
        /// Used to track the state of GroupTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GroupTitleOption { get; private set; }

        /// <summary>
        /// Title of the transaction if it has been split in more than one piece. Empty otherwise.
        /// </summary>
        /// <value>Title of the transaction if it has been split in more than one piece. Empty otherwise.</value>
        /* <example>Split transaction title.</example> */
        [JsonPropertyName("group_title")]
        public string? GroupTitle { get { return this.GroupTitleOption; } set { this.GroupTitleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionStore {\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  ErrorIfDuplicateHash: ").Append(ErrorIfDuplicateHash).Append("\n");
            sb.Append("  ApplyRules: ").Append(ApplyRules).Append("\n");
            sb.Append("  FireWebhooks: ").Append(FireWebhooks).Append("\n");
            sb.Append("  GroupTitle: ").Append(GroupTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransactionStore" />
    /// </summary>
    public class TransactionStoreJsonConverter : JsonConverter<TransactionStore>
    {
        /// <summary>
        /// Deserializes json to <see cref="TransactionStore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransactionStore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<TransactionSplitStore>?> transactions = default;
            Option<bool?> errorIfDuplicateHash = default;
            Option<bool?> applyRules = default;
            Option<bool?> fireWebhooks = default;
            Option<string?> groupTitle = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "transactions":
                            transactions = new Option<List<TransactionSplitStore>?>(JsonSerializer.Deserialize<List<TransactionSplitStore>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "error_if_duplicate_hash":
                            errorIfDuplicateHash = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "apply_rules":
                            applyRules = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "fire_webhooks":
                            fireWebhooks = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "group_title":
                            groupTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!transactions.IsSet)
                throw new ArgumentException("Property is required for class TransactionStore.", nameof(transactions));

            if (transactions.IsSet && transactions.Value == null)
                throw new ArgumentNullException(nameof(transactions), "Property is not nullable for class TransactionStore.");

            if (errorIfDuplicateHash.IsSet && errorIfDuplicateHash.Value == null)
                throw new ArgumentNullException(nameof(errorIfDuplicateHash), "Property is not nullable for class TransactionStore.");

            if (applyRules.IsSet && applyRules.Value == null)
                throw new ArgumentNullException(nameof(applyRules), "Property is not nullable for class TransactionStore.");

            if (fireWebhooks.IsSet && fireWebhooks.Value == null)
                throw new ArgumentNullException(nameof(fireWebhooks), "Property is not nullable for class TransactionStore.");

            return new TransactionStore(transactions.Value!, errorIfDuplicateHash, applyRules, fireWebhooks, groupTitle);
        }

        /// <summary>
        /// Serializes a <see cref="TransactionStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransactionStore transactionStore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, transactionStore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransactionStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transactionStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TransactionStore transactionStore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (transactionStore.Transactions == null)
                throw new ArgumentNullException(nameof(transactionStore.Transactions), "Property is required for class TransactionStore.");

            writer.WritePropertyName("transactions");
            JsonSerializer.Serialize(writer, transactionStore.Transactions, jsonSerializerOptions);
            if (transactionStore.ErrorIfDuplicateHashOption.IsSet)
                writer.WriteBoolean("error_if_duplicate_hash", transactionStore.ErrorIfDuplicateHashOption.Value!.Value);

            if (transactionStore.ApplyRulesOption.IsSet)
                writer.WriteBoolean("apply_rules", transactionStore.ApplyRulesOption.Value!.Value);

            if (transactionStore.FireWebhooksOption.IsSet)
                writer.WriteBoolean("fire_webhooks", transactionStore.FireWebhooksOption.Value!.Value);

            if (transactionStore.GroupTitleOption.IsSet)
                if (transactionStore.GroupTitleOption.Value != null)
                    writer.WriteString("group_title", transactionStore.GroupTitle);
                else
                    writer.WriteNull("group_title");
        }
    }
}
