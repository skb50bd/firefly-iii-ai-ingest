// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// AttachmentProperties
    /// </summary>
    public partial class AttachmentProperties : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentProperties" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="attachableType">attachableType</param>
        /// <param name="attachableId">ID of the model this attachment is linked to.</param>
        /// <param name="hash">Hash of the file for basic duplicate detection.</param>
        /// <param name="filename">filename</param>
        /// <param name="downloadUrl">downloadUrl</param>
        /// <param name="uploadUrl">uploadUrl</param>
        /// <param name="title">title</param>
        /// <param name="notes">notes</param>
        /// <param name="mime">mime</param>
        /// <param name="size">size</param>
        [JsonConstructor]
        public AttachmentProperties(Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default, Option<AttachableType?> attachableType = default, Option<string?> attachableId = default, Option<string?> hash = default, Option<string?> filename = default, Option<string?> downloadUrl = default, Option<string?> uploadUrl = default, Option<string?> title = default, Option<string?> notes = default, Option<string?> mime = default, Option<int?> size = default)
        {
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            AttachableTypeOption = attachableType;
            AttachableIdOption = attachableId;
            HashOption = hash;
            FilenameOption = filename;
            DownloadUrlOption = downloadUrl;
            UploadUrlOption = uploadUrl;
            TitleOption = title;
            NotesOption = notes;
            MimeOption = mime;
            SizeOption = size;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AttachableType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AttachableType?> AttachableTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets AttachableType
        /// </summary>
        [JsonPropertyName("attachable_type")]
        public AttachableType? AttachableType { get { return this.AttachableTypeOption; } set { this.AttachableTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } }

        /// <summary>
        /// Used to track the state of AttachableId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AttachableIdOption { get; private set; }

        /// <summary>
        /// ID of the model this attachment is linked to.
        /// </summary>
        /// <value>ID of the model this attachment is linked to.</value>
        /* <example>134</example> */
        [JsonPropertyName("attachable_id")]
        public string? AttachableId { get { return this.AttachableIdOption; } set { this.AttachableIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HashOption { get; private set; }

        /// <summary>
        /// Hash of the file for basic duplicate detection.
        /// </summary>
        /// <value>Hash of the file for basic duplicate detection.</value>
        /* <example>0c3f95f34370baa88f9fd9a671fea305</example> */
        [JsonPropertyName("hash")]
        public string? Hash { get { return this.HashOption; } set { this.HashOption = new(value); } }

        /// <summary>
        /// Used to track the state of Filename
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FilenameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Filename
        /// </summary>
        /* <example>file.pdf</example> */
        [JsonPropertyName("filename")]
        public string? Filename { get { return this.FilenameOption; } set { this.FilenameOption = new(value); } }

        /// <summary>
        /// Used to track the state of DownloadUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DownloadUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets DownloadUrl
        /// </summary>
        /* <example>https://demo.firefly-iii.org/api/v1/attachments/191/download</example> */
        [JsonPropertyName("download_url")]
        public string? DownloadUrl { get { return this.DownloadUrlOption; } set { this.DownloadUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of UploadUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UploadUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets UploadUrl
        /// </summary>
        /* <example>https://demo.firefly-iii.org/api/v1/attachments/191/download</example> */
        [JsonPropertyName("upload_url")]
        public string? UploadUrl { get { return this.UploadUrlOption; } set { this.UploadUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        /* <example>Some PDF file</example> */
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        /* <example>Some notes</example> */
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Mime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MimeOption { get; }

        /// <summary>
        /// Gets or Sets Mime
        /// </summary>
        /* <example>application/pdf</example> */
        [JsonPropertyName("mime")]
        public string? Mime { get { return this.MimeOption; } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SizeOption { get; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        /* <example>48211</example> */
        [JsonPropertyName("size")]
        public int? Size { get { return this.SizeOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachmentProperties {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  AttachableType: ").Append(AttachableType).Append("\n");
            sb.Append("  AttachableId: ").Append(AttachableId).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("  UploadUrl: ").Append(UploadUrl).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Mime: ").Append(Mime).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AttachmentProperties" />
    /// </summary>
    public class AttachmentPropertiesJsonConverter : JsonConverter<AttachmentProperties>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AttachmentProperties" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AttachmentProperties Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<AttachableType?> attachableType = default;
            Option<string?> attachableId = default;
            Option<string?> hash = default;
            Option<string?> filename = default;
            Option<string?> downloadUrl = default;
            Option<string?> uploadUrl = default;
            Option<string?> title = default;
            Option<string?> notes = default;
            Option<string?> mime = default;
            Option<int?> size = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "attachable_type":
                            string? attachableTypeRawValue = utf8JsonReader.GetString();
                            if (attachableTypeRawValue != null)
                                attachableType = new Option<AttachableType?>(AttachableTypeValueConverter.FromStringOrDefault(attachableTypeRawValue));
                            break;
                        case "attachable_id":
                            attachableId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hash":
                            hash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "filename":
                            filename = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "download_url":
                            downloadUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "upload_url":
                            uploadUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "mime":
                            mime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class AttachmentProperties.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class AttachmentProperties.");

            if (attachableType.IsSet && attachableType.Value == null)
                throw new ArgumentNullException(nameof(attachableType), "Property is not nullable for class AttachmentProperties.");

            if (attachableId.IsSet && attachableId.Value == null)
                throw new ArgumentNullException(nameof(attachableId), "Property is not nullable for class AttachmentProperties.");

            if (hash.IsSet && hash.Value == null)
                throw new ArgumentNullException(nameof(hash), "Property is not nullable for class AttachmentProperties.");

            if (filename.IsSet && filename.Value == null)
                throw new ArgumentNullException(nameof(filename), "Property is not nullable for class AttachmentProperties.");

            if (downloadUrl.IsSet && downloadUrl.Value == null)
                throw new ArgumentNullException(nameof(downloadUrl), "Property is not nullable for class AttachmentProperties.");

            if (uploadUrl.IsSet && uploadUrl.Value == null)
                throw new ArgumentNullException(nameof(uploadUrl), "Property is not nullable for class AttachmentProperties.");

            if (mime.IsSet && mime.Value == null)
                throw new ArgumentNullException(nameof(mime), "Property is not nullable for class AttachmentProperties.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class AttachmentProperties.");

            return new AttachmentProperties(createdAt, updatedAt, attachableType, attachableId, hash, filename, downloadUrl, uploadUrl, title, notes, mime, size);
        }

        /// <summary>
        /// Serializes a <see cref="AttachmentProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachmentProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AttachmentProperties attachmentProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, attachmentProperties, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AttachmentProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="attachmentProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AttachmentProperties attachmentProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            if (attachmentProperties.AttachableIdOption.IsSet && attachmentProperties.AttachableId == null)
                throw new ArgumentNullException(nameof(attachmentProperties.AttachableId), "Property is required for class AttachmentProperties.");

            if (attachmentProperties.HashOption.IsSet && attachmentProperties.Hash == null)
                throw new ArgumentNullException(nameof(attachmentProperties.Hash), "Property is required for class AttachmentProperties.");

            if (attachmentProperties.FilenameOption.IsSet && attachmentProperties.Filename == null)
                throw new ArgumentNullException(nameof(attachmentProperties.Filename), "Property is required for class AttachmentProperties.");

            if (attachmentProperties.DownloadUrlOption.IsSet && attachmentProperties.DownloadUrl == null)
                throw new ArgumentNullException(nameof(attachmentProperties.DownloadUrl), "Property is required for class AttachmentProperties.");

            if (attachmentProperties.UploadUrlOption.IsSet && attachmentProperties.UploadUrl == null)
                throw new ArgumentNullException(nameof(attachmentProperties.UploadUrl), "Property is required for class AttachmentProperties.");

            if (attachmentProperties.MimeOption.IsSet && attachmentProperties.Mime == null)
                throw new ArgumentNullException(nameof(attachmentProperties.Mime), "Property is required for class AttachmentProperties.");

            if (attachmentProperties.CreatedAtOption.IsSet)
                writer.WriteString("created_at", attachmentProperties.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (attachmentProperties.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", attachmentProperties.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));

            if (attachmentProperties.AttachableTypeOption.IsSet)
            {
                var attachableTypeRawValue = AttachableTypeValueConverter.ToJsonValue(attachmentProperties.AttachableType!.Value);
                writer.WriteString("attachable_type", attachableTypeRawValue);
            }
            if (attachmentProperties.AttachableIdOption.IsSet)
                writer.WriteString("attachable_id", attachmentProperties.AttachableId);

            if (attachmentProperties.HashOption.IsSet)
                writer.WriteString("hash", attachmentProperties.Hash);

            if (attachmentProperties.FilenameOption.IsSet)
                writer.WriteString("filename", attachmentProperties.Filename);

            if (attachmentProperties.DownloadUrlOption.IsSet)
                writer.WriteString("download_url", attachmentProperties.DownloadUrl);

            if (attachmentProperties.UploadUrlOption.IsSet)
                writer.WriteString("upload_url", attachmentProperties.UploadUrl);

            if (attachmentProperties.TitleOption.IsSet)
                if (attachmentProperties.TitleOption.Value != null)
                    writer.WriteString("title", attachmentProperties.Title);
                else
                    writer.WriteNull("title");

            if (attachmentProperties.NotesOption.IsSet)
                if (attachmentProperties.NotesOption.Value != null)
                    writer.WriteString("notes", attachmentProperties.Notes);
                else
                    writer.WriteNull("notes");

            if (attachmentProperties.MimeOption.IsSet)
                writer.WriteString("mime", attachmentProperties.Mime);

            if (attachmentProperties.SizeOption.IsSet)
                writer.WriteNumber("size", attachmentProperties.SizeOption.Value!.Value);
        }
    }
}
