// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// WebhookAttempt
    /// </summary>
    public partial class WebhookAttempt : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookAttempt" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="webhookMessageId">The ID of the webhook message this attempt belongs to.</param>
        /// <param name="statusCode">The HTTP status code of the error, if any.</param>
        /// <param name="logs">Internal log for this attempt. May contain sensitive user data.</param>
        /// <param name="response">Webhook receiver response for this attempt, if any. May contain sensitive user data.</param>
        [JsonConstructor]
        public WebhookAttempt(Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default, Option<string?> webhookMessageId = default, Option<int?> statusCode = default, Option<string?> logs = default, Option<string?> response = default)
        {
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            WebhookMessageIdOption = webhookMessageId;
            StatusCodeOption = statusCode;
            LogsOption = logs;
            ResponseOption = response;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } }

        /// <summary>
        /// Used to track the state of WebhookMessageId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebhookMessageIdOption { get; private set; }

        /// <summary>
        /// The ID of the webhook message this attempt belongs to.
        /// </summary>
        /// <value>The ID of the webhook message this attempt belongs to.</value>
        /* <example>5</example> */
        [JsonPropertyName("webhook_message_id")]
        public string? WebhookMessageId { get { return this.WebhookMessageIdOption; } set { this.WebhookMessageIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of StatusCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StatusCodeOption { get; private set; }

        /// <summary>
        /// The HTTP status code of the error, if any.
        /// </summary>
        /// <value>The HTTP status code of the error, if any.</value>
        /* <example>404</example> */
        [JsonPropertyName("status_code")]
        public int? StatusCode { get { return this.StatusCodeOption; } set { this.StatusCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Logs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LogsOption { get; private set; }

        /// <summary>
        /// Internal log for this attempt. May contain sensitive user data.
        /// </summary>
        /// <value>Internal log for this attempt. May contain sensitive user data.</value>
        /* <example>Page not found</example> */
        [JsonPropertyName("logs")]
        public string? Logs { get { return this.LogsOption; } set { this.LogsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Response
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResponseOption { get; private set; }

        /// <summary>
        /// Webhook receiver response for this attempt, if any. May contain sensitive user data.
        /// </summary>
        /// <value>Webhook receiver response for this attempt, if any. May contain sensitive user data.</value>
        /* <example>Page not found</example> */
        [JsonPropertyName("response")]
        public string? Response { get { return this.ResponseOption; } set { this.ResponseOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookAttempt {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  WebhookMessageId: ").Append(WebhookMessageId).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookAttempt" />
    /// </summary>
    public class WebhookAttemptJsonConverter : JsonConverter<WebhookAttempt>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="WebhookAttempt" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookAttempt Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<string?> webhookMessageId = default;
            Option<int?> statusCode = default;
            Option<string?> logs = default;
            Option<string?> response = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "webhook_message_id":
                            webhookMessageId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status_code":
                            statusCode = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "logs":
                            logs = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "response":
                            response = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WebhookAttempt.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class WebhookAttempt.");

            if (webhookMessageId.IsSet && webhookMessageId.Value == null)
                throw new ArgumentNullException(nameof(webhookMessageId), "Property is not nullable for class WebhookAttempt.");

            return new WebhookAttempt(createdAt, updatedAt, webhookMessageId, statusCode, logs, response);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookAttempt" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookAttempt"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookAttempt webhookAttempt, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhookAttempt, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookAttempt" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookAttempt"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebhookAttempt webhookAttempt, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookAttempt.WebhookMessageIdOption.IsSet && webhookAttempt.WebhookMessageId == null)
                throw new ArgumentNullException(nameof(webhookAttempt.WebhookMessageId), "Property is required for class WebhookAttempt.");

            if (webhookAttempt.CreatedAtOption.IsSet)
                writer.WriteString("created_at", webhookAttempt.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (webhookAttempt.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", webhookAttempt.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));

            if (webhookAttempt.WebhookMessageIdOption.IsSet)
                writer.WriteString("webhook_message_id", webhookAttempt.WebhookMessageId);

            if (webhookAttempt.StatusCodeOption.IsSet)
                if (webhookAttempt.StatusCodeOption.Value != null)
                    writer.WriteNumber("status_code", webhookAttempt.StatusCodeOption.Value!.Value);
                else
                    writer.WriteNull("status_code");

            if (webhookAttempt.LogsOption.IsSet)
                if (webhookAttempt.LogsOption.Value != null)
                    writer.WriteString("logs", webhookAttempt.Logs);
                else
                    writer.WriteNull("logs");

            if (webhookAttempt.ResponseOption.IsSet)
                if (webhookAttempt.ResponseOption.Value != null)
                    writer.WriteString("response", webhookAttempt.Response);
                else
                    writer.WriteNull("response");
        }
    }
}
