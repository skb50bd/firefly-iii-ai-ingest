// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// Period for the auto budget
    /// </summary>
    /// <value>Period for the auto budget</value>
    public enum AutoBudgetPeriod
    {
        /// <summary>
        /// Enum Daily for value: daily
        /// </summary>
        Daily = 1,

        /// <summary>
        /// Enum Weekly for value: weekly
        /// </summary>
        Weekly = 2,

        /// <summary>
        /// Enum Monthly for value: monthly
        /// </summary>
        Monthly = 3,

        /// <summary>
        /// Enum Quarterly for value: quarterly
        /// </summary>
        Quarterly = 4,

        /// <summary>
        /// Enum HalfYear for value: half-year
        /// </summary>
        HalfYear = 5,

        /// <summary>
        /// Enum Yearly for value: yearly
        /// </summary>
        Yearly = 6
    }

    /// <summary>
    /// Converts <see cref="AutoBudgetPeriod"/> to and from the JSON value
    /// </summary>
    public static class AutoBudgetPeriodValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AutoBudgetPeriod"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AutoBudgetPeriod FromString(string value)
        {
            if (value.Equals("daily"))
                return AutoBudgetPeriod.Daily;

            if (value.Equals("weekly"))
                return AutoBudgetPeriod.Weekly;

            if (value.Equals("monthly"))
                return AutoBudgetPeriod.Monthly;

            if (value.Equals("quarterly"))
                return AutoBudgetPeriod.Quarterly;

            if (value.Equals("half-year"))
                return AutoBudgetPeriod.HalfYear;

            if (value.Equals("yearly"))
                return AutoBudgetPeriod.Yearly;

            throw new NotImplementedException($"Could not convert value to type AutoBudgetPeriod: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AutoBudgetPeriod"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AutoBudgetPeriod? FromStringOrDefault(string value)
        {
            if (value.Equals("daily"))
                return AutoBudgetPeriod.Daily;

            if (value.Equals("weekly"))
                return AutoBudgetPeriod.Weekly;

            if (value.Equals("monthly"))
                return AutoBudgetPeriod.Monthly;

            if (value.Equals("quarterly"))
                return AutoBudgetPeriod.Quarterly;

            if (value.Equals("half-year"))
                return AutoBudgetPeriod.HalfYear;

            if (value.Equals("yearly"))
                return AutoBudgetPeriod.Yearly;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AutoBudgetPeriod"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(AutoBudgetPeriod value)
        {
            if (value == AutoBudgetPeriod.Daily)
                return "daily";

            if (value == AutoBudgetPeriod.Weekly)
                return "weekly";

            if (value == AutoBudgetPeriod.Monthly)
                return "monthly";

            if (value == AutoBudgetPeriod.Quarterly)
                return "quarterly";

            if (value == AutoBudgetPeriod.HalfYear)
                return "half-year";

            if (value == AutoBudgetPeriod.Yearly)
                return "yearly";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AutoBudgetPeriod"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AutoBudgetPeriodJsonConverter : JsonConverter<AutoBudgetPeriod>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AutoBudgetPeriod Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AutoBudgetPeriod? result = rawValue == null
                ? null
                : AutoBudgetPeriodValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AutoBudgetPeriod to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="autoBudgetPeriod"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AutoBudgetPeriod autoBudgetPeriod, JsonSerializerOptions options)
        {
            writer.WriteStringValue(AutoBudgetPeriodValueConverter.ToJsonValue(autoBudgetPeriod).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AutoBudgetPeriod"/>
    /// </summary>
    public class AutoBudgetPeriodNullableJsonConverter : JsonConverter<AutoBudgetPeriod?>
    {
        /// <summary>
        /// Returns a AutoBudgetPeriod from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AutoBudgetPeriod? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AutoBudgetPeriod? result = rawValue == null
                ? null
                : AutoBudgetPeriodValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AutoBudgetPeriod to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="autoBudgetPeriod"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AutoBudgetPeriod? autoBudgetPeriod, JsonSerializerOptions options)
        {
            writer.WriteStringValue(autoBudgetPeriod.HasValue ? AutoBudgetPeriodValueConverter.ToJsonValue(autoBudgetPeriod.Value).ToString() : "null");
        }
    }
}
