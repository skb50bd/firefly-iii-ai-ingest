// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// ValidationErrorResponseErrors
    /// </summary>
    public partial class ValidationErrorResponseErrors : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationErrorResponseErrors" /> class.
        /// </summary>
        /// <param name="email">email</param>
        /// <param name="force">force</param>
        /// <param name="blocked">blocked</param>
        /// <param name="field">field</param>
        /// <param name="role">role</param>
        /// <param name="blockedCode">blockedCode</param>
        /// <param name="name">name</param>
        /// <param name="type">type</param>
        /// <param name="iban">iban</param>
        /// <param name="start">start</param>
        /// <param name="end">end</param>
        /// <param name="date">date</param>
        [JsonConstructor]
        public ValidationErrorResponseErrors(Option<List<string>?> email = default, Option<List<string>?> force = default, Option<List<string>?> blocked = default, Option<List<string>?> field = default, Option<List<string>?> role = default, Option<List<string>?> blockedCode = default, Option<List<string>?> name = default, Option<List<string>?> type = default, Option<List<string>?> iban = default, Option<List<string>?> start = default, Option<List<string>?> end = default, Option<List<string>?> date = default)
        {
            EmailOption = email;
            ForceOption = force;
            BlockedOption = blocked;
            FieldOption = field;
            RoleOption = role;
            BlockedCodeOption = blockedCode;
            NameOption = name;
            TypeOption = type;
            IbanOption = iban;
            StartOption = start;
            EndOption = end;
            DateOption = date;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> EmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public List<string>? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of Force
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ForceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Force
        /// </summary>
        [JsonPropertyName("force")]
        public List<string>? Force { get { return this.ForceOption; } set { this.ForceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Blocked
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> BlockedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Blocked
        /// </summary>
        [JsonPropertyName("blocked")]
        public List<string>? Blocked { get { return this.BlockedOption; } set { this.BlockedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Field
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> FieldOption { get; private set; }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [JsonPropertyName("field")]
        public List<string>? Field { get { return this.FieldOption; } set { this.FieldOption = new(value); } }

        /// <summary>
        /// Used to track the state of Role
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> RoleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [JsonPropertyName("role")]
        public List<string>? Role { get { return this.RoleOption; } set { this.RoleOption = new(value); } }

        /// <summary>
        /// Used to track the state of BlockedCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> BlockedCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets BlockedCode
        /// </summary>
        [JsonPropertyName("blocked_code")]
        public List<string>? BlockedCode { get { return this.BlockedCodeOption; } set { this.BlockedCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public List<string>? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public List<string>? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Iban
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> IbanOption { get; private set; }

        /// <summary>
        /// Gets or Sets Iban
        /// </summary>
        [JsonPropertyName("iban")]
        public List<string>? Iban { get { return this.IbanOption; } set { this.IbanOption = new(value); } }

        /// <summary>
        /// Used to track the state of Start
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> StartOption { get; private set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [JsonPropertyName("start")]
        public List<string>? Start { get { return this.StartOption; } set { this.StartOption = new(value); } }

        /// <summary>
        /// Used to track the state of End
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> EndOption { get; private set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [JsonPropertyName("end")]
        public List<string>? End { get { return this.EndOption; } set { this.EndOption = new(value); } }

        /// <summary>
        /// Used to track the state of Date
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> DateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [JsonPropertyName("date")]
        public List<string>? Date { get { return this.DateOption; } set { this.DateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidationErrorResponseErrors {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Force: ").Append(Force).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  BlockedCode: ").Append(BlockedCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ValidationErrorResponseErrors" />
    /// </summary>
    public class ValidationErrorResponseErrorsJsonConverter : JsonConverter<ValidationErrorResponseErrors>
    {
        /// <summary>
        /// Deserializes json to <see cref="ValidationErrorResponseErrors" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ValidationErrorResponseErrors Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> email = default;
            Option<List<string>?> force = default;
            Option<List<string>?> blocked = default;
            Option<List<string>?> field = default;
            Option<List<string>?> role = default;
            Option<List<string>?> blockedCode = default;
            Option<List<string>?> name = default;
            Option<List<string>?> type = default;
            Option<List<string>?> iban = default;
            Option<List<string>?> start = default;
            Option<List<string>?> end = default;
            Option<List<string>?> date = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "email":
                            email = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "force":
                            force = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "blocked":
                            blocked = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "field":
                            field = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "role":
                            role = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "blocked_code":
                            blockedCode = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "type":
                            type = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "iban":
                            iban = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "start":
                            start = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "end":
                            end = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "date":
                            date = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class ValidationErrorResponseErrors.");

            if (force.IsSet && force.Value == null)
                throw new ArgumentNullException(nameof(force), "Property is not nullable for class ValidationErrorResponseErrors.");

            if (blocked.IsSet && blocked.Value == null)
                throw new ArgumentNullException(nameof(blocked), "Property is not nullable for class ValidationErrorResponseErrors.");

            if (field.IsSet && field.Value == null)
                throw new ArgumentNullException(nameof(field), "Property is not nullable for class ValidationErrorResponseErrors.");

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role), "Property is not nullable for class ValidationErrorResponseErrors.");

            if (blockedCode.IsSet && blockedCode.Value == null)
                throw new ArgumentNullException(nameof(blockedCode), "Property is not nullable for class ValidationErrorResponseErrors.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ValidationErrorResponseErrors.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ValidationErrorResponseErrors.");

            if (iban.IsSet && iban.Value == null)
                throw new ArgumentNullException(nameof(iban), "Property is not nullable for class ValidationErrorResponseErrors.");

            if (start.IsSet && start.Value == null)
                throw new ArgumentNullException(nameof(start), "Property is not nullable for class ValidationErrorResponseErrors.");

            if (end.IsSet && end.Value == null)
                throw new ArgumentNullException(nameof(end), "Property is not nullable for class ValidationErrorResponseErrors.");

            if (date.IsSet && date.Value == null)
                throw new ArgumentNullException(nameof(date), "Property is not nullable for class ValidationErrorResponseErrors.");

            return new ValidationErrorResponseErrors(email, force, blocked, field, role, blockedCode, name, type, iban, start, end, date);
        }

        /// <summary>
        /// Serializes a <see cref="ValidationErrorResponseErrors" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="validationErrorResponseErrors"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ValidationErrorResponseErrors validationErrorResponseErrors, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, validationErrorResponseErrors, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ValidationErrorResponseErrors" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="validationErrorResponseErrors"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ValidationErrorResponseErrors validationErrorResponseErrors, JsonSerializerOptions jsonSerializerOptions)
        {
            if (validationErrorResponseErrors.EmailOption.IsSet && validationErrorResponseErrors.Email == null)
                throw new ArgumentNullException(nameof(validationErrorResponseErrors.Email), "Property is required for class ValidationErrorResponseErrors.");

            if (validationErrorResponseErrors.ForceOption.IsSet && validationErrorResponseErrors.Force == null)
                throw new ArgumentNullException(nameof(validationErrorResponseErrors.Force), "Property is required for class ValidationErrorResponseErrors.");

            if (validationErrorResponseErrors.BlockedOption.IsSet && validationErrorResponseErrors.Blocked == null)
                throw new ArgumentNullException(nameof(validationErrorResponseErrors.Blocked), "Property is required for class ValidationErrorResponseErrors.");

            if (validationErrorResponseErrors.FieldOption.IsSet && validationErrorResponseErrors.Field == null)
                throw new ArgumentNullException(nameof(validationErrorResponseErrors.Field), "Property is required for class ValidationErrorResponseErrors.");

            if (validationErrorResponseErrors.RoleOption.IsSet && validationErrorResponseErrors.Role == null)
                throw new ArgumentNullException(nameof(validationErrorResponseErrors.Role), "Property is required for class ValidationErrorResponseErrors.");

            if (validationErrorResponseErrors.BlockedCodeOption.IsSet && validationErrorResponseErrors.BlockedCode == null)
                throw new ArgumentNullException(nameof(validationErrorResponseErrors.BlockedCode), "Property is required for class ValidationErrorResponseErrors.");

            if (validationErrorResponseErrors.NameOption.IsSet && validationErrorResponseErrors.Name == null)
                throw new ArgumentNullException(nameof(validationErrorResponseErrors.Name), "Property is required for class ValidationErrorResponseErrors.");

            if (validationErrorResponseErrors.TypeOption.IsSet && validationErrorResponseErrors.Type == null)
                throw new ArgumentNullException(nameof(validationErrorResponseErrors.Type), "Property is required for class ValidationErrorResponseErrors.");

            if (validationErrorResponseErrors.IbanOption.IsSet && validationErrorResponseErrors.Iban == null)
                throw new ArgumentNullException(nameof(validationErrorResponseErrors.Iban), "Property is required for class ValidationErrorResponseErrors.");

            if (validationErrorResponseErrors.StartOption.IsSet && validationErrorResponseErrors.Start == null)
                throw new ArgumentNullException(nameof(validationErrorResponseErrors.Start), "Property is required for class ValidationErrorResponseErrors.");

            if (validationErrorResponseErrors.EndOption.IsSet && validationErrorResponseErrors.End == null)
                throw new ArgumentNullException(nameof(validationErrorResponseErrors.End), "Property is required for class ValidationErrorResponseErrors.");

            if (validationErrorResponseErrors.DateOption.IsSet && validationErrorResponseErrors.Date == null)
                throw new ArgumentNullException(nameof(validationErrorResponseErrors.Date), "Property is required for class ValidationErrorResponseErrors.");

            if (validationErrorResponseErrors.EmailOption.IsSet)
            {
                writer.WritePropertyName("email");
                JsonSerializer.Serialize(writer, validationErrorResponseErrors.Email, jsonSerializerOptions);
            }
            if (validationErrorResponseErrors.ForceOption.IsSet)
            {
                writer.WritePropertyName("force");
                JsonSerializer.Serialize(writer, validationErrorResponseErrors.Force, jsonSerializerOptions);
            }
            if (validationErrorResponseErrors.BlockedOption.IsSet)
            {
                writer.WritePropertyName("blocked");
                JsonSerializer.Serialize(writer, validationErrorResponseErrors.Blocked, jsonSerializerOptions);
            }
            if (validationErrorResponseErrors.FieldOption.IsSet)
            {
                writer.WritePropertyName("field");
                JsonSerializer.Serialize(writer, validationErrorResponseErrors.Field, jsonSerializerOptions);
            }
            if (validationErrorResponseErrors.RoleOption.IsSet)
            {
                writer.WritePropertyName("role");
                JsonSerializer.Serialize(writer, validationErrorResponseErrors.Role, jsonSerializerOptions);
            }
            if (validationErrorResponseErrors.BlockedCodeOption.IsSet)
            {
                writer.WritePropertyName("blocked_code");
                JsonSerializer.Serialize(writer, validationErrorResponseErrors.BlockedCode, jsonSerializerOptions);
            }
            if (validationErrorResponseErrors.NameOption.IsSet)
            {
                writer.WritePropertyName("name");
                JsonSerializer.Serialize(writer, validationErrorResponseErrors.Name, jsonSerializerOptions);
            }
            if (validationErrorResponseErrors.TypeOption.IsSet)
            {
                writer.WritePropertyName("type");
                JsonSerializer.Serialize(writer, validationErrorResponseErrors.Type, jsonSerializerOptions);
            }
            if (validationErrorResponseErrors.IbanOption.IsSet)
            {
                writer.WritePropertyName("iban");
                JsonSerializer.Serialize(writer, validationErrorResponseErrors.Iban, jsonSerializerOptions);
            }
            if (validationErrorResponseErrors.StartOption.IsSet)
            {
                writer.WritePropertyName("start");
                JsonSerializer.Serialize(writer, validationErrorResponseErrors.Start, jsonSerializerOptions);
            }
            if (validationErrorResponseErrors.EndOption.IsSet)
            {
                writer.WritePropertyName("end");
                JsonSerializer.Serialize(writer, validationErrorResponseErrors.End, jsonSerializerOptions);
            }
            if (validationErrorResponseErrors.DateOption.IsSet)
            {
                writer.WritePropertyName("date");
                JsonSerializer.Serialize(writer, validationErrorResponseErrors.Date, jsonSerializerOptions);
            }
        }
    }
}
