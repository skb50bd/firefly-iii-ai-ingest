// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// TagModelUpdate
    /// </summary>
    public partial class TagModelUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TagModelUpdate" /> class.
        /// </summary>
        /// <param name="tag">The tag</param>
        /// <param name="date">The date to which the tag is applicable.</param>
        /// <param name="description">description</param>
        /// <param name="latitude">Latitude of the tag&#39;s location, if applicable. Can be used to draw a map.</param>
        /// <param name="longitude">Latitude of the tag&#39;s location, if applicable. Can be used to draw a map.</param>
        /// <param name="zoomLevel">Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.</param>
        [JsonConstructor]
        public TagModelUpdate(Option<string?> tag = default, Option<DateOnly?> date = default, Option<string?> description = default, Option<double?> latitude = default, Option<double?> longitude = default, Option<int?> zoomLevel = default)
        {
            TagOption = tag;
            DateOption = date;
            DescriptionOption = description;
            LatitudeOption = latitude;
            LongitudeOption = longitude;
            ZoomLevelOption = zoomLevel;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Tag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TagOption { get; private set; }

        /// <summary>
        /// The tag
        /// </summary>
        /// <value>The tag</value>
        /* <example>expensive</example> */
        [JsonPropertyName("tag")]
        public string? Tag { get { return this.TagOption; } set { this.TagOption = new(value); } }

        /// <summary>
        /// Used to track the state of Date
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DateOption { get; private set; }

        /// <summary>
        /// The date to which the tag is applicable.
        /// </summary>
        /// <value>The date to which the tag is applicable.</value>
        /* <example>Fri Aug 01 00:00:00 UTC 2025</example> */
        [JsonPropertyName("date")]
        public DateOnly? Date { get { return this.DateOption; } set { this.DateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /* <example>Tag for expensive stuff</example> */
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Latitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> LatitudeOption { get; private set; }

        /// <summary>
        /// Latitude of the tag&#39;s location, if applicable. Can be used to draw a map.
        /// </summary>
        /// <value>Latitude of the tag&#39;s location, if applicable. Can be used to draw a map.</value>
        /* <example>51.983333</example> */
        [JsonPropertyName("latitude")]
        public double? Latitude { get { return this.LatitudeOption; } set { this.LatitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Longitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> LongitudeOption { get; private set; }

        /// <summary>
        /// Latitude of the tag&#39;s location, if applicable. Can be used to draw a map.
        /// </summary>
        /// <value>Latitude of the tag&#39;s location, if applicable. Can be used to draw a map.</value>
        /* <example>5.916667</example> */
        [JsonPropertyName("longitude")]
        public double? Longitude { get { return this.LongitudeOption; } set { this.LongitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ZoomLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ZoomLevelOption { get; private set; }

        /// <summary>
        /// Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.
        /// </summary>
        /// <value>Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.</value>
        /* <example>6</example> */
        [JsonPropertyName("zoom_level")]
        public int? ZoomLevel { get { return this.ZoomLevelOption; } set { this.ZoomLevelOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TagModelUpdate {\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  ZoomLevel: ").Append(ZoomLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TagModelUpdate" />
    /// </summary>
    public class TagModelUpdateJsonConverter : JsonConverter<TagModelUpdate>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="TagModelUpdate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TagModelUpdate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> tag = default;
            Option<DateOnly?> date = default;
            Option<string?> description = default;
            Option<double?> latitude = default;
            Option<double?> longitude = default;
            Option<int?> zoomLevel = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "date":
                            date = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "latitude":
                            latitude = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "longitude":
                            longitude = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "zoom_level":
                            zoomLevel = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class TagModelUpdate.");

            return new TagModelUpdate(tag, date, description, latitude, longitude, zoomLevel);
        }

        /// <summary>
        /// Serializes a <see cref="TagModelUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tagModelUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TagModelUpdate tagModelUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tagModelUpdate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TagModelUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tagModelUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TagModelUpdate tagModelUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tagModelUpdate.TagOption.IsSet && tagModelUpdate.Tag == null)
                throw new ArgumentNullException(nameof(tagModelUpdate.Tag), "Property is required for class TagModelUpdate.");

            if (tagModelUpdate.TagOption.IsSet)
                writer.WriteString("tag", tagModelUpdate.Tag);

            if (tagModelUpdate.DateOption.IsSet)
                if (tagModelUpdate.DateOption.Value != null)
                    writer.WriteString("date", tagModelUpdate.DateOption.Value!.Value.ToString(DateFormat));
                else
                    writer.WriteNull("date");

            if (tagModelUpdate.DescriptionOption.IsSet)
                if (tagModelUpdate.DescriptionOption.Value != null)
                    writer.WriteString("description", tagModelUpdate.Description);
                else
                    writer.WriteNull("description");

            if (tagModelUpdate.LatitudeOption.IsSet)
                if (tagModelUpdate.LatitudeOption.Value != null)
                    writer.WriteNumber("latitude", tagModelUpdate.LatitudeOption.Value!.Value);
                else
                    writer.WriteNull("latitude");

            if (tagModelUpdate.LongitudeOption.IsSet)
                if (tagModelUpdate.LongitudeOption.Value != null)
                    writer.WriteNumber("longitude", tagModelUpdate.LongitudeOption.Value!.Value);
                else
                    writer.WriteNull("longitude");

            if (tagModelUpdate.ZoomLevelOption.IsSet)
                if (tagModelUpdate.ZoomLevelOption.Value != null)
                    writer.WriteNumber("zoom_level", tagModelUpdate.ZoomLevelOption.Value!.Value);
                else
                    writer.WriteNull("zoom_level");
        }
    }
}
