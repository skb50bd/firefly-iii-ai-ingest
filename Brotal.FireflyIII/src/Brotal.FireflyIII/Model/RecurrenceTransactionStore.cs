// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// RecurrenceTransactionStore
    /// </summary>
    public partial class RecurrenceTransactionStore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrenceTransactionStore" /> class.
        /// </summary>
        /// <param name="description">description</param>
        /// <param name="amount">Amount of the transaction.</param>
        /// <param name="sourceId">ID of the source account.</param>
        /// <param name="destinationId">ID of the destination account.</param>
        /// <param name="foreignAmount">Foreign amount of the transaction.</param>
        /// <param name="currencyId">Submit either a currency_id or a currency_code.</param>
        /// <param name="currencyCode">Submit either a currency_id or a currency_code.</param>
        /// <param name="foreignCurrencyId">Submit either a foreign_currency_id or a foreign_currency_code, or neither.</param>
        /// <param name="foreignCurrencyCode">Submit either a foreign_currency_id or a foreign_currency_code, or neither.</param>
        /// <param name="budgetId">The budget ID for this transaction.</param>
        /// <param name="categoryId">Category ID for this transaction.</param>
        /// <param name="tags">Array of tags.</param>
        /// <param name="piggyBankId">Optional.</param>
        /// <param name="billId">Optional.</param>
        [JsonConstructor]
        public RecurrenceTransactionStore(string description, string amount, string sourceId, string destinationId, Option<string?> foreignAmount = default, Option<string?> currencyId = default, Option<string?> currencyCode = default, Option<string?> foreignCurrencyId = default, Option<string?> foreignCurrencyCode = default, Option<string?> budgetId = default, Option<string?> categoryId = default, Option<List<string>?> tags = default, Option<string?> piggyBankId = default, Option<string?> billId = default)
        {
            Description = description;
            Amount = amount;
            SourceId = sourceId;
            DestinationId = destinationId;
            ForeignAmountOption = foreignAmount;
            CurrencyIdOption = currencyId;
            CurrencyCodeOption = currencyCode;
            ForeignCurrencyIdOption = foreignCurrencyId;
            ForeignCurrencyCodeOption = foreignCurrencyCode;
            BudgetIdOption = budgetId;
            CategoryIdOption = categoryId;
            TagsOption = tags;
            PiggyBankIdOption = piggyBankId;
            BillIdOption = billId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /* <example>Rent for the current month</example> */
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Amount of the transaction.
        /// </summary>
        /// <value>Amount of the transaction.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("amount")]
        public string Amount { get; set; }

        /// <summary>
        /// ID of the source account.
        /// </summary>
        /// <value>ID of the source account.</value>
        /* <example>913</example> */
        [JsonPropertyName("source_id")]
        public string SourceId { get; set; }

        /// <summary>
        /// ID of the destination account.
        /// </summary>
        /// <value>ID of the destination account.</value>
        /* <example>258</example> */
        [JsonPropertyName("destination_id")]
        public string DestinationId { get; set; }

        /// <summary>
        /// Used to track the state of ForeignAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForeignAmountOption { get; private set; }

        /// <summary>
        /// Foreign amount of the transaction.
        /// </summary>
        /// <value>Foreign amount of the transaction.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("foreign_amount")]
        public string? ForeignAmount { get { return this.ForeignAmountOption; } set { this.ForeignAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyIdOption { get; private set; }

        /// <summary>
        /// Submit either a currency_id or a currency_code.
        /// </summary>
        /// <value>Submit either a currency_id or a currency_code.</value>
        /* <example>3</example> */
        [JsonPropertyName("currency_id")]
        public string? CurrencyId { get { return this.CurrencyIdOption; } set { this.CurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// Submit either a currency_id or a currency_code.
        /// </summary>
        /// <value>Submit either a currency_id or a currency_code.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("currency_code")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForeignCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForeignCurrencyIdOption { get; private set; }

        /// <summary>
        /// Submit either a foreign_currency_id or a foreign_currency_code, or neither.
        /// </summary>
        /// <value>Submit either a foreign_currency_id or a foreign_currency_code, or neither.</value>
        /* <example>17</example> */
        [JsonPropertyName("foreign_currency_id")]
        public string? ForeignCurrencyId { get { return this.ForeignCurrencyIdOption; } set { this.ForeignCurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForeignCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ForeignCurrencyCodeOption { get; private set; }

        /// <summary>
        /// Submit either a foreign_currency_id or a foreign_currency_code, or neither.
        /// </summary>
        /// <value>Submit either a foreign_currency_id or a foreign_currency_code, or neither.</value>
        /* <example>GBP</example> */
        [JsonPropertyName("foreign_currency_code")]
        public string? ForeignCurrencyCode { get { return this.ForeignCurrencyCodeOption; } set { this.ForeignCurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of BudgetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BudgetIdOption { get; private set; }

        /// <summary>
        /// The budget ID for this transaction.
        /// </summary>
        /// <value>The budget ID for this transaction.</value>
        /* <example>4</example> */
        [JsonPropertyName("budget_id")]
        public string? BudgetId { get { return this.BudgetIdOption; } set { this.BudgetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CategoryId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CategoryIdOption { get; private set; }

        /// <summary>
        /// Category ID for this transaction.
        /// </summary>
        /// <value>Category ID for this transaction.</value>
        /* <example>211</example> */
        [JsonPropertyName("category_id")]
        public string? CategoryId { get { return this.CategoryIdOption; } set { this.CategoryIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TagsOption { get; private set; }

        /// <summary>
        /// Array of tags.
        /// </summary>
        /// <value>Array of tags.</value>
        [JsonPropertyName("tags")]
        public List<string>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PiggyBankId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PiggyBankIdOption { get; private set; }

        /// <summary>
        /// Optional.
        /// </summary>
        /// <value>Optional.</value>
        /* <example>123</example> */
        [JsonPropertyName("piggy_bank_id")]
        public string? PiggyBankId { get { return this.PiggyBankIdOption; } set { this.PiggyBankIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BillId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BillIdOption { get; private set; }

        /// <summary>
        /// Optional.
        /// </summary>
        /// <value>Optional.</value>
        /* <example>123</example> */
        [JsonPropertyName("bill_id")]
        public string? BillId { get { return this.BillIdOption; } set { this.BillIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecurrenceTransactionStore {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  DestinationId: ").Append(DestinationId).Append("\n");
            sb.Append("  ForeignAmount: ").Append(ForeignAmount).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ForeignCurrencyId: ").Append(ForeignCurrencyId).Append("\n");
            sb.Append("  ForeignCurrencyCode: ").Append(ForeignCurrencyCode).Append("\n");
            sb.Append("  BudgetId: ").Append(BudgetId).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  PiggyBankId: ").Append(PiggyBankId).Append("\n");
            sb.Append("  BillId: ").Append(BillId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RecurrenceTransactionStore" />
    /// </summary>
    public class RecurrenceTransactionStoreJsonConverter : JsonConverter<RecurrenceTransactionStore>
    {
        /// <summary>
        /// Deserializes json to <see cref="RecurrenceTransactionStore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RecurrenceTransactionStore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> description = default;
            Option<string?> amount = default;
            Option<string?> sourceId = default;
            Option<string?> destinationId = default;
            Option<string?> foreignAmount = default;
            Option<string?> currencyId = default;
            Option<string?> currencyCode = default;
            Option<string?> foreignCurrencyId = default;
            Option<string?> foreignCurrencyCode = default;
            Option<string?> budgetId = default;
            Option<string?> categoryId = default;
            Option<List<string>?> tags = default;
            Option<string?> piggyBankId = default;
            Option<string?> billId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "amount":
                            amount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "source_id":
                            sourceId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "destination_id":
                            destinationId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "foreign_amount":
                            foreignAmount = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "foreign_currency_id":
                            foreignCurrencyId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "foreign_currency_code":
                            foreignCurrencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "budget_id":
                            budgetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "category_id":
                            categoryId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tags":
                            tags = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "piggy_bank_id":
                            piggyBankId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "bill_id":
                            billId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class RecurrenceTransactionStore.", nameof(description));

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class RecurrenceTransactionStore.", nameof(amount));

            if (!sourceId.IsSet)
                throw new ArgumentException("Property is required for class RecurrenceTransactionStore.", nameof(sourceId));

            if (!destinationId.IsSet)
                throw new ArgumentException("Property is required for class RecurrenceTransactionStore.", nameof(destinationId));

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class RecurrenceTransactionStore.");

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class RecurrenceTransactionStore.");

            if (sourceId.IsSet && sourceId.Value == null)
                throw new ArgumentNullException(nameof(sourceId), "Property is not nullable for class RecurrenceTransactionStore.");

            if (destinationId.IsSet && destinationId.Value == null)
                throw new ArgumentNullException(nameof(destinationId), "Property is not nullable for class RecurrenceTransactionStore.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class RecurrenceTransactionStore.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class RecurrenceTransactionStore.");

            if (budgetId.IsSet && budgetId.Value == null)
                throw new ArgumentNullException(nameof(budgetId), "Property is not nullable for class RecurrenceTransactionStore.");

            if (categoryId.IsSet && categoryId.Value == null)
                throw new ArgumentNullException(nameof(categoryId), "Property is not nullable for class RecurrenceTransactionStore.");

            return new RecurrenceTransactionStore(description.Value!, amount.Value!, sourceId.Value!, destinationId.Value!, foreignAmount, currencyId, currencyCode, foreignCurrencyId, foreignCurrencyCode, budgetId, categoryId, tags, piggyBankId, billId);
        }

        /// <summary>
        /// Serializes a <see cref="RecurrenceTransactionStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recurrenceTransactionStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RecurrenceTransactionStore recurrenceTransactionStore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, recurrenceTransactionStore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RecurrenceTransactionStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recurrenceTransactionStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RecurrenceTransactionStore recurrenceTransactionStore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (recurrenceTransactionStore.Description == null)
                throw new ArgumentNullException(nameof(recurrenceTransactionStore.Description), "Property is required for class RecurrenceTransactionStore.");

            if (recurrenceTransactionStore.Amount == null)
                throw new ArgumentNullException(nameof(recurrenceTransactionStore.Amount), "Property is required for class RecurrenceTransactionStore.");

            if (recurrenceTransactionStore.SourceId == null)
                throw new ArgumentNullException(nameof(recurrenceTransactionStore.SourceId), "Property is required for class RecurrenceTransactionStore.");

            if (recurrenceTransactionStore.DestinationId == null)
                throw new ArgumentNullException(nameof(recurrenceTransactionStore.DestinationId), "Property is required for class RecurrenceTransactionStore.");

            if (recurrenceTransactionStore.CurrencyIdOption.IsSet && recurrenceTransactionStore.CurrencyId == null)
                throw new ArgumentNullException(nameof(recurrenceTransactionStore.CurrencyId), "Property is required for class RecurrenceTransactionStore.");

            if (recurrenceTransactionStore.CurrencyCodeOption.IsSet && recurrenceTransactionStore.CurrencyCode == null)
                throw new ArgumentNullException(nameof(recurrenceTransactionStore.CurrencyCode), "Property is required for class RecurrenceTransactionStore.");

            if (recurrenceTransactionStore.BudgetIdOption.IsSet && recurrenceTransactionStore.BudgetId == null)
                throw new ArgumentNullException(nameof(recurrenceTransactionStore.BudgetId), "Property is required for class RecurrenceTransactionStore.");

            if (recurrenceTransactionStore.CategoryIdOption.IsSet && recurrenceTransactionStore.CategoryId == null)
                throw new ArgumentNullException(nameof(recurrenceTransactionStore.CategoryId), "Property is required for class RecurrenceTransactionStore.");

            writer.WriteString("description", recurrenceTransactionStore.Description);

            writer.WriteString("amount", recurrenceTransactionStore.Amount);

            writer.WriteString("source_id", recurrenceTransactionStore.SourceId);

            writer.WriteString("destination_id", recurrenceTransactionStore.DestinationId);

            if (recurrenceTransactionStore.ForeignAmountOption.IsSet)
                if (recurrenceTransactionStore.ForeignAmountOption.Value != null)
                    writer.WriteString("foreign_amount", recurrenceTransactionStore.ForeignAmount);
                else
                    writer.WriteNull("foreign_amount");

            if (recurrenceTransactionStore.CurrencyIdOption.IsSet)
                writer.WriteString("currency_id", recurrenceTransactionStore.CurrencyId);

            if (recurrenceTransactionStore.CurrencyCodeOption.IsSet)
                writer.WriteString("currency_code", recurrenceTransactionStore.CurrencyCode);

            if (recurrenceTransactionStore.ForeignCurrencyIdOption.IsSet)
                if (recurrenceTransactionStore.ForeignCurrencyIdOption.Value != null)
                    writer.WriteString("foreign_currency_id", recurrenceTransactionStore.ForeignCurrencyId);
                else
                    writer.WriteNull("foreign_currency_id");

            if (recurrenceTransactionStore.ForeignCurrencyCodeOption.IsSet)
                if (recurrenceTransactionStore.ForeignCurrencyCodeOption.Value != null)
                    writer.WriteString("foreign_currency_code", recurrenceTransactionStore.ForeignCurrencyCode);
                else
                    writer.WriteNull("foreign_currency_code");

            if (recurrenceTransactionStore.BudgetIdOption.IsSet)
                writer.WriteString("budget_id", recurrenceTransactionStore.BudgetId);

            if (recurrenceTransactionStore.CategoryIdOption.IsSet)
                writer.WriteString("category_id", recurrenceTransactionStore.CategoryId);

            if (recurrenceTransactionStore.TagsOption.IsSet)
                if (recurrenceTransactionStore.TagsOption.Value != null)
                {
                    writer.WritePropertyName("tags");
                    JsonSerializer.Serialize(writer, recurrenceTransactionStore.Tags, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("tags");
            if (recurrenceTransactionStore.PiggyBankIdOption.IsSet)
                if (recurrenceTransactionStore.PiggyBankIdOption.Value != null)
                    writer.WriteString("piggy_bank_id", recurrenceTransactionStore.PiggyBankId);
                else
                    writer.WriteNull("piggy_bank_id");

            if (recurrenceTransactionStore.BillIdOption.IsSet)
                if (recurrenceTransactionStore.BillIdOption.Value != null)
                    writer.WriteString("bill_id", recurrenceTransactionStore.BillId);
                else
                    writer.WriteNull("bill_id");
        }
    }
}
