// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// PiggyBankUpdate
    /// </summary>
    public partial class PiggyBankUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PiggyBankUpdate" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="accounts">accounts</param>
        /// <param name="currencyId">currencyId</param>
        /// <param name="currencyCode">currencyCode</param>
        /// <param name="targetAmount">targetAmount</param>
        /// <param name="startDate">The date you started with this piggy bank.</param>
        /// <param name="targetDate">The date you intend to finish saving money.</param>
        /// <param name="order">order</param>
        /// <param name="active">active</param>
        /// <param name="notes">notes</param>
        /// <param name="objectGroupId">The group ID of the group this object is part of. NULL if no group.</param>
        /// <param name="objectGroupTitle">The name of the group. NULL if no group.</param>
        [JsonConstructor]
        public PiggyBankUpdate(Option<string?> name = default, Option<List<PiggyBankAccountUpdate>?> accounts = default, Option<string?> currencyId = default, Option<string?> currencyCode = default, Option<string?> targetAmount = default, Option<DateOnly?> startDate = default, Option<DateOnly?> targetDate = default, Option<int?> order = default, Option<bool?> active = default, Option<string?> notes = default, Option<string?> objectGroupId = default, Option<string?> objectGroupTitle = default)
        {
            NameOption = name;
            AccountsOption = accounts;
            CurrencyIdOption = currencyId;
            CurrencyCodeOption = currencyCode;
            TargetAmountOption = targetAmount;
            StartDateOption = startDate;
            TargetDateOption = targetDate;
            OrderOption = order;
            ActiveOption = active;
            NotesOption = notes;
            ObjectGroupIdOption = objectGroupId;
            ObjectGroupTitleOption = objectGroupTitle;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>New digital camera</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Accounts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PiggyBankAccountUpdate>?> AccountsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Accounts
        /// </summary>
        [JsonPropertyName("accounts")]
        public List<PiggyBankAccountUpdate>? Accounts { get { return this.AccountsOption; } set { this.AccountsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyIdOption { get; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        /* <example>5</example> */
        [JsonPropertyName("currency_id")]
        public string? CurrencyId { get { return this.CurrencyIdOption; } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        /* <example>USD</example> */
        [JsonPropertyName("currency_code")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } }

        /// <summary>
        /// Used to track the state of TargetAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TargetAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets TargetAmount
        /// </summary>
        /* <example>123.45</example> */
        [JsonPropertyName("target_amount")]
        public string? TargetAmount { get { return this.TargetAmountOption; } set { this.TargetAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> StartDateOption { get; private set; }

        /// <summary>
        /// The date you started with this piggy bank.
        /// </summary>
        /// <value>The date you started with this piggy bank.</value>
        /* <example>Fri Aug 01 00:00:00 UTC 2025</example> */
        [JsonPropertyName("start_date")]
        public DateOnly? StartDate { get { return this.StartDateOption; } set { this.StartDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of TargetDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> TargetDateOption { get; private set; }

        /// <summary>
        /// The date you intend to finish saving money.
        /// </summary>
        /// <value>The date you intend to finish saving money.</value>
        /* <example>Sun Aug 31 00:00:00 UTC 2025</example> */
        [JsonPropertyName("target_date")]
        public DateOnly? TargetDate { get { return this.TargetDateOption; } set { this.TargetDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Order
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OrderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        /* <example>5</example> */
        [JsonPropertyName("order")]
        public int? Order { get { return this.OrderOption; } set { this.OrderOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        /* <example>Some notes</example> */
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectGroupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ObjectGroupIdOption { get; private set; }

        /// <summary>
        /// The group ID of the group this object is part of. NULL if no group.
        /// </summary>
        /// <value>The group ID of the group this object is part of. NULL if no group.</value>
        /* <example>5</example> */
        [JsonPropertyName("object_group_id")]
        public string? ObjectGroupId { get { return this.ObjectGroupIdOption; } set { this.ObjectGroupIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectGroupTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ObjectGroupTitleOption { get; private set; }

        /// <summary>
        /// The name of the group. NULL if no group.
        /// </summary>
        /// <value>The name of the group. NULL if no group.</value>
        /* <example>Example Group</example> */
        [JsonPropertyName("object_group_title")]
        public string? ObjectGroupTitle { get { return this.ObjectGroupTitleOption; } set { this.ObjectGroupTitleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PiggyBankUpdate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  TargetAmount: ").Append(TargetAmount).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  TargetDate: ").Append(TargetDate).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ObjectGroupId: ").Append(ObjectGroupId).Append("\n");
            sb.Append("  ObjectGroupTitle: ").Append(ObjectGroupTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PiggyBankUpdate" />
    /// </summary>
    public class PiggyBankUpdateJsonConverter : JsonConverter<PiggyBankUpdate>
    {
        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize TargetDate
        /// </summary>
        public static string TargetDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="PiggyBankUpdate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PiggyBankUpdate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<List<PiggyBankAccountUpdate>?> accounts = default;
            Option<string?> currencyId = default;
            Option<string?> currencyCode = default;
            Option<string?> targetAmount = default;
            Option<DateOnly?> startDate = default;
            Option<DateOnly?> targetDate = default;
            Option<int?> order = default;
            Option<bool?> active = default;
            Option<string?> notes = default;
            Option<string?> objectGroupId = default;
            Option<string?> objectGroupTitle = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "accounts":
                            accounts = new Option<List<PiggyBankAccountUpdate>?>(JsonSerializer.Deserialize<List<PiggyBankAccountUpdate>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "target_amount":
                            targetAmount = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "start_date":
                            startDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "target_date":
                            targetDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "order":
                            order = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "active":
                            active = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "object_group_id":
                            objectGroupId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "object_group_title":
                            objectGroupTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class PiggyBankUpdate.");

            if (accounts.IsSet && accounts.Value == null)
                throw new ArgumentNullException(nameof(accounts), "Property is not nullable for class PiggyBankUpdate.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class PiggyBankUpdate.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class PiggyBankUpdate.");

            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate), "Property is not nullable for class PiggyBankUpdate.");

            if (order.IsSet && order.Value == null)
                throw new ArgumentNullException(nameof(order), "Property is not nullable for class PiggyBankUpdate.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class PiggyBankUpdate.");

            return new PiggyBankUpdate(name, accounts, currencyId, currencyCode, targetAmount, startDate, targetDate, order, active, notes, objectGroupId, objectGroupTitle);
        }

        /// <summary>
        /// Serializes a <see cref="PiggyBankUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="piggyBankUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PiggyBankUpdate piggyBankUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, piggyBankUpdate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PiggyBankUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="piggyBankUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PiggyBankUpdate piggyBankUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (piggyBankUpdate.NameOption.IsSet && piggyBankUpdate.Name == null)
                throw new ArgumentNullException(nameof(piggyBankUpdate.Name), "Property is required for class PiggyBankUpdate.");

            if (piggyBankUpdate.AccountsOption.IsSet && piggyBankUpdate.Accounts == null)
                throw new ArgumentNullException(nameof(piggyBankUpdate.Accounts), "Property is required for class PiggyBankUpdate.");

            if (piggyBankUpdate.CurrencyIdOption.IsSet && piggyBankUpdate.CurrencyId == null)
                throw new ArgumentNullException(nameof(piggyBankUpdate.CurrencyId), "Property is required for class PiggyBankUpdate.");

            if (piggyBankUpdate.CurrencyCodeOption.IsSet && piggyBankUpdate.CurrencyCode == null)
                throw new ArgumentNullException(nameof(piggyBankUpdate.CurrencyCode), "Property is required for class PiggyBankUpdate.");

            if (piggyBankUpdate.NameOption.IsSet)
                writer.WriteString("name", piggyBankUpdate.Name);

            if (piggyBankUpdate.AccountsOption.IsSet)
            {
                writer.WritePropertyName("accounts");
                JsonSerializer.Serialize(writer, piggyBankUpdate.Accounts, jsonSerializerOptions);
            }
            if (piggyBankUpdate.CurrencyIdOption.IsSet)
                writer.WriteString("currency_id", piggyBankUpdate.CurrencyId);

            if (piggyBankUpdate.CurrencyCodeOption.IsSet)
                writer.WriteString("currency_code", piggyBankUpdate.CurrencyCode);

            if (piggyBankUpdate.TargetAmountOption.IsSet)
                if (piggyBankUpdate.TargetAmountOption.Value != null)
                    writer.WriteString("target_amount", piggyBankUpdate.TargetAmount);
                else
                    writer.WriteNull("target_amount");

            if (piggyBankUpdate.StartDateOption.IsSet)
                writer.WriteString("start_date", piggyBankUpdate.StartDateOption.Value!.Value.ToString(StartDateFormat));

            if (piggyBankUpdate.TargetDateOption.IsSet)
                if (piggyBankUpdate.TargetDateOption.Value != null)
                    writer.WriteString("target_date", piggyBankUpdate.TargetDateOption.Value!.Value.ToString(TargetDateFormat));
                else
                    writer.WriteNull("target_date");

            if (piggyBankUpdate.OrderOption.IsSet)
                writer.WriteNumber("order", piggyBankUpdate.OrderOption.Value!.Value);

            if (piggyBankUpdate.ActiveOption.IsSet)
                writer.WriteBoolean("active", piggyBankUpdate.ActiveOption.Value!.Value);

            if (piggyBankUpdate.NotesOption.IsSet)
                if (piggyBankUpdate.NotesOption.Value != null)
                    writer.WriteString("notes", piggyBankUpdate.Notes);
                else
                    writer.WriteNull("notes");

            if (piggyBankUpdate.ObjectGroupIdOption.IsSet)
                if (piggyBankUpdate.ObjectGroupIdOption.Value != null)
                    writer.WriteString("object_group_id", piggyBankUpdate.ObjectGroupId);
                else
                    writer.WriteNull("object_group_id");

            if (piggyBankUpdate.ObjectGroupTitleOption.IsSet)
                if (piggyBankUpdate.ObjectGroupTitleOption.Value != null)
                    writer.WriteString("object_group_title", piggyBankUpdate.ObjectGroupTitle);
                else
                    writer.WriteNull("object_group_title");
        }
    }
}
