// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// BudgetStore
    /// </summary>
    public partial class BudgetStore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetStore" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="active">active</param>
        /// <param name="order">order</param>
        /// <param name="notes">notes</param>
        /// <param name="autoBudgetType">autoBudgetType</param>
        /// <param name="autoBudgetCurrencyId">Use either currency_id or currency_code. Defaults to the user&#39;s financial administration&#39;s currency.</param>
        /// <param name="autoBudgetCurrencyCode">Use either currency_id or currency_code. Defaults to the user&#39;s financial administration&#39;s currency.</param>
        /// <param name="autoBudgetAmount">autoBudgetAmount</param>
        /// <param name="autoBudgetPeriod">autoBudgetPeriod</param>
        [JsonConstructor]
        public BudgetStore(string name, Option<bool?> active = default, Option<int?> order = default, Option<string?> notes = default, Option<AutoBudgetType?> autoBudgetType = default, Option<string?> autoBudgetCurrencyId = default, Option<string?> autoBudgetCurrencyCode = default, Option<string?> autoBudgetAmount = default, Option<AutoBudgetPeriod?> autoBudgetPeriod = default)
        {
            Name = name;
            ActiveOption = active;
            OrderOption = order;
            NotesOption = notes;
            AutoBudgetTypeOption = autoBudgetType;
            AutoBudgetCurrencyIdOption = autoBudgetCurrencyId;
            AutoBudgetCurrencyCodeOption = autoBudgetCurrencyCode;
            AutoBudgetAmountOption = autoBudgetAmount;
            AutoBudgetPeriodOption = autoBudgetPeriod;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AutoBudgetType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AutoBudgetType?> AutoBudgetTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets AutoBudgetType
        /// </summary>
        [JsonPropertyName("auto_budget_type")]
        public AutoBudgetType? AutoBudgetType { get { return this.AutoBudgetTypeOption; } set { this.AutoBudgetTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AutoBudgetPeriod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AutoBudgetPeriod?> AutoBudgetPeriodOption { get; private set; }

        /// <summary>
        /// Gets or Sets AutoBudgetPeriod
        /// </summary>
        [JsonPropertyName("auto_budget_period")]
        public AutoBudgetPeriod? AutoBudgetPeriod { get { return this.AutoBudgetPeriodOption; } set { this.AutoBudgetPeriodOption = new(value); } }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>Bills</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Order
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OrderOption { get; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        /* <example>5</example> */
        [JsonPropertyName("order")]
        public int? Order { get { return this.OrderOption; } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        /* <example>Some notes</example> */
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Used to track the state of AutoBudgetCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AutoBudgetCurrencyIdOption { get; private set; }

        /// <summary>
        /// Use either currency_id or currency_code. Defaults to the user&#39;s financial administration&#39;s currency.
        /// </summary>
        /// <value>Use either currency_id or currency_code. Defaults to the user&#39;s financial administration&#39;s currency.</value>
        /* <example>12</example> */
        [JsonPropertyName("auto_budget_currency_id")]
        public string? AutoBudgetCurrencyId { get { return this.AutoBudgetCurrencyIdOption; } set { this.AutoBudgetCurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AutoBudgetCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AutoBudgetCurrencyCodeOption { get; private set; }

        /// <summary>
        /// Use either currency_id or currency_code. Defaults to the user&#39;s financial administration&#39;s currency.
        /// </summary>
        /// <value>Use either currency_id or currency_code. Defaults to the user&#39;s financial administration&#39;s currency.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("auto_budget_currency_code")]
        public string? AutoBudgetCurrencyCode { get { return this.AutoBudgetCurrencyCodeOption; } set { this.AutoBudgetCurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AutoBudgetAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AutoBudgetAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets AutoBudgetAmount
        /// </summary>
        /* <example>-1012.12</example> */
        [JsonPropertyName("auto_budget_amount")]
        public string? AutoBudgetAmount { get { return this.AutoBudgetAmountOption; } set { this.AutoBudgetAmountOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BudgetStore {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  AutoBudgetType: ").Append(AutoBudgetType).Append("\n");
            sb.Append("  AutoBudgetCurrencyId: ").Append(AutoBudgetCurrencyId).Append("\n");
            sb.Append("  AutoBudgetCurrencyCode: ").Append(AutoBudgetCurrencyCode).Append("\n");
            sb.Append("  AutoBudgetAmount: ").Append(AutoBudgetAmount).Append("\n");
            sb.Append("  AutoBudgetPeriod: ").Append(AutoBudgetPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BudgetStore" />
    /// </summary>
    public class BudgetStoreJsonConverter : JsonConverter<BudgetStore>
    {
        /// <summary>
        /// Deserializes json to <see cref="BudgetStore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BudgetStore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<bool?> active = default;
            Option<int?> order = default;
            Option<string?> notes = default;
            Option<AutoBudgetType?> autoBudgetType = default;
            Option<string?> autoBudgetCurrencyId = default;
            Option<string?> autoBudgetCurrencyCode = default;
            Option<string?> autoBudgetAmount = default;
            Option<AutoBudgetPeriod?> autoBudgetPeriod = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "active":
                            active = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "order":
                            order = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "auto_budget_type":
                            string? autoBudgetTypeRawValue = utf8JsonReader.GetString();
                            if (autoBudgetTypeRawValue != null)
                                autoBudgetType = new Option<AutoBudgetType?>(AutoBudgetTypeValueConverter.FromStringOrDefault(autoBudgetTypeRawValue));
                            break;
                        case "auto_budget_currency_id":
                            autoBudgetCurrencyId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "auto_budget_currency_code":
                            autoBudgetCurrencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "auto_budget_amount":
                            autoBudgetAmount = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "auto_budget_period":
                            string? autoBudgetPeriodRawValue = utf8JsonReader.GetString();
                            if (autoBudgetPeriodRawValue != null)
                                autoBudgetPeriod = new Option<AutoBudgetPeriod?>(AutoBudgetPeriodValueConverter.FromStringOrDefault(autoBudgetPeriodRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class BudgetStore.", nameof(name));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class BudgetStore.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class BudgetStore.");

            if (order.IsSet && order.Value == null)
                throw new ArgumentNullException(nameof(order), "Property is not nullable for class BudgetStore.");

            return new BudgetStore(name.Value!, active, order, notes, autoBudgetType, autoBudgetCurrencyId, autoBudgetCurrencyCode, autoBudgetAmount, autoBudgetPeriod);
        }

        /// <summary>
        /// Serializes a <see cref="BudgetStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="budgetStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BudgetStore budgetStore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, budgetStore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BudgetStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="budgetStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BudgetStore budgetStore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (budgetStore.Name == null)
                throw new ArgumentNullException(nameof(budgetStore.Name), "Property is required for class BudgetStore.");

            writer.WriteString("name", budgetStore.Name);

            if (budgetStore.ActiveOption.IsSet)
                writer.WriteBoolean("active", budgetStore.ActiveOption.Value!.Value);

            if (budgetStore.OrderOption.IsSet)
                writer.WriteNumber("order", budgetStore.OrderOption.Value!.Value);

            if (budgetStore.NotesOption.IsSet)
                if (budgetStore.NotesOption.Value != null)
                    writer.WriteString("notes", budgetStore.Notes);
                else
                    writer.WriteNull("notes");

            if (budgetStore.AutoBudgetTypeOption.IsSet)
                if (budgetStore.AutoBudgetTypeOption!.Value != null)
                {
                    var autoBudgetTypeRawValue = AutoBudgetTypeValueConverter.ToJsonValue(budgetStore.AutoBudgetTypeOption.Value!.Value);
                    writer.WriteString("auto_budget_type", autoBudgetTypeRawValue);
                }
                else
                    writer.WriteNull("auto_budget_type");
            if (budgetStore.AutoBudgetCurrencyIdOption.IsSet)
                if (budgetStore.AutoBudgetCurrencyIdOption.Value != null)
                    writer.WriteString("auto_budget_currency_id", budgetStore.AutoBudgetCurrencyId);
                else
                    writer.WriteNull("auto_budget_currency_id");

            if (budgetStore.AutoBudgetCurrencyCodeOption.IsSet)
                if (budgetStore.AutoBudgetCurrencyCodeOption.Value != null)
                    writer.WriteString("auto_budget_currency_code", budgetStore.AutoBudgetCurrencyCode);
                else
                    writer.WriteNull("auto_budget_currency_code");

            if (budgetStore.AutoBudgetAmountOption.IsSet)
                if (budgetStore.AutoBudgetAmountOption.Value != null)
                    writer.WriteString("auto_budget_amount", budgetStore.AutoBudgetAmount);
                else
                    writer.WriteNull("auto_budget_amount");

            if (budgetStore.AutoBudgetPeriodOption.IsSet)
                if (budgetStore.AutoBudgetPeriodOption!.Value != null)
                {
                    var autoBudgetPeriodRawValue = AutoBudgetPeriodValueConverter.ToJsonValue(budgetStore.AutoBudgetPeriodOption.Value!.Value);
                    writer.WriteString("auto_budget_period", autoBudgetPeriodRawValue);
                }
                else
                    writer.WriteNull("auto_budget_period");
        }
    }
}
