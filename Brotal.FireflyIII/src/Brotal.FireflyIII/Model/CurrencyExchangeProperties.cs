// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// CurrencyExchangeProperties
    /// </summary>
    public partial class CurrencyExchangeProperties : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyExchangeProperties" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="fromCurrencyId">Base currency ID for this exchange rate entry.</param>
        /// <param name="fromCurrencyName">Base currency name for this exchange rate entry.</param>
        /// <param name="fromCurrencyCode">Base currency code for this exchange rate entry.</param>
        /// <param name="fromCurrencySymbol">Base currency symbol for this exchange rate entry.</param>
        /// <param name="fromCurrencyDecimalPlaces">Base currency decimal places for this exchange rate entry.</param>
        /// <param name="toCurrencyId">Destination currency ID for this exchange rate entry.</param>
        /// <param name="toCurrencyName">Destination currency name for this exchange rate entry.</param>
        /// <param name="toCurrencyCode">Destination currency code for this exchange rate entry.</param>
        /// <param name="toCurrencySymbol">Destination currency symbol for this exchange rate entry.</param>
        /// <param name="toCurrencyDecimalPlaces">Destination currency decimal places for this exchange rate entry.</param>
        /// <param name="rate">The actual exchange rate. How many &#39;to&#39; currency will you get for 1 &#39;from&#39; currency?</param>
        /// <param name="date">Date and time of the exchange rate.</param>
        [JsonConstructor]
        internal CurrencyExchangeProperties(Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default, Option<string?> fromCurrencyId = default, Option<string?> fromCurrencyName = default, Option<string?> fromCurrencyCode = default, Option<string?> fromCurrencySymbol = default, Option<int?> fromCurrencyDecimalPlaces = default, Option<string?> toCurrencyId = default, Option<string?> toCurrencyName = default, Option<string?> toCurrencyCode = default, Option<string?> toCurrencySymbol = default, Option<int?> toCurrencyDecimalPlaces = default, Option<string?> rate = default, Option<DateTime?> date = default)
        {
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            FromCurrencyIdOption = fromCurrencyId;
            FromCurrencyNameOption = fromCurrencyName;
            FromCurrencyCodeOption = fromCurrencyCode;
            FromCurrencySymbolOption = fromCurrencySymbol;
            FromCurrencyDecimalPlacesOption = fromCurrencyDecimalPlaces;
            ToCurrencyIdOption = toCurrencyId;
            ToCurrencyNameOption = toCurrencyName;
            ToCurrencyCodeOption = toCurrencyCode;
            ToCurrencySymbolOption = toCurrencySymbol;
            ToCurrencyDecimalPlacesOption = toCurrencyDecimalPlaces;
            RateOption = rate;
            DateOption = date;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } }

        /// <summary>
        /// Used to track the state of FromCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FromCurrencyIdOption { get; }

        /// <summary>
        /// Base currency ID for this exchange rate entry.
        /// </summary>
        /// <value>Base currency ID for this exchange rate entry.</value>
        /* <example>12</example> */
        [JsonPropertyName("from_currency_id")]
        public string? FromCurrencyId { get { return this.FromCurrencyIdOption; } }

        /// <summary>
        /// Used to track the state of FromCurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FromCurrencyNameOption { get; }

        /// <summary>
        /// Base currency name for this exchange rate entry.
        /// </summary>
        /// <value>Base currency name for this exchange rate entry.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("from_currency_name")]
        public string? FromCurrencyName { get { return this.FromCurrencyNameOption; } }

        /// <summary>
        /// Used to track the state of FromCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FromCurrencyCodeOption { get; }

        /// <summary>
        /// Base currency code for this exchange rate entry.
        /// </summary>
        /// <value>Base currency code for this exchange rate entry.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("from_currency_code")]
        public string? FromCurrencyCode { get { return this.FromCurrencyCodeOption; } }

        /// <summary>
        /// Used to track the state of FromCurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FromCurrencySymbolOption { get; }

        /// <summary>
        /// Base currency symbol for this exchange rate entry.
        /// </summary>
        /// <value>Base currency symbol for this exchange rate entry.</value>
        /* <example>$</example> */
        [JsonPropertyName("from_currency_symbol")]
        public string? FromCurrencySymbol { get { return this.FromCurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of FromCurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FromCurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// Base currency decimal places for this exchange rate entry.
        /// </summary>
        /// <value>Base currency decimal places for this exchange rate entry.</value>
        /* <example>2</example> */
        [JsonPropertyName("from_currency_decimal_places")]
        public int? FromCurrencyDecimalPlaces { get { return this.FromCurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of ToCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ToCurrencyIdOption { get; }

        /// <summary>
        /// Destination currency ID for this exchange rate entry.
        /// </summary>
        /// <value>Destination currency ID for this exchange rate entry.</value>
        /* <example>12</example> */
        [JsonPropertyName("to_currency_id")]
        public string? ToCurrencyId { get { return this.ToCurrencyIdOption; } }

        /// <summary>
        /// Used to track the state of ToCurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ToCurrencyNameOption { get; }

        /// <summary>
        /// Destination currency name for this exchange rate entry.
        /// </summary>
        /// <value>Destination currency name for this exchange rate entry.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("to_currency_name")]
        public string? ToCurrencyName { get { return this.ToCurrencyNameOption; } }

        /// <summary>
        /// Used to track the state of ToCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ToCurrencyCodeOption { get; }

        /// <summary>
        /// Destination currency code for this exchange rate entry.
        /// </summary>
        /// <value>Destination currency code for this exchange rate entry.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("to_currency_code")]
        public string? ToCurrencyCode { get { return this.ToCurrencyCodeOption; } }

        /// <summary>
        /// Used to track the state of ToCurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ToCurrencySymbolOption { get; }

        /// <summary>
        /// Destination currency symbol for this exchange rate entry.
        /// </summary>
        /// <value>Destination currency symbol for this exchange rate entry.</value>
        /* <example>$</example> */
        [JsonPropertyName("to_currency_symbol")]
        public string? ToCurrencySymbol { get { return this.ToCurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of ToCurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ToCurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// Destination currency decimal places for this exchange rate entry.
        /// </summary>
        /// <value>Destination currency decimal places for this exchange rate entry.</value>
        /* <example>2</example> */
        [JsonPropertyName("to_currency_decimal_places")]
        public int? ToCurrencyDecimalPlaces { get { return this.ToCurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of Rate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RateOption { get; }

        /// <summary>
        /// The actual exchange rate. How many &#39;to&#39; currency will you get for 1 &#39;from&#39; currency?
        /// </summary>
        /// <value>The actual exchange rate. How many &#39;to&#39; currency will you get for 1 &#39;from&#39; currency?</value>
        /* <example>1.10340</example> */
        [JsonPropertyName("rate")]
        public string? Rate { get { return this.RateOption; } }

        /// <summary>
        /// Used to track the state of Date
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DateOption { get; }

        /// <summary>
        /// Date and time of the exchange rate.
        /// </summary>
        /// <value>Date and time of the exchange rate.</value>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("date")]
        public DateTime? Date { get { return this.DateOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CurrencyExchangeProperties {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  FromCurrencyId: ").Append(FromCurrencyId).Append("\n");
            sb.Append("  FromCurrencyName: ").Append(FromCurrencyName).Append("\n");
            sb.Append("  FromCurrencyCode: ").Append(FromCurrencyCode).Append("\n");
            sb.Append("  FromCurrencySymbol: ").Append(FromCurrencySymbol).Append("\n");
            sb.Append("  FromCurrencyDecimalPlaces: ").Append(FromCurrencyDecimalPlaces).Append("\n");
            sb.Append("  ToCurrencyId: ").Append(ToCurrencyId).Append("\n");
            sb.Append("  ToCurrencyName: ").Append(ToCurrencyName).Append("\n");
            sb.Append("  ToCurrencyCode: ").Append(ToCurrencyCode).Append("\n");
            sb.Append("  ToCurrencySymbol: ").Append(ToCurrencySymbol).Append("\n");
            sb.Append("  ToCurrencyDecimalPlaces: ").Append(ToCurrencyDecimalPlaces).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CurrencyExchangeProperties" />
    /// </summary>
    public class CurrencyExchangePropertiesJsonConverter : JsonConverter<CurrencyExchangeProperties>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CurrencyExchangeProperties" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CurrencyExchangeProperties Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<string?> fromCurrencyId = default;
            Option<string?> fromCurrencyName = default;
            Option<string?> fromCurrencyCode = default;
            Option<string?> fromCurrencySymbol = default;
            Option<int?> fromCurrencyDecimalPlaces = default;
            Option<string?> toCurrencyId = default;
            Option<string?> toCurrencyName = default;
            Option<string?> toCurrencyCode = default;
            Option<string?> toCurrencySymbol = default;
            Option<int?> toCurrencyDecimalPlaces = default;
            Option<string?> rate = default;
            Option<DateTime?> date = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "from_currency_id":
                            fromCurrencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "from_currency_name":
                            fromCurrencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "from_currency_code":
                            fromCurrencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "from_currency_symbol":
                            fromCurrencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "from_currency_decimal_places":
                            fromCurrencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "to_currency_id":
                            toCurrencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "to_currency_name":
                            toCurrencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "to_currency_code":
                            toCurrencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "to_currency_symbol":
                            toCurrencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "to_currency_decimal_places":
                            toCurrencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "rate":
                            rate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "date":
                            date = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class CurrencyExchangeProperties.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class CurrencyExchangeProperties.");

            if (fromCurrencyId.IsSet && fromCurrencyId.Value == null)
                throw new ArgumentNullException(nameof(fromCurrencyId), "Property is not nullable for class CurrencyExchangeProperties.");

            if (fromCurrencyName.IsSet && fromCurrencyName.Value == null)
                throw new ArgumentNullException(nameof(fromCurrencyName), "Property is not nullable for class CurrencyExchangeProperties.");

            if (fromCurrencyCode.IsSet && fromCurrencyCode.Value == null)
                throw new ArgumentNullException(nameof(fromCurrencyCode), "Property is not nullable for class CurrencyExchangeProperties.");

            if (fromCurrencySymbol.IsSet && fromCurrencySymbol.Value == null)
                throw new ArgumentNullException(nameof(fromCurrencySymbol), "Property is not nullable for class CurrencyExchangeProperties.");

            if (fromCurrencyDecimalPlaces.IsSet && fromCurrencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(fromCurrencyDecimalPlaces), "Property is not nullable for class CurrencyExchangeProperties.");

            if (toCurrencyId.IsSet && toCurrencyId.Value == null)
                throw new ArgumentNullException(nameof(toCurrencyId), "Property is not nullable for class CurrencyExchangeProperties.");

            if (toCurrencyName.IsSet && toCurrencyName.Value == null)
                throw new ArgumentNullException(nameof(toCurrencyName), "Property is not nullable for class CurrencyExchangeProperties.");

            if (toCurrencyCode.IsSet && toCurrencyCode.Value == null)
                throw new ArgumentNullException(nameof(toCurrencyCode), "Property is not nullable for class CurrencyExchangeProperties.");

            if (toCurrencySymbol.IsSet && toCurrencySymbol.Value == null)
                throw new ArgumentNullException(nameof(toCurrencySymbol), "Property is not nullable for class CurrencyExchangeProperties.");

            if (toCurrencyDecimalPlaces.IsSet && toCurrencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(toCurrencyDecimalPlaces), "Property is not nullable for class CurrencyExchangeProperties.");

            if (rate.IsSet && rate.Value == null)
                throw new ArgumentNullException(nameof(rate), "Property is not nullable for class CurrencyExchangeProperties.");

            if (date.IsSet && date.Value == null)
                throw new ArgumentNullException(nameof(date), "Property is not nullable for class CurrencyExchangeProperties.");

            return new CurrencyExchangeProperties(createdAt, updatedAt, fromCurrencyId, fromCurrencyName, fromCurrencyCode, fromCurrencySymbol, fromCurrencyDecimalPlaces, toCurrencyId, toCurrencyName, toCurrencyCode, toCurrencySymbol, toCurrencyDecimalPlaces, rate, date);
        }

        /// <summary>
        /// Serializes a <see cref="CurrencyExchangeProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currencyExchangeProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CurrencyExchangeProperties currencyExchangeProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, currencyExchangeProperties, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CurrencyExchangeProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currencyExchangeProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CurrencyExchangeProperties currencyExchangeProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            if (currencyExchangeProperties.FromCurrencyIdOption.IsSet && currencyExchangeProperties.FromCurrencyId == null)
                throw new ArgumentNullException(nameof(currencyExchangeProperties.FromCurrencyId), "Property is required for class CurrencyExchangeProperties.");

            if (currencyExchangeProperties.FromCurrencyNameOption.IsSet && currencyExchangeProperties.FromCurrencyName == null)
                throw new ArgumentNullException(nameof(currencyExchangeProperties.FromCurrencyName), "Property is required for class CurrencyExchangeProperties.");

            if (currencyExchangeProperties.FromCurrencyCodeOption.IsSet && currencyExchangeProperties.FromCurrencyCode == null)
                throw new ArgumentNullException(nameof(currencyExchangeProperties.FromCurrencyCode), "Property is required for class CurrencyExchangeProperties.");

            if (currencyExchangeProperties.FromCurrencySymbolOption.IsSet && currencyExchangeProperties.FromCurrencySymbol == null)
                throw new ArgumentNullException(nameof(currencyExchangeProperties.FromCurrencySymbol), "Property is required for class CurrencyExchangeProperties.");

            if (currencyExchangeProperties.ToCurrencyIdOption.IsSet && currencyExchangeProperties.ToCurrencyId == null)
                throw new ArgumentNullException(nameof(currencyExchangeProperties.ToCurrencyId), "Property is required for class CurrencyExchangeProperties.");

            if (currencyExchangeProperties.ToCurrencyNameOption.IsSet && currencyExchangeProperties.ToCurrencyName == null)
                throw new ArgumentNullException(nameof(currencyExchangeProperties.ToCurrencyName), "Property is required for class CurrencyExchangeProperties.");

            if (currencyExchangeProperties.ToCurrencyCodeOption.IsSet && currencyExchangeProperties.ToCurrencyCode == null)
                throw new ArgumentNullException(nameof(currencyExchangeProperties.ToCurrencyCode), "Property is required for class CurrencyExchangeProperties.");

            if (currencyExchangeProperties.ToCurrencySymbolOption.IsSet && currencyExchangeProperties.ToCurrencySymbol == null)
                throw new ArgumentNullException(nameof(currencyExchangeProperties.ToCurrencySymbol), "Property is required for class CurrencyExchangeProperties.");

            if (currencyExchangeProperties.RateOption.IsSet && currencyExchangeProperties.Rate == null)
                throw new ArgumentNullException(nameof(currencyExchangeProperties.Rate), "Property is required for class CurrencyExchangeProperties.");

            if (currencyExchangeProperties.CreatedAtOption.IsSet)
                writer.WriteString("created_at", currencyExchangeProperties.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (currencyExchangeProperties.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", currencyExchangeProperties.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));

            if (currencyExchangeProperties.FromCurrencyIdOption.IsSet)
                writer.WriteString("from_currency_id", currencyExchangeProperties.FromCurrencyId);

            if (currencyExchangeProperties.FromCurrencyNameOption.IsSet)
                writer.WriteString("from_currency_name", currencyExchangeProperties.FromCurrencyName);

            if (currencyExchangeProperties.FromCurrencyCodeOption.IsSet)
                writer.WriteString("from_currency_code", currencyExchangeProperties.FromCurrencyCode);

            if (currencyExchangeProperties.FromCurrencySymbolOption.IsSet)
                writer.WriteString("from_currency_symbol", currencyExchangeProperties.FromCurrencySymbol);

            if (currencyExchangeProperties.FromCurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("from_currency_decimal_places", currencyExchangeProperties.FromCurrencyDecimalPlacesOption.Value!.Value);

            if (currencyExchangeProperties.ToCurrencyIdOption.IsSet)
                writer.WriteString("to_currency_id", currencyExchangeProperties.ToCurrencyId);

            if (currencyExchangeProperties.ToCurrencyNameOption.IsSet)
                writer.WriteString("to_currency_name", currencyExchangeProperties.ToCurrencyName);

            if (currencyExchangeProperties.ToCurrencyCodeOption.IsSet)
                writer.WriteString("to_currency_code", currencyExchangeProperties.ToCurrencyCode);

            if (currencyExchangeProperties.ToCurrencySymbolOption.IsSet)
                writer.WriteString("to_currency_symbol", currencyExchangeProperties.ToCurrencySymbol);

            if (currencyExchangeProperties.ToCurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("to_currency_decimal_places", currencyExchangeProperties.ToCurrencyDecimalPlacesOption.Value!.Value);

            if (currencyExchangeProperties.RateOption.IsSet)
                writer.WriteString("rate", currencyExchangeProperties.Rate);

            if (currencyExchangeProperties.DateOption.IsSet)
                writer.WriteString("date", currencyExchangeProperties.DateOption.Value!.Value.ToString(DateFormat));
        }
    }
}
