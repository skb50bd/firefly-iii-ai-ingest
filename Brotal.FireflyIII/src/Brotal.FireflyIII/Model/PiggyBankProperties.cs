// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// PiggyBankProperties
    /// </summary>
    public partial class PiggyBankProperties : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PiggyBankProperties" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="percentage">The percentage of the target amount that has been saved, if a target amount is set.</param>
        /// <param name="startDate">The date you started with this piggy bank.</param>
        /// <param name="targetDate">The date you intend to finish saving money.</param>
        /// <param name="order">order</param>
        /// <param name="active">active</param>
        /// <param name="notes">notes</param>
        /// <param name="objectGroupId">The group ID of the group this object is part of. NULL if no group.</param>
        /// <param name="objectGroupOrder">The order of the group. At least 1, for the highest sorting.</param>
        /// <param name="objectGroupTitle">The name of the group. NULL if no group.</param>
        /// <param name="accounts">accounts</param>
        /// <param name="objectHasCurrencySetting">Indicates whether the object has a currency setting. If false, the object uses the administration&#39;s primary currency.</param>
        /// <param name="currencyId">The currency ID of the currency associated with this object.</param>
        /// <param name="currencyName">The currency name of the currency associated with this object.</param>
        /// <param name="currencyCode">The currency code of the currency associated with this object.</param>
        /// <param name="currencySymbol">currencySymbol</param>
        /// <param name="currencyDecimalPlaces">currencyDecimalPlaces</param>
        /// <param name="primaryCurrencyId">The currency ID of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyName">The currency name of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyCode">The currency code of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencySymbol">The currency symbol of the administration&#39;s primary currency.</param>
        /// <param name="primaryCurrencyDecimalPlaces">The currency decimal places of the administration&#39;s primary currency.</param>
        /// <param name="targetAmount">targetAmount</param>
        /// <param name="pcTargetAmount">The target amount in the primary currency of the administration.</param>
        /// <param name="currentAmount">currentAmount</param>
        /// <param name="pcCurrentAmount">The current amount in the primary currency of the administration.</param>
        /// <param name="leftToSave">leftToSave</param>
        /// <param name="pcLeftToSave">pcLeftToSave</param>
        /// <param name="savePerMonth">savePerMonth</param>
        /// <param name="pcSavePerMonth">pcSavePerMonth</param>
        [JsonConstructor]
        public PiggyBankProperties(string name, Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default, Option<decimal?> percentage = default, Option<DateTime?> startDate = default, Option<DateTime?> targetDate = default, Option<int?> order = default, Option<bool?> active = default, Option<string?> notes = default, Option<string?> objectGroupId = default, Option<int?> objectGroupOrder = default, Option<string?> objectGroupTitle = default, Option<List<PiggyBankAccountRead>?> accounts = default, Option<bool?> objectHasCurrencySetting = default, Option<string?> currencyId = default, Option<string?> currencyName = default, Option<string?> currencyCode = default, Option<string?> currencySymbol = default, Option<int?> currencyDecimalPlaces = default, Option<string?> primaryCurrencyId = default, Option<string?> primaryCurrencyName = default, Option<string?> primaryCurrencyCode = default, Option<string?> primaryCurrencySymbol = default, Option<int?> primaryCurrencyDecimalPlaces = default, string? targetAmount = default, Option<string?> pcTargetAmount = default, Option<string?> currentAmount = default, Option<string?> pcCurrentAmount = default, Option<string?> leftToSave = default, Option<string?> pcLeftToSave = default, Option<string?> savePerMonth = default, Option<string?> pcSavePerMonth = default)
        {
            Name = name;
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            PercentageOption = percentage;
            StartDateOption = startDate;
            TargetDateOption = targetDate;
            OrderOption = order;
            ActiveOption = active;
            NotesOption = notes;
            ObjectGroupIdOption = objectGroupId;
            ObjectGroupOrderOption = objectGroupOrder;
            ObjectGroupTitleOption = objectGroupTitle;
            AccountsOption = accounts;
            ObjectHasCurrencySettingOption = objectHasCurrencySetting;
            CurrencyIdOption = currencyId;
            CurrencyNameOption = currencyName;
            CurrencyCodeOption = currencyCode;
            CurrencySymbolOption = currencySymbol;
            CurrencyDecimalPlacesOption = currencyDecimalPlaces;
            PrimaryCurrencyIdOption = primaryCurrencyId;
            PrimaryCurrencyNameOption = primaryCurrencyName;
            PrimaryCurrencyCodeOption = primaryCurrencyCode;
            PrimaryCurrencySymbolOption = primaryCurrencySymbol;
            PrimaryCurrencyDecimalPlacesOption = primaryCurrencyDecimalPlaces;
            TargetAmount = targetAmount;
            PcTargetAmountOption = pcTargetAmount;
            CurrentAmountOption = currentAmount;
            PcCurrentAmountOption = pcCurrentAmount;
            LeftToSaveOption = leftToSave;
            PcLeftToSaveOption = pcLeftToSave;
            SavePerMonthOption = savePerMonth;
            PcSavePerMonthOption = pcSavePerMonth;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>New digital camera</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } }

        /// <summary>
        /// Used to track the state of Percentage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> PercentageOption { get; }

        /// <summary>
        /// The percentage of the target amount that has been saved, if a target amount is set.
        /// </summary>
        /// <value>The percentage of the target amount that has been saved, if a target amount is set.</value>
        /* <example>12</example> */
        [JsonPropertyName("percentage")]
        public decimal? Percentage { get { return this.PercentageOption; } }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> StartDateOption { get; private set; }

        /// <summary>
        /// The date you started with this piggy bank.
        /// </summary>
        /// <value>The date you started with this piggy bank.</value>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("start_date")]
        public DateTime? StartDate { get { return this.StartDateOption; } set { this.StartDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of TargetDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TargetDateOption { get; private set; }

        /// <summary>
        /// The date you intend to finish saving money.
        /// </summary>
        /// <value>The date you intend to finish saving money.</value>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("target_date")]
        public DateTime? TargetDate { get { return this.TargetDateOption; } set { this.TargetDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Order
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OrderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        /* <example>5</example> */
        [JsonPropertyName("order")]
        public int? Order { get { return this.OrderOption; } set { this.OrderOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        /* <example>Some notes</example> */
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectGroupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ObjectGroupIdOption { get; private set; }

        /// <summary>
        /// The group ID of the group this object is part of. NULL if no group.
        /// </summary>
        /// <value>The group ID of the group this object is part of. NULL if no group.</value>
        /* <example>5</example> */
        [JsonPropertyName("object_group_id")]
        public string? ObjectGroupId { get { return this.ObjectGroupIdOption; } set { this.ObjectGroupIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectGroupOrder
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ObjectGroupOrderOption { get; }

        /// <summary>
        /// The order of the group. At least 1, for the highest sorting.
        /// </summary>
        /// <value>The order of the group. At least 1, for the highest sorting.</value>
        /* <example>5</example> */
        [JsonPropertyName("object_group_order")]
        public int? ObjectGroupOrder { get { return this.ObjectGroupOrderOption; } }

        /// <summary>
        /// Used to track the state of ObjectGroupTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ObjectGroupTitleOption { get; private set; }

        /// <summary>
        /// The name of the group. NULL if no group.
        /// </summary>
        /// <value>The name of the group. NULL if no group.</value>
        /* <example>Example Group</example> */
        [JsonPropertyName("object_group_title")]
        public string? ObjectGroupTitle { get { return this.ObjectGroupTitleOption; } set { this.ObjectGroupTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Accounts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PiggyBankAccountRead>?> AccountsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Accounts
        /// </summary>
        [JsonPropertyName("accounts")]
        public List<PiggyBankAccountRead>? Accounts { get { return this.AccountsOption; } set { this.AccountsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ObjectHasCurrencySetting
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ObjectHasCurrencySettingOption { get; }

        /// <summary>
        /// Indicates whether the object has a currency setting. If false, the object uses the administration&#39;s primary currency.
        /// </summary>
        /// <value>Indicates whether the object has a currency setting. If false, the object uses the administration&#39;s primary currency.</value>
        /* <example>true</example> */
        [JsonPropertyName("object_has_currency_setting")]
        public bool? ObjectHasCurrencySetting { get { return this.ObjectHasCurrencySettingOption; } }

        /// <summary>
        /// Used to track the state of CurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyIdOption { get; private set; }

        /// <summary>
        /// The currency ID of the currency associated with this object.
        /// </summary>
        /// <value>The currency ID of the currency associated with this object.</value>
        /* <example>5</example> */
        [JsonPropertyName("currency_id")]
        public string? CurrencyId { get { return this.CurrencyIdOption; } set { this.CurrencyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyNameOption { get; private set; }

        /// <summary>
        /// The currency name of the currency associated with this object.
        /// </summary>
        /// <value>The currency name of the currency associated with this object.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("currency_name")]
        public string? CurrencyName { get { return this.CurrencyNameOption; } set { this.CurrencyNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The currency code of the currency associated with this object.
        /// </summary>
        /// <value>The currency code of the currency associated with this object.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("currency_code")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencySymbolOption { get; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        /* <example>$</example> */
        [JsonPropertyName("currency_symbol")]
        public string? CurrencySymbol { get { return this.CurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of CurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// Gets or Sets CurrencyDecimalPlaces
        /// </summary>
        /* <example>2</example> */
        [JsonPropertyName("currency_decimal_places")]
        public int? CurrencyDecimalPlaces { get { return this.CurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyIdOption { get; }

        /// <summary>
        /// The currency ID of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency ID of the administration&#39;s primary currency.</value>
        /* <example>5</example> */
        [JsonPropertyName("primary_currency_id")]
        public string? PrimaryCurrencyId { get { return this.PrimaryCurrencyIdOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyNameOption { get; }

        /// <summary>
        /// The currency name of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency name of the administration&#39;s primary currency.</value>
        /* <example>Euro</example> */
        [JsonPropertyName("primary_currency_name")]
        public string? PrimaryCurrencyName { get { return this.PrimaryCurrencyNameOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencyCodeOption { get; }

        /// <summary>
        /// The currency code of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency code of the administration&#39;s primary currency.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("primary_currency_code")]
        public string? PrimaryCurrencyCode { get { return this.PrimaryCurrencyCodeOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencySymbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryCurrencySymbolOption { get; }

        /// <summary>
        /// The currency symbol of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency symbol of the administration&#39;s primary currency.</value>
        /* <example>$</example> */
        [JsonPropertyName("primary_currency_symbol")]
        public string? PrimaryCurrencySymbol { get { return this.PrimaryCurrencySymbolOption; } }

        /// <summary>
        /// Used to track the state of PrimaryCurrencyDecimalPlaces
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PrimaryCurrencyDecimalPlacesOption { get; }

        /// <summary>
        /// The currency decimal places of the administration&#39;s primary currency.
        /// </summary>
        /// <value>The currency decimal places of the administration&#39;s primary currency.</value>
        /* <example>2</example> */
        [JsonPropertyName("primary_currency_decimal_places")]
        public int? PrimaryCurrencyDecimalPlaces { get { return this.PrimaryCurrencyDecimalPlacesOption; } }

        /// <summary>
        /// Gets or Sets TargetAmount
        /// </summary>
        /* <example>123.45</example> */
        [JsonPropertyName("target_amount")]
        public string? TargetAmount { get; set; }

        /// <summary>
        /// Used to track the state of PcTargetAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcTargetAmountOption { get; private set; }

        /// <summary>
        /// The target amount in the primary currency of the administration.
        /// </summary>
        /// <value>The target amount in the primary currency of the administration.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("pc_target_amount")]
        public string? PcTargetAmount { get { return this.PcTargetAmountOption; } set { this.PcTargetAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrentAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrentAmountOption { get; private set; }

        /// <summary>
        /// Gets or Sets CurrentAmount
        /// </summary>
        /* <example>123.45</example> */
        [JsonPropertyName("current_amount")]
        public string? CurrentAmount { get { return this.CurrentAmountOption; } set { this.CurrentAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of PcCurrentAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcCurrentAmountOption { get; private set; }

        /// <summary>
        /// The current amount in the primary currency of the administration.
        /// </summary>
        /// <value>The current amount in the primary currency of the administration.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("pc_current_amount")]
        public string? PcCurrentAmount { get { return this.PcCurrentAmountOption; } set { this.PcCurrentAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of LeftToSave
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LeftToSaveOption { get; private set; }

        /// <summary>
        /// Gets or Sets LeftToSave
        /// </summary>
        /* <example>700.00</example> */
        [JsonPropertyName("left_to_save")]
        public string? LeftToSave { get { return this.LeftToSaveOption; } set { this.LeftToSaveOption = new(value); } }

        /// <summary>
        /// Used to track the state of PcLeftToSave
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcLeftToSaveOption { get; private set; }

        /// <summary>
        /// Gets or Sets PcLeftToSave
        /// </summary>
        /* <example>700.00</example> */
        [JsonPropertyName("pc_left_to_save")]
        public string? PcLeftToSave { get { return this.PcLeftToSaveOption; } set { this.PcLeftToSaveOption = new(value); } }

        /// <summary>
        /// Used to track the state of SavePerMonth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SavePerMonthOption { get; }

        /// <summary>
        /// Gets or Sets SavePerMonth
        /// </summary>
        /* <example>12.45</example> */
        [JsonPropertyName("save_per_month")]
        public string? SavePerMonth { get { return this.SavePerMonthOption; } }

        /// <summary>
        /// Used to track the state of PcSavePerMonth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PcSavePerMonthOption { get; }

        /// <summary>
        /// Gets or Sets PcSavePerMonth
        /// </summary>
        /* <example>12.45</example> */
        [JsonPropertyName("pc_save_per_month")]
        public string? PcSavePerMonth { get { return this.PcSavePerMonthOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PiggyBankProperties {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  TargetDate: ").Append(TargetDate).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ObjectGroupId: ").Append(ObjectGroupId).Append("\n");
            sb.Append("  ObjectGroupOrder: ").Append(ObjectGroupOrder).Append("\n");
            sb.Append("  ObjectGroupTitle: ").Append(ObjectGroupTitle).Append("\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("  ObjectHasCurrencySetting: ").Append(ObjectHasCurrencySetting).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  CurrencyDecimalPlaces: ").Append(CurrencyDecimalPlaces).Append("\n");
            sb.Append("  PrimaryCurrencyId: ").Append(PrimaryCurrencyId).Append("\n");
            sb.Append("  PrimaryCurrencyName: ").Append(PrimaryCurrencyName).Append("\n");
            sb.Append("  PrimaryCurrencyCode: ").Append(PrimaryCurrencyCode).Append("\n");
            sb.Append("  PrimaryCurrencySymbol: ").Append(PrimaryCurrencySymbol).Append("\n");
            sb.Append("  PrimaryCurrencyDecimalPlaces: ").Append(PrimaryCurrencyDecimalPlaces).Append("\n");
            sb.Append("  TargetAmount: ").Append(TargetAmount).Append("\n");
            sb.Append("  PcTargetAmount: ").Append(PcTargetAmount).Append("\n");
            sb.Append("  CurrentAmount: ").Append(CurrentAmount).Append("\n");
            sb.Append("  PcCurrentAmount: ").Append(PcCurrentAmount).Append("\n");
            sb.Append("  LeftToSave: ").Append(LeftToSave).Append("\n");
            sb.Append("  PcLeftToSave: ").Append(PcLeftToSave).Append("\n");
            sb.Append("  SavePerMonth: ").Append(SavePerMonth).Append("\n");
            sb.Append("  PcSavePerMonth: ").Append(PcSavePerMonth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PiggyBankProperties" />
    /// </summary>
    public class PiggyBankPropertiesJsonConverter : JsonConverter<PiggyBankProperties>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize TargetDate
        /// </summary>
        public static string TargetDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PiggyBankProperties" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PiggyBankProperties Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<decimal?> percentage = default;
            Option<DateTime?> startDate = default;
            Option<DateTime?> targetDate = default;
            Option<int?> order = default;
            Option<bool?> active = default;
            Option<string?> notes = default;
            Option<string?> objectGroupId = default;
            Option<int?> objectGroupOrder = default;
            Option<string?> objectGroupTitle = default;
            Option<List<PiggyBankAccountRead>?> accounts = default;
            Option<bool?> objectHasCurrencySetting = default;
            Option<string?> currencyId = default;
            Option<string?> currencyName = default;
            Option<string?> currencyCode = default;
            Option<string?> currencySymbol = default;
            Option<int?> currencyDecimalPlaces = default;
            Option<string?> primaryCurrencyId = default;
            Option<string?> primaryCurrencyName = default;
            Option<string?> primaryCurrencyCode = default;
            Option<string?> primaryCurrencySymbol = default;
            Option<int?> primaryCurrencyDecimalPlaces = default;
            Option<string?> targetAmount = default;
            Option<string?> pcTargetAmount = default;
            Option<string?> currentAmount = default;
            Option<string?> pcCurrentAmount = default;
            Option<string?> leftToSave = default;
            Option<string?> pcLeftToSave = default;
            Option<string?> savePerMonth = default;
            Option<string?> pcSavePerMonth = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "percentage":
                            percentage = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "start_date":
                            startDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "target_date":
                            targetDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "order":
                            order = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "active":
                            active = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "object_group_id":
                            objectGroupId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "object_group_order":
                            objectGroupOrder = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "object_group_title":
                            objectGroupTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "accounts":
                            accounts = new Option<List<PiggyBankAccountRead>?>(JsonSerializer.Deserialize<List<PiggyBankAccountRead>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "object_has_currency_setting":
                            objectHasCurrencySetting = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "currency_id":
                            currencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_name":
                            currencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_code":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_symbol":
                            currencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currency_decimal_places":
                            currencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "primary_currency_id":
                            primaryCurrencyId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_name":
                            primaryCurrencyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_code":
                            primaryCurrencyCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_symbol":
                            primaryCurrencySymbol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "primary_currency_decimal_places":
                            primaryCurrencyDecimalPlaces = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "target_amount":
                            targetAmount = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "pc_target_amount":
                            pcTargetAmount = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "current_amount":
                            currentAmount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pc_current_amount":
                            pcCurrentAmount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "left_to_save":
                            leftToSave = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "pc_left_to_save":
                            pcLeftToSave = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "save_per_month":
                            savePerMonth = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "pc_save_per_month":
                            pcSavePerMonth = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class PiggyBankProperties.", nameof(name));

            if (!targetAmount.IsSet)
                throw new ArgumentException("Property is required for class PiggyBankProperties.", nameof(targetAmount));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class PiggyBankProperties.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class PiggyBankProperties.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class PiggyBankProperties.");

            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate), "Property is not nullable for class PiggyBankProperties.");

            if (order.IsSet && order.Value == null)
                throw new ArgumentNullException(nameof(order), "Property is not nullable for class PiggyBankProperties.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class PiggyBankProperties.");

            if (accounts.IsSet && accounts.Value == null)
                throw new ArgumentNullException(nameof(accounts), "Property is not nullable for class PiggyBankProperties.");

            if (objectHasCurrencySetting.IsSet && objectHasCurrencySetting.Value == null)
                throw new ArgumentNullException(nameof(objectHasCurrencySetting), "Property is not nullable for class PiggyBankProperties.");

            if (currencyId.IsSet && currencyId.Value == null)
                throw new ArgumentNullException(nameof(currencyId), "Property is not nullable for class PiggyBankProperties.");

            if (currencyName.IsSet && currencyName.Value == null)
                throw new ArgumentNullException(nameof(currencyName), "Property is not nullable for class PiggyBankProperties.");

            if (currencyCode.IsSet && currencyCode.Value == null)
                throw new ArgumentNullException(nameof(currencyCode), "Property is not nullable for class PiggyBankProperties.");

            if (currencySymbol.IsSet && currencySymbol.Value == null)
                throw new ArgumentNullException(nameof(currencySymbol), "Property is not nullable for class PiggyBankProperties.");

            if (currencyDecimalPlaces.IsSet && currencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(currencyDecimalPlaces), "Property is not nullable for class PiggyBankProperties.");

            if (primaryCurrencyId.IsSet && primaryCurrencyId.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyId), "Property is not nullable for class PiggyBankProperties.");

            if (primaryCurrencyName.IsSet && primaryCurrencyName.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyName), "Property is not nullable for class PiggyBankProperties.");

            if (primaryCurrencyCode.IsSet && primaryCurrencyCode.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyCode), "Property is not nullable for class PiggyBankProperties.");

            if (primaryCurrencySymbol.IsSet && primaryCurrencySymbol.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencySymbol), "Property is not nullable for class PiggyBankProperties.");

            if (primaryCurrencyDecimalPlaces.IsSet && primaryCurrencyDecimalPlaces.Value == null)
                throw new ArgumentNullException(nameof(primaryCurrencyDecimalPlaces), "Property is not nullable for class PiggyBankProperties.");

            if (currentAmount.IsSet && currentAmount.Value == null)
                throw new ArgumentNullException(nameof(currentAmount), "Property is not nullable for class PiggyBankProperties.");

            if (pcCurrentAmount.IsSet && pcCurrentAmount.Value == null)
                throw new ArgumentNullException(nameof(pcCurrentAmount), "Property is not nullable for class PiggyBankProperties.");

            return new PiggyBankProperties(name.Value!, createdAt, updatedAt, percentage, startDate, targetDate, order, active, notes, objectGroupId, objectGroupOrder, objectGroupTitle, accounts, objectHasCurrencySetting, currencyId, currencyName, currencyCode, currencySymbol, currencyDecimalPlaces, primaryCurrencyId, primaryCurrencyName, primaryCurrencyCode, primaryCurrencySymbol, primaryCurrencyDecimalPlaces, targetAmount.Value!, pcTargetAmount, currentAmount, pcCurrentAmount, leftToSave, pcLeftToSave, savePerMonth, pcSavePerMonth);
        }

        /// <summary>
        /// Serializes a <see cref="PiggyBankProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="piggyBankProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PiggyBankProperties piggyBankProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, piggyBankProperties, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PiggyBankProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="piggyBankProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PiggyBankProperties piggyBankProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            if (piggyBankProperties.Name == null)
                throw new ArgumentNullException(nameof(piggyBankProperties.Name), "Property is required for class PiggyBankProperties.");

            if (piggyBankProperties.AccountsOption.IsSet && piggyBankProperties.Accounts == null)
                throw new ArgumentNullException(nameof(piggyBankProperties.Accounts), "Property is required for class PiggyBankProperties.");

            if (piggyBankProperties.CurrencyIdOption.IsSet && piggyBankProperties.CurrencyId == null)
                throw new ArgumentNullException(nameof(piggyBankProperties.CurrencyId), "Property is required for class PiggyBankProperties.");

            if (piggyBankProperties.CurrencyNameOption.IsSet && piggyBankProperties.CurrencyName == null)
                throw new ArgumentNullException(nameof(piggyBankProperties.CurrencyName), "Property is required for class PiggyBankProperties.");

            if (piggyBankProperties.CurrencyCodeOption.IsSet && piggyBankProperties.CurrencyCode == null)
                throw new ArgumentNullException(nameof(piggyBankProperties.CurrencyCode), "Property is required for class PiggyBankProperties.");

            if (piggyBankProperties.CurrencySymbolOption.IsSet && piggyBankProperties.CurrencySymbol == null)
                throw new ArgumentNullException(nameof(piggyBankProperties.CurrencySymbol), "Property is required for class PiggyBankProperties.");

            if (piggyBankProperties.PrimaryCurrencyIdOption.IsSet && piggyBankProperties.PrimaryCurrencyId == null)
                throw new ArgumentNullException(nameof(piggyBankProperties.PrimaryCurrencyId), "Property is required for class PiggyBankProperties.");

            if (piggyBankProperties.PrimaryCurrencyNameOption.IsSet && piggyBankProperties.PrimaryCurrencyName == null)
                throw new ArgumentNullException(nameof(piggyBankProperties.PrimaryCurrencyName), "Property is required for class PiggyBankProperties.");

            if (piggyBankProperties.PrimaryCurrencyCodeOption.IsSet && piggyBankProperties.PrimaryCurrencyCode == null)
                throw new ArgumentNullException(nameof(piggyBankProperties.PrimaryCurrencyCode), "Property is required for class PiggyBankProperties.");

            if (piggyBankProperties.PrimaryCurrencySymbolOption.IsSet && piggyBankProperties.PrimaryCurrencySymbol == null)
                throw new ArgumentNullException(nameof(piggyBankProperties.PrimaryCurrencySymbol), "Property is required for class PiggyBankProperties.");

            if (piggyBankProperties.CurrentAmountOption.IsSet && piggyBankProperties.CurrentAmount == null)
                throw new ArgumentNullException(nameof(piggyBankProperties.CurrentAmount), "Property is required for class PiggyBankProperties.");

            if (piggyBankProperties.PcCurrentAmountOption.IsSet && piggyBankProperties.PcCurrentAmount == null)
                throw new ArgumentNullException(nameof(piggyBankProperties.PcCurrentAmount), "Property is required for class PiggyBankProperties.");

            writer.WriteString("name", piggyBankProperties.Name);

            if (piggyBankProperties.CreatedAtOption.IsSet)
                writer.WriteString("created_at", piggyBankProperties.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (piggyBankProperties.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", piggyBankProperties.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));

            if (piggyBankProperties.PercentageOption.IsSet)
                if (piggyBankProperties.PercentageOption.Value != null)
                    writer.WriteNumber("percentage", piggyBankProperties.PercentageOption.Value!.Value);
                else
                    writer.WriteNull("percentage");

            if (piggyBankProperties.StartDateOption.IsSet)
                writer.WriteString("start_date", piggyBankProperties.StartDateOption.Value!.Value.ToString(StartDateFormat));

            if (piggyBankProperties.TargetDateOption.IsSet)
                if (piggyBankProperties.TargetDateOption.Value != null)
                    writer.WriteString("target_date", piggyBankProperties.TargetDateOption.Value!.Value.ToString(TargetDateFormat));
                else
                    writer.WriteNull("target_date");

            if (piggyBankProperties.OrderOption.IsSet)
                writer.WriteNumber("order", piggyBankProperties.OrderOption.Value!.Value);

            if (piggyBankProperties.ActiveOption.IsSet)
                writer.WriteBoolean("active", piggyBankProperties.ActiveOption.Value!.Value);

            if (piggyBankProperties.NotesOption.IsSet)
                if (piggyBankProperties.NotesOption.Value != null)
                    writer.WriteString("notes", piggyBankProperties.Notes);
                else
                    writer.WriteNull("notes");

            if (piggyBankProperties.ObjectGroupIdOption.IsSet)
                if (piggyBankProperties.ObjectGroupIdOption.Value != null)
                    writer.WriteString("object_group_id", piggyBankProperties.ObjectGroupId);
                else
                    writer.WriteNull("object_group_id");

            if (piggyBankProperties.ObjectGroupOrderOption.IsSet)
                if (piggyBankProperties.ObjectGroupOrderOption.Value != null)
                    writer.WriteNumber("object_group_order", piggyBankProperties.ObjectGroupOrderOption.Value!.Value);
                else
                    writer.WriteNull("object_group_order");

            if (piggyBankProperties.ObjectGroupTitleOption.IsSet)
                if (piggyBankProperties.ObjectGroupTitleOption.Value != null)
                    writer.WriteString("object_group_title", piggyBankProperties.ObjectGroupTitle);
                else
                    writer.WriteNull("object_group_title");

            if (piggyBankProperties.AccountsOption.IsSet)
            {
                writer.WritePropertyName("accounts");
                JsonSerializer.Serialize(writer, piggyBankProperties.Accounts, jsonSerializerOptions);
            }
            if (piggyBankProperties.ObjectHasCurrencySettingOption.IsSet)
                writer.WriteBoolean("object_has_currency_setting", piggyBankProperties.ObjectHasCurrencySettingOption.Value!.Value);

            if (piggyBankProperties.CurrencyIdOption.IsSet)
                writer.WriteString("currency_id", piggyBankProperties.CurrencyId);

            if (piggyBankProperties.CurrencyNameOption.IsSet)
                writer.WriteString("currency_name", piggyBankProperties.CurrencyName);

            if (piggyBankProperties.CurrencyCodeOption.IsSet)
                writer.WriteString("currency_code", piggyBankProperties.CurrencyCode);

            if (piggyBankProperties.CurrencySymbolOption.IsSet)
                writer.WriteString("currency_symbol", piggyBankProperties.CurrencySymbol);

            if (piggyBankProperties.CurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("currency_decimal_places", piggyBankProperties.CurrencyDecimalPlacesOption.Value!.Value);

            if (piggyBankProperties.PrimaryCurrencyIdOption.IsSet)
                writer.WriteString("primary_currency_id", piggyBankProperties.PrimaryCurrencyId);

            if (piggyBankProperties.PrimaryCurrencyNameOption.IsSet)
                writer.WriteString("primary_currency_name", piggyBankProperties.PrimaryCurrencyName);

            if (piggyBankProperties.PrimaryCurrencyCodeOption.IsSet)
                writer.WriteString("primary_currency_code", piggyBankProperties.PrimaryCurrencyCode);

            if (piggyBankProperties.PrimaryCurrencySymbolOption.IsSet)
                writer.WriteString("primary_currency_symbol", piggyBankProperties.PrimaryCurrencySymbol);

            if (piggyBankProperties.PrimaryCurrencyDecimalPlacesOption.IsSet)
                writer.WriteNumber("primary_currency_decimal_places", piggyBankProperties.PrimaryCurrencyDecimalPlacesOption.Value!.Value);

            if (piggyBankProperties.TargetAmount != null)
                writer.WriteString("target_amount", piggyBankProperties.TargetAmount);
            else
                writer.WriteNull("target_amount");

            if (piggyBankProperties.PcTargetAmountOption.IsSet)
                if (piggyBankProperties.PcTargetAmountOption.Value != null)
                    writer.WriteString("pc_target_amount", piggyBankProperties.PcTargetAmount);
                else
                    writer.WriteNull("pc_target_amount");

            if (piggyBankProperties.CurrentAmountOption.IsSet)
                writer.WriteString("current_amount", piggyBankProperties.CurrentAmount);

            if (piggyBankProperties.PcCurrentAmountOption.IsSet)
                writer.WriteString("pc_current_amount", piggyBankProperties.PcCurrentAmount);

            if (piggyBankProperties.LeftToSaveOption.IsSet)
                if (piggyBankProperties.LeftToSaveOption.Value != null)
                    writer.WriteString("left_to_save", piggyBankProperties.LeftToSave);
                else
                    writer.WriteNull("left_to_save");

            if (piggyBankProperties.PcLeftToSaveOption.IsSet)
                if (piggyBankProperties.PcLeftToSaveOption.Value != null)
                    writer.WriteString("pc_left_to_save", piggyBankProperties.PcLeftToSave);
                else
                    writer.WriteNull("pc_left_to_save");

            if (piggyBankProperties.SavePerMonthOption.IsSet)
                if (piggyBankProperties.SavePerMonthOption.Value != null)
                    writer.WriteString("save_per_month", piggyBankProperties.SavePerMonth);
                else
                    writer.WriteNull("save_per_month");

            if (piggyBankProperties.PcSavePerMonthOption.IsSet)
                if (piggyBankProperties.PcSavePerMonthOption.Value != null)
                    writer.WriteString("pc_save_per_month", piggyBankProperties.PcSavePerMonth);
                else
                    writer.WriteNull("pc_save_per_month");
        }
    }
}
