// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// RuleTriggerStore
    /// </summary>
    public partial class RuleTriggerStore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleTriggerStore" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="value">The accompanying value the trigger responds to. This value is often mandatory, but this depends on the trigger.</param>
        /// <param name="order">Order of the trigger</param>
        /// <param name="active">If the trigger is active. Defaults to true. (default to true)</param>
        /// <param name="prohibited">If &#39;prohibited&#39; is true, this rule trigger will be negated. &#39;Description is&#39; will become &#39;Description is NOT&#39; etc. (default to false)</param>
        /// <param name="stopProcessing">When true, other triggers will not be checked if this trigger was triggered. Defaults to false. (default to false)</param>
        [JsonConstructor]
        public RuleTriggerStore(RuleTriggerKeyword type, string value, Option<int?> order = default, Option<bool?> active = default, Option<bool?> prohibited = default, Option<bool?> stopProcessing = default)
        {
            Type = type;
            Value = value;
            OrderOption = order;
            ActiveOption = active;
            ProhibitedOption = prohibited;
            StopProcessingOption = stopProcessing;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public RuleTriggerKeyword Type { get; set; }

        /// <summary>
        /// The accompanying value the trigger responds to. This value is often mandatory, but this depends on the trigger.
        /// </summary>
        /// <value>The accompanying value the trigger responds to. This value is often mandatory, but this depends on the trigger.</value>
        /* <example>tag1</example> */
        [JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// Used to track the state of Order
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OrderOption { get; private set; }

        /// <summary>
        /// Order of the trigger
        /// </summary>
        /// <value>Order of the trigger</value>
        /* <example>5</example> */
        [JsonPropertyName("order")]
        public int? Order { get { return this.OrderOption; } set { this.OrderOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// If the trigger is active. Defaults to true.
        /// </summary>
        /// <value>If the trigger is active. Defaults to true.</value>
        /* <example>true</example> */
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Prohibited
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ProhibitedOption { get; private set; }

        /// <summary>
        /// If &#39;prohibited&#39; is true, this rule trigger will be negated. &#39;Description is&#39; will become &#39;Description is NOT&#39; etc.
        /// </summary>
        /// <value>If &#39;prohibited&#39; is true, this rule trigger will be negated. &#39;Description is&#39; will become &#39;Description is NOT&#39; etc.</value>
        /* <example>false</example> */
        [JsonPropertyName("prohibited")]
        public bool? Prohibited { get { return this.ProhibitedOption; } set { this.ProhibitedOption = new(value); } }

        /// <summary>
        /// Used to track the state of StopProcessing
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> StopProcessingOption { get; private set; }

        /// <summary>
        /// When true, other triggers will not be checked if this trigger was triggered. Defaults to false.
        /// </summary>
        /// <value>When true, other triggers will not be checked if this trigger was triggered. Defaults to false.</value>
        /* <example>false</example> */
        [JsonPropertyName("stop_processing")]
        public bool? StopProcessing { get { return this.StopProcessingOption; } set { this.StopProcessingOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RuleTriggerStore {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Prohibited: ").Append(Prohibited).Append("\n");
            sb.Append("  StopProcessing: ").Append(StopProcessing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RuleTriggerStore" />
    /// </summary>
    public class RuleTriggerStoreJsonConverter : JsonConverter<RuleTriggerStore>
    {
        /// <summary>
        /// Deserializes json to <see cref="RuleTriggerStore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RuleTriggerStore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<RuleTriggerKeyword?> type = default;
            Option<string?> value = default;
            Option<int?> order = default;
            Option<bool?> active = default;
            Option<bool?> prohibited = default;
            Option<bool?> stopProcessing = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<RuleTriggerKeyword?>(RuleTriggerKeywordValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "order":
                            order = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "active":
                            active = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "prohibited":
                            prohibited = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "stop_processing":
                            stopProcessing = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class RuleTriggerStore.", nameof(type));

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class RuleTriggerStore.", nameof(value));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class RuleTriggerStore.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class RuleTriggerStore.");

            if (order.IsSet && order.Value == null)
                throw new ArgumentNullException(nameof(order), "Property is not nullable for class RuleTriggerStore.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class RuleTriggerStore.");

            if (prohibited.IsSet && prohibited.Value == null)
                throw new ArgumentNullException(nameof(prohibited), "Property is not nullable for class RuleTriggerStore.");

            if (stopProcessing.IsSet && stopProcessing.Value == null)
                throw new ArgumentNullException(nameof(stopProcessing), "Property is not nullable for class RuleTriggerStore.");

            return new RuleTriggerStore(type.Value!.Value!, value.Value!, order, active, prohibited, stopProcessing);
        }

        /// <summary>
        /// Serializes a <see cref="RuleTriggerStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ruleTriggerStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RuleTriggerStore ruleTriggerStore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, ruleTriggerStore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RuleTriggerStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ruleTriggerStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RuleTriggerStore ruleTriggerStore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (ruleTriggerStore.Value == null)
                throw new ArgumentNullException(nameof(ruleTriggerStore.Value), "Property is required for class RuleTriggerStore.");

            var typeRawValue = RuleTriggerKeywordValueConverter.ToJsonValue(ruleTriggerStore.Type);
            writer.WriteString("type", typeRawValue);

            writer.WriteString("value", ruleTriggerStore.Value);

            if (ruleTriggerStore.OrderOption.IsSet)
                writer.WriteNumber("order", ruleTriggerStore.OrderOption.Value!.Value);

            if (ruleTriggerStore.ActiveOption.IsSet)
                writer.WriteBoolean("active", ruleTriggerStore.ActiveOption.Value!.Value);

            if (ruleTriggerStore.ProhibitedOption.IsSet)
                writer.WriteBoolean("prohibited", ruleTriggerStore.ProhibitedOption.Value!.Value);

            if (ruleTriggerStore.StopProcessingOption.IsSet)
                writer.WriteBoolean("stop_processing", ruleTriggerStore.StopProcessingOption.Value!.Value);
        }
    }
}
