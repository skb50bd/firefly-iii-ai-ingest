// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// Period of the chart.
    /// </summary>
    /// <value>Period of the chart.</value>
    public enum ChartDatasetPeriodProperty
    {
        /// <summary>
        /// Enum _1D for value: 1D
        /// </summary>
        _1D = 1,

        /// <summary>
        /// Enum _1W for value: 1W
        /// </summary>
        _1W = 2,

        /// <summary>
        /// Enum _1M for value: 1M
        /// </summary>
        _1M = 3,

        /// <summary>
        /// Enum _3M for value: 3M
        /// </summary>
        _3M = 4,

        /// <summary>
        /// Enum _1Y for value: 1Y
        /// </summary>
        _1Y = 5,

        /// <summary>
        /// Enum Custom for value: custom
        /// </summary>
        Custom = 6
    }

    /// <summary>
    /// Converts <see cref="ChartDatasetPeriodProperty"/> to and from the JSON value
    /// </summary>
    public static class ChartDatasetPeriodPropertyValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ChartDatasetPeriodProperty"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChartDatasetPeriodProperty FromString(string value)
        {
            if (value.Equals("1D"))
                return ChartDatasetPeriodProperty._1D;

            if (value.Equals("1W"))
                return ChartDatasetPeriodProperty._1W;

            if (value.Equals("1M"))
                return ChartDatasetPeriodProperty._1M;

            if (value.Equals("3M"))
                return ChartDatasetPeriodProperty._3M;

            if (value.Equals("1Y"))
                return ChartDatasetPeriodProperty._1Y;

            if (value.Equals("custom"))
                return ChartDatasetPeriodProperty.Custom;

            throw new NotImplementedException($"Could not convert value to type ChartDatasetPeriodProperty: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ChartDatasetPeriodProperty"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChartDatasetPeriodProperty? FromStringOrDefault(string value)
        {
            if (value.Equals("1D"))
                return ChartDatasetPeriodProperty._1D;

            if (value.Equals("1W"))
                return ChartDatasetPeriodProperty._1W;

            if (value.Equals("1M"))
                return ChartDatasetPeriodProperty._1M;

            if (value.Equals("3M"))
                return ChartDatasetPeriodProperty._3M;

            if (value.Equals("1Y"))
                return ChartDatasetPeriodProperty._1Y;

            if (value.Equals("custom"))
                return ChartDatasetPeriodProperty.Custom;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ChartDatasetPeriodProperty"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ChartDatasetPeriodProperty value)
        {
            if (value == ChartDatasetPeriodProperty._1D)
                return "1D";

            if (value == ChartDatasetPeriodProperty._1W)
                return "1W";

            if (value == ChartDatasetPeriodProperty._1M)
                return "1M";

            if (value == ChartDatasetPeriodProperty._3M)
                return "3M";

            if (value == ChartDatasetPeriodProperty._1Y)
                return "1Y";

            if (value == ChartDatasetPeriodProperty.Custom)
                return "custom";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChartDatasetPeriodProperty"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ChartDatasetPeriodPropertyJsonConverter : JsonConverter<ChartDatasetPeriodProperty>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ChartDatasetPeriodProperty Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ChartDatasetPeriodProperty? result = rawValue == null
                ? null
                : ChartDatasetPeriodPropertyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ChartDatasetPeriodProperty to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chartDatasetPeriodProperty"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ChartDatasetPeriodProperty chartDatasetPeriodProperty, JsonSerializerOptions options)
        {
            writer.WriteStringValue(ChartDatasetPeriodPropertyValueConverter.ToJsonValue(chartDatasetPeriodProperty).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChartDatasetPeriodProperty"/>
    /// </summary>
    public class ChartDatasetPeriodPropertyNullableJsonConverter : JsonConverter<ChartDatasetPeriodProperty?>
    {
        /// <summary>
        /// Returns a ChartDatasetPeriodProperty from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ChartDatasetPeriodProperty? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ChartDatasetPeriodProperty? result = rawValue == null
                ? null
                : ChartDatasetPeriodPropertyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ChartDatasetPeriodProperty to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chartDatasetPeriodProperty"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ChartDatasetPeriodProperty? chartDatasetPeriodProperty, JsonSerializerOptions options)
        {
            writer.WriteStringValue(chartDatasetPeriodProperty.HasValue ? ChartDatasetPeriodPropertyValueConverter.ToJsonValue(chartDatasetPeriodProperty.Value).ToString() : "null");
        }
    }
}
