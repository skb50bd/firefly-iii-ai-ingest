// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// CurrencyExchangeRateStore
    /// </summary>
    public partial class CurrencyExchangeRateStore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyExchangeRateStore" /> class.
        /// </summary>
        /// <param name="from">The base currency code.</param>
        /// <param name="to">The destination currency code.</param>
        /// <param name="rate">The exchange rate from the base currency to the destination currency.</param>
        [JsonConstructor]
        public CurrencyExchangeRateStore(string from, string to, Option<string?> rate = default)
        {
            From = from;
            To = to;
            RateOption = rate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The base currency code.
        /// </summary>
        /// <value>The base currency code.</value>
        /* <example>USD</example> */
        [JsonPropertyName("from")]
        public string From { get; set; }

        /// <summary>
        /// The destination currency code.
        /// </summary>
        /// <value>The destination currency code.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("to")]
        public string To { get; set; }

        /// <summary>
        /// Used to track the state of Rate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RateOption { get; private set; }

        /// <summary>
        /// The exchange rate from the base currency to the destination currency.
        /// </summary>
        /// <value>The exchange rate from the base currency to the destination currency.</value>
        /* <example>2.3456</example> */
        [JsonPropertyName("rate")]
        public string? Rate { get { return this.RateOption; } set { this.RateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CurrencyExchangeRateStore {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CurrencyExchangeRateStore" />
    /// </summary>
    public class CurrencyExchangeRateStoreJsonConverter : JsonConverter<CurrencyExchangeRateStore>
    {
        /// <summary>
        /// Deserializes json to <see cref="CurrencyExchangeRateStore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CurrencyExchangeRateStore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> from = default;
            Option<string?> to = default;
            Option<string?> rate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "from":
                            from = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "to":
                            to = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "rate":
                            rate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!from.IsSet)
                throw new ArgumentException("Property is required for class CurrencyExchangeRateStore.", nameof(from));

            if (!to.IsSet)
                throw new ArgumentException("Property is required for class CurrencyExchangeRateStore.", nameof(to));

            if (from.IsSet && from.Value == null)
                throw new ArgumentNullException(nameof(from), "Property is not nullable for class CurrencyExchangeRateStore.");

            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to), "Property is not nullable for class CurrencyExchangeRateStore.");

            if (rate.IsSet && rate.Value == null)
                throw new ArgumentNullException(nameof(rate), "Property is not nullable for class CurrencyExchangeRateStore.");

            return new CurrencyExchangeRateStore(from.Value!, to.Value!, rate);
        }

        /// <summary>
        /// Serializes a <see cref="CurrencyExchangeRateStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currencyExchangeRateStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CurrencyExchangeRateStore currencyExchangeRateStore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, currencyExchangeRateStore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CurrencyExchangeRateStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currencyExchangeRateStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CurrencyExchangeRateStore currencyExchangeRateStore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (currencyExchangeRateStore.From == null)
                throw new ArgumentNullException(nameof(currencyExchangeRateStore.From), "Property is required for class CurrencyExchangeRateStore.");

            if (currencyExchangeRateStore.To == null)
                throw new ArgumentNullException(nameof(currencyExchangeRateStore.To), "Property is required for class CurrencyExchangeRateStore.");

            if (currencyExchangeRateStore.RateOption.IsSet && currencyExchangeRateStore.Rate == null)
                throw new ArgumentNullException(nameof(currencyExchangeRateStore.Rate), "Property is required for class CurrencyExchangeRateStore.");

            writer.WriteString("from", currencyExchangeRateStore.From);

            writer.WriteString("to", currencyExchangeRateStore.To);

            if (currencyExchangeRateStore.RateOption.IsSet)
                writer.WriteString("rate", currencyExchangeRateStore.Rate);
        }
    }
}
