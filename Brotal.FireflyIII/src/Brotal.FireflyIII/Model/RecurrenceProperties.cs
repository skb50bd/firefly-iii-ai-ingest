// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// RecurrenceProperties
    /// </summary>
    public partial class RecurrenceProperties : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrenceProperties" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="type">type</param>
        /// <param name="title">title</param>
        /// <param name="description">Not to be confused with the description of the actual transaction(s) being created.</param>
        /// <param name="firstDate">First time the recurring transaction will fire. Must be after today.</param>
        /// <param name="latestDate">Last time the recurring transaction has fired.</param>
        /// <param name="repeatUntil">Date until the recurring transaction can fire. Use either this field or repetitions.</param>
        /// <param name="applyRules">Whether or not to fire the rules after the creation of a transaction.</param>
        /// <param name="active">If the recurrence is even active.</param>
        /// <param name="nrOfRepetitions">Max number of created transactions. Use either this field or repeat_until.</param>
        /// <param name="notes">notes</param>
        /// <param name="repetitions">repetitions</param>
        /// <param name="transactions">transactions</param>
        [JsonConstructor]
        public RecurrenceProperties(Option<DateTime?> createdAt = default, Option<DateTime?> updatedAt = default, Option<RecurrenceTransactionType?> type = default, Option<string?> title = default, Option<string?> description = default, Option<DateOnly?> firstDate = default, Option<DateOnly?> latestDate = default, Option<DateOnly?> repeatUntil = default, Option<bool?> applyRules = default, Option<bool?> active = default, Option<int?> nrOfRepetitions = default, Option<string?> notes = default, Option<List<RecurrenceRepetition>?> repetitions = default, Option<List<RecurrenceTransaction>?> transactions = default)
        {
            CreatedAtOption = createdAt;
            UpdatedAtOption = updatedAt;
            TypeOption = type;
            TitleOption = title;
            DescriptionOption = description;
            FirstDateOption = firstDate;
            LatestDateOption = latestDate;
            RepeatUntilOption = repeatUntil;
            ApplyRulesOption = applyRules;
            ActiveOption = active;
            NrOfRepetitionsOption = nrOfRepetitions;
            NotesOption = notes;
            RepetitionsOption = repetitions;
            TransactionsOption = transactions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RecurrenceTransactionType?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public RecurrenceTransactionType? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /* <example>2025-08-01T00:00Z</example> */
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        /* <example>Rent</example> */
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Not to be confused with the description of the actual transaction(s) being created.
        /// </summary>
        /// <value>Not to be confused with the description of the actual transaction(s) being created.</value>
        /* <example>Recurring transaction for the monthly rent</example> */
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> FirstDateOption { get; private set; }

        /// <summary>
        /// First time the recurring transaction will fire. Must be after today.
        /// </summary>
        /// <value>First time the recurring transaction will fire. Must be after today.</value>
        /* <example>Sun Aug 31 00:00:00 UTC 2025</example> */
        [JsonPropertyName("first_date")]
        public DateOnly? FirstDate { get { return this.FirstDateOption; } set { this.FirstDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of LatestDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> LatestDateOption { get; }

        /// <summary>
        /// Last time the recurring transaction has fired.
        /// </summary>
        /// <value>Last time the recurring transaction has fired.</value>
        /* <example>Fri Aug 01 00:00:00 UTC 2025</example> */
        [JsonPropertyName("latest_date")]
        public DateOnly? LatestDate { get { return this.LatestDateOption; } }

        /// <summary>
        /// Used to track the state of RepeatUntil
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> RepeatUntilOption { get; private set; }

        /// <summary>
        /// Date until the recurring transaction can fire. Use either this field or repetitions.
        /// </summary>
        /// <value>Date until the recurring transaction can fire. Use either this field or repetitions.</value>
        /* <example>Sun Aug 31 00:00:00 UTC 2025</example> */
        [JsonPropertyName("repeat_until")]
        public DateOnly? RepeatUntil { get { return this.RepeatUntilOption; } set { this.RepeatUntilOption = new(value); } }

        /// <summary>
        /// Used to track the state of ApplyRules
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ApplyRulesOption { get; private set; }

        /// <summary>
        /// Whether or not to fire the rules after the creation of a transaction.
        /// </summary>
        /// <value>Whether or not to fire the rules after the creation of a transaction.</value>
        /* <example>true</example> */
        [JsonPropertyName("apply_rules")]
        public bool? ApplyRules { get { return this.ApplyRulesOption; } set { this.ApplyRulesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// If the recurrence is even active.
        /// </summary>
        /// <value>If the recurrence is even active.</value>
        /* <example>true</example> */
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of NrOfRepetitions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NrOfRepetitionsOption { get; private set; }

        /// <summary>
        /// Max number of created transactions. Use either this field or repeat_until.
        /// </summary>
        /// <value>Max number of created transactions. Use either this field or repeat_until.</value>
        /* <example>5</example> */
        [JsonPropertyName("nr_of_repetitions")]
        public int? NrOfRepetitions { get { return this.NrOfRepetitionsOption; } set { this.NrOfRepetitionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        /* <example>Some notes</example> */
        [JsonPropertyName("notes")]
        public string? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Repetitions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<RecurrenceRepetition>?> RepetitionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Repetitions
        /// </summary>
        [JsonPropertyName("repetitions")]
        public List<RecurrenceRepetition>? Repetitions { get { return this.RepetitionsOption; } set { this.RepetitionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Transactions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<RecurrenceTransaction>?> TransactionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [JsonPropertyName("transactions")]
        public List<RecurrenceTransaction>? Transactions { get { return this.TransactionsOption; } set { this.TransactionsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecurrenceProperties {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FirstDate: ").Append(FirstDate).Append("\n");
            sb.Append("  LatestDate: ").Append(LatestDate).Append("\n");
            sb.Append("  RepeatUntil: ").Append(RepeatUntil).Append("\n");
            sb.Append("  ApplyRules: ").Append(ApplyRules).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  NrOfRepetitions: ").Append(NrOfRepetitions).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Repetitions: ").Append(Repetitions).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RecurrenceProperties" />
    /// </summary>
    public class RecurrencePropertiesJsonConverter : JsonConverter<RecurrenceProperties>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize FirstDate
        /// </summary>
        public static string FirstDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LatestDate
        /// </summary>
        public static string LatestDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize RepeatUntil
        /// </summary>
        public static string RepeatUntilFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="RecurrenceProperties" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RecurrenceProperties Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<RecurrenceTransactionType?> type = default;
            Option<string?> title = default;
            Option<string?> description = default;
            Option<DateOnly?> firstDate = default;
            Option<DateOnly?> latestDate = default;
            Option<DateOnly?> repeatUntil = default;
            Option<bool?> applyRules = default;
            Option<bool?> active = default;
            Option<int?> nrOfRepetitions = default;
            Option<string?> notes = default;
            Option<List<RecurrenceRepetition>?> repetitions = default;
            Option<List<RecurrenceTransaction>?> transactions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<RecurrenceTransactionType?>(RecurrenceTransactionTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "first_date":
                            firstDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "latest_date":
                            latestDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "repeat_until":
                            repeatUntil = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "apply_rules":
                            applyRules = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "active":
                            active = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "nr_of_repetitions":
                            nrOfRepetitions = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "repetitions":
                            repetitions = new Option<List<RecurrenceRepetition>?>(JsonSerializer.Deserialize<List<RecurrenceRepetition>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "transactions":
                            transactions = new Option<List<RecurrenceTransaction>?>(JsonSerializer.Deserialize<List<RecurrenceTransaction>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class RecurrenceProperties.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class RecurrenceProperties.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class RecurrenceProperties.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class RecurrenceProperties.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class RecurrenceProperties.");

            if (firstDate.IsSet && firstDate.Value == null)
                throw new ArgumentNullException(nameof(firstDate), "Property is not nullable for class RecurrenceProperties.");

            if (applyRules.IsSet && applyRules.Value == null)
                throw new ArgumentNullException(nameof(applyRules), "Property is not nullable for class RecurrenceProperties.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class RecurrenceProperties.");

            if (repetitions.IsSet && repetitions.Value == null)
                throw new ArgumentNullException(nameof(repetitions), "Property is not nullable for class RecurrenceProperties.");

            if (transactions.IsSet && transactions.Value == null)
                throw new ArgumentNullException(nameof(transactions), "Property is not nullable for class RecurrenceProperties.");

            return new RecurrenceProperties(createdAt, updatedAt, type, title, description, firstDate, latestDate, repeatUntil, applyRules, active, nrOfRepetitions, notes, repetitions, transactions);
        }

        /// <summary>
        /// Serializes a <see cref="RecurrenceProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recurrenceProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RecurrenceProperties recurrenceProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, recurrenceProperties, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RecurrenceProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recurrenceProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RecurrenceProperties recurrenceProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            if (recurrenceProperties.TitleOption.IsSet && recurrenceProperties.Title == null)
                throw new ArgumentNullException(nameof(recurrenceProperties.Title), "Property is required for class RecurrenceProperties.");

            if (recurrenceProperties.DescriptionOption.IsSet && recurrenceProperties.Description == null)
                throw new ArgumentNullException(nameof(recurrenceProperties.Description), "Property is required for class RecurrenceProperties.");

            if (recurrenceProperties.RepetitionsOption.IsSet && recurrenceProperties.Repetitions == null)
                throw new ArgumentNullException(nameof(recurrenceProperties.Repetitions), "Property is required for class RecurrenceProperties.");

            if (recurrenceProperties.TransactionsOption.IsSet && recurrenceProperties.Transactions == null)
                throw new ArgumentNullException(nameof(recurrenceProperties.Transactions), "Property is required for class RecurrenceProperties.");

            if (recurrenceProperties.CreatedAtOption.IsSet)
                writer.WriteString("created_at", recurrenceProperties.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (recurrenceProperties.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", recurrenceProperties.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));

            if (recurrenceProperties.TypeOption.IsSet)
            {
                var typeRawValue = RecurrenceTransactionTypeValueConverter.ToJsonValue(recurrenceProperties.Type!.Value);
                writer.WriteString("type", typeRawValue);
            }
            if (recurrenceProperties.TitleOption.IsSet)
                writer.WriteString("title", recurrenceProperties.Title);

            if (recurrenceProperties.DescriptionOption.IsSet)
                writer.WriteString("description", recurrenceProperties.Description);

            if (recurrenceProperties.FirstDateOption.IsSet)
                writer.WriteString("first_date", recurrenceProperties.FirstDateOption.Value!.Value.ToString(FirstDateFormat));

            if (recurrenceProperties.LatestDateOption.IsSet)
                if (recurrenceProperties.LatestDateOption.Value != null)
                    writer.WriteString("latest_date", recurrenceProperties.LatestDateOption.Value!.Value.ToString(LatestDateFormat));
                else
                    writer.WriteNull("latest_date");

            if (recurrenceProperties.RepeatUntilOption.IsSet)
                if (recurrenceProperties.RepeatUntilOption.Value != null)
                    writer.WriteString("repeat_until", recurrenceProperties.RepeatUntilOption.Value!.Value.ToString(RepeatUntilFormat));
                else
                    writer.WriteNull("repeat_until");

            if (recurrenceProperties.ApplyRulesOption.IsSet)
                writer.WriteBoolean("apply_rules", recurrenceProperties.ApplyRulesOption.Value!.Value);

            if (recurrenceProperties.ActiveOption.IsSet)
                writer.WriteBoolean("active", recurrenceProperties.ActiveOption.Value!.Value);

            if (recurrenceProperties.NrOfRepetitionsOption.IsSet)
                if (recurrenceProperties.NrOfRepetitionsOption.Value != null)
                    writer.WriteNumber("nr_of_repetitions", recurrenceProperties.NrOfRepetitionsOption.Value!.Value);
                else
                    writer.WriteNull("nr_of_repetitions");

            if (recurrenceProperties.NotesOption.IsSet)
                if (recurrenceProperties.NotesOption.Value != null)
                    writer.WriteString("notes", recurrenceProperties.Notes);
                else
                    writer.WriteNull("notes");

            if (recurrenceProperties.RepetitionsOption.IsSet)
            {
                writer.WritePropertyName("repetitions");
                JsonSerializer.Serialize(writer, recurrenceProperties.Repetitions, jsonSerializerOptions);
            }
            if (recurrenceProperties.TransactionsOption.IsSet)
            {
                writer.WritePropertyName("transactions");
                JsonSerializer.Serialize(writer, recurrenceProperties.Transactions, jsonSerializerOptions);
            }
        }
    }
}
