// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// The type of thing this trigger responds to. A limited set is possible
    /// </summary>
    /// <value>The type of thing this trigger responds to. A limited set is possible</value>
    public enum RuleTriggerKeyword
    {
        /// <summary>
        /// Enum FromAccountStarts for value: from_account_starts
        /// </summary>
        FromAccountStarts = 1,

        /// <summary>
        /// Enum FromAccountEnds for value: from_account_ends
        /// </summary>
        FromAccountEnds = 2,

        /// <summary>
        /// Enum FromAccountIs for value: from_account_is
        /// </summary>
        FromAccountIs = 3,

        /// <summary>
        /// Enum FromAccountContains for value: from_account_contains
        /// </summary>
        FromAccountContains = 4,

        /// <summary>
        /// Enum ToAccountStarts for value: to_account_starts
        /// </summary>
        ToAccountStarts = 5,

        /// <summary>
        /// Enum ToAccountEnds for value: to_account_ends
        /// </summary>
        ToAccountEnds = 6,

        /// <summary>
        /// Enum ToAccountIs for value: to_account_is
        /// </summary>
        ToAccountIs = 7,

        /// <summary>
        /// Enum ToAccountContains for value: to_account_contains
        /// </summary>
        ToAccountContains = 8,

        /// <summary>
        /// Enum AmountLess for value: amount_less
        /// </summary>
        AmountLess = 9,

        /// <summary>
        /// Enum AmountExactly for value: amount_exactly
        /// </summary>
        AmountExactly = 10,

        /// <summary>
        /// Enum AmountMore for value: amount_more
        /// </summary>
        AmountMore = 11,

        /// <summary>
        /// Enum DescriptionStarts for value: description_starts
        /// </summary>
        DescriptionStarts = 12,

        /// <summary>
        /// Enum DescriptionEnds for value: description_ends
        /// </summary>
        DescriptionEnds = 13,

        /// <summary>
        /// Enum DescriptionContains for value: description_contains
        /// </summary>
        DescriptionContains = 14,

        /// <summary>
        /// Enum DescriptionIs for value: description_is
        /// </summary>
        DescriptionIs = 15,

        /// <summary>
        /// Enum TransactionType for value: transaction_type
        /// </summary>
        TransactionType = 16,

        /// <summary>
        /// Enum CategoryIs for value: category_is
        /// </summary>
        CategoryIs = 17,

        /// <summary>
        /// Enum BudgetIs for value: budget_is
        /// </summary>
        BudgetIs = 18,

        /// <summary>
        /// Enum TagIs for value: tag_is
        /// </summary>
        TagIs = 19,

        /// <summary>
        /// Enum CurrencyIs for value: currency_is
        /// </summary>
        CurrencyIs = 20,

        /// <summary>
        /// Enum HasAttachments for value: has_attachments
        /// </summary>
        HasAttachments = 21,

        /// <summary>
        /// Enum HasNoCategory for value: has_no_category
        /// </summary>
        HasNoCategory = 22,

        /// <summary>
        /// Enum HasAnyCategory for value: has_any_category
        /// </summary>
        HasAnyCategory = 23,

        /// <summary>
        /// Enum HasNoBudget for value: has_no_budget
        /// </summary>
        HasNoBudget = 24,

        /// <summary>
        /// Enum HasAnyBudget for value: has_any_budget
        /// </summary>
        HasAnyBudget = 25,

        /// <summary>
        /// Enum HasNoTag for value: has_no_tag
        /// </summary>
        HasNoTag = 26,

        /// <summary>
        /// Enum HasAnyTag for value: has_any_tag
        /// </summary>
        HasAnyTag = 27,

        /// <summary>
        /// Enum NotesContains for value: notes_contains
        /// </summary>
        NotesContains = 28,

        /// <summary>
        /// Enum NotesStart for value: notes_start
        /// </summary>
        NotesStart = 29,

        /// <summary>
        /// Enum NotesEnd for value: notes_end
        /// </summary>
        NotesEnd = 30,

        /// <summary>
        /// Enum NotesAre for value: notes_are
        /// </summary>
        NotesAre = 31,

        /// <summary>
        /// Enum NoNotes for value: no_notes
        /// </summary>
        NoNotes = 32,

        /// <summary>
        /// Enum AnyNotes for value: any_notes
        /// </summary>
        AnyNotes = 33,

        /// <summary>
        /// Enum SourceAccountIs for value: source_account_is
        /// </summary>
        SourceAccountIs = 34,

        /// <summary>
        /// Enum DestinationAccountIs for value: destination_account_is
        /// </summary>
        DestinationAccountIs = 35,

        /// <summary>
        /// Enum SourceAccountStarts for value: source_account_starts
        /// </summary>
        SourceAccountStarts = 36
    }

    /// <summary>
    /// Converts <see cref="RuleTriggerKeyword"/> to and from the JSON value
    /// </summary>
    public static class RuleTriggerKeywordValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="RuleTriggerKeyword"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RuleTriggerKeyword FromString(string value)
        {
            if (value.Equals("from_account_starts"))
                return RuleTriggerKeyword.FromAccountStarts;

            if (value.Equals("from_account_ends"))
                return RuleTriggerKeyword.FromAccountEnds;

            if (value.Equals("from_account_is"))
                return RuleTriggerKeyword.FromAccountIs;

            if (value.Equals("from_account_contains"))
                return RuleTriggerKeyword.FromAccountContains;

            if (value.Equals("to_account_starts"))
                return RuleTriggerKeyword.ToAccountStarts;

            if (value.Equals("to_account_ends"))
                return RuleTriggerKeyword.ToAccountEnds;

            if (value.Equals("to_account_is"))
                return RuleTriggerKeyword.ToAccountIs;

            if (value.Equals("to_account_contains"))
                return RuleTriggerKeyword.ToAccountContains;

            if (value.Equals("amount_less"))
                return RuleTriggerKeyword.AmountLess;

            if (value.Equals("amount_exactly"))
                return RuleTriggerKeyword.AmountExactly;

            if (value.Equals("amount_more"))
                return RuleTriggerKeyword.AmountMore;

            if (value.Equals("description_starts"))
                return RuleTriggerKeyword.DescriptionStarts;

            if (value.Equals("description_ends"))
                return RuleTriggerKeyword.DescriptionEnds;

            if (value.Equals("description_contains"))
                return RuleTriggerKeyword.DescriptionContains;

            if (value.Equals("description_is"))
                return RuleTriggerKeyword.DescriptionIs;

            if (value.Equals("transaction_type"))
                return RuleTriggerKeyword.TransactionType;

            if (value.Equals("category_is"))
                return RuleTriggerKeyword.CategoryIs;

            if (value.Equals("budget_is"))
                return RuleTriggerKeyword.BudgetIs;

            if (value.Equals("tag_is"))
                return RuleTriggerKeyword.TagIs;

            if (value.Equals("currency_is"))
                return RuleTriggerKeyword.CurrencyIs;

            if (value.Equals("has_attachments"))
                return RuleTriggerKeyword.HasAttachments;

            if (value.Equals("has_no_category"))
                return RuleTriggerKeyword.HasNoCategory;

            if (value.Equals("has_any_category"))
                return RuleTriggerKeyword.HasAnyCategory;

            if (value.Equals("has_no_budget"))
                return RuleTriggerKeyword.HasNoBudget;

            if (value.Equals("has_any_budget"))
                return RuleTriggerKeyword.HasAnyBudget;

            if (value.Equals("has_no_tag"))
                return RuleTriggerKeyword.HasNoTag;

            if (value.Equals("has_any_tag"))
                return RuleTriggerKeyword.HasAnyTag;

            if (value.Equals("notes_contains"))
                return RuleTriggerKeyword.NotesContains;

            if (value.Equals("notes_start"))
                return RuleTriggerKeyword.NotesStart;

            if (value.Equals("notes_end"))
                return RuleTriggerKeyword.NotesEnd;

            if (value.Equals("notes_are"))
                return RuleTriggerKeyword.NotesAre;

            if (value.Equals("no_notes"))
                return RuleTriggerKeyword.NoNotes;

            if (value.Equals("any_notes"))
                return RuleTriggerKeyword.AnyNotes;

            if (value.Equals("source_account_is"))
                return RuleTriggerKeyword.SourceAccountIs;

            if (value.Equals("destination_account_is"))
                return RuleTriggerKeyword.DestinationAccountIs;

            if (value.Equals("source_account_starts"))
                return RuleTriggerKeyword.SourceAccountStarts;

            throw new NotImplementedException($"Could not convert value to type RuleTriggerKeyword: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="RuleTriggerKeyword"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RuleTriggerKeyword? FromStringOrDefault(string value)
        {
            if (value.Equals("from_account_starts"))
                return RuleTriggerKeyword.FromAccountStarts;

            if (value.Equals("from_account_ends"))
                return RuleTriggerKeyword.FromAccountEnds;

            if (value.Equals("from_account_is"))
                return RuleTriggerKeyword.FromAccountIs;

            if (value.Equals("from_account_contains"))
                return RuleTriggerKeyword.FromAccountContains;

            if (value.Equals("to_account_starts"))
                return RuleTriggerKeyword.ToAccountStarts;

            if (value.Equals("to_account_ends"))
                return RuleTriggerKeyword.ToAccountEnds;

            if (value.Equals("to_account_is"))
                return RuleTriggerKeyword.ToAccountIs;

            if (value.Equals("to_account_contains"))
                return RuleTriggerKeyword.ToAccountContains;

            if (value.Equals("amount_less"))
                return RuleTriggerKeyword.AmountLess;

            if (value.Equals("amount_exactly"))
                return RuleTriggerKeyword.AmountExactly;

            if (value.Equals("amount_more"))
                return RuleTriggerKeyword.AmountMore;

            if (value.Equals("description_starts"))
                return RuleTriggerKeyword.DescriptionStarts;

            if (value.Equals("description_ends"))
                return RuleTriggerKeyword.DescriptionEnds;

            if (value.Equals("description_contains"))
                return RuleTriggerKeyword.DescriptionContains;

            if (value.Equals("description_is"))
                return RuleTriggerKeyword.DescriptionIs;

            if (value.Equals("transaction_type"))
                return RuleTriggerKeyword.TransactionType;

            if (value.Equals("category_is"))
                return RuleTriggerKeyword.CategoryIs;

            if (value.Equals("budget_is"))
                return RuleTriggerKeyword.BudgetIs;

            if (value.Equals("tag_is"))
                return RuleTriggerKeyword.TagIs;

            if (value.Equals("currency_is"))
                return RuleTriggerKeyword.CurrencyIs;

            if (value.Equals("has_attachments"))
                return RuleTriggerKeyword.HasAttachments;

            if (value.Equals("has_no_category"))
                return RuleTriggerKeyword.HasNoCategory;

            if (value.Equals("has_any_category"))
                return RuleTriggerKeyword.HasAnyCategory;

            if (value.Equals("has_no_budget"))
                return RuleTriggerKeyword.HasNoBudget;

            if (value.Equals("has_any_budget"))
                return RuleTriggerKeyword.HasAnyBudget;

            if (value.Equals("has_no_tag"))
                return RuleTriggerKeyword.HasNoTag;

            if (value.Equals("has_any_tag"))
                return RuleTriggerKeyword.HasAnyTag;

            if (value.Equals("notes_contains"))
                return RuleTriggerKeyword.NotesContains;

            if (value.Equals("notes_start"))
                return RuleTriggerKeyword.NotesStart;

            if (value.Equals("notes_end"))
                return RuleTriggerKeyword.NotesEnd;

            if (value.Equals("notes_are"))
                return RuleTriggerKeyword.NotesAre;

            if (value.Equals("no_notes"))
                return RuleTriggerKeyword.NoNotes;

            if (value.Equals("any_notes"))
                return RuleTriggerKeyword.AnyNotes;

            if (value.Equals("source_account_is"))
                return RuleTriggerKeyword.SourceAccountIs;

            if (value.Equals("destination_account_is"))
                return RuleTriggerKeyword.DestinationAccountIs;

            if (value.Equals("source_account_starts"))
                return RuleTriggerKeyword.SourceAccountStarts;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RuleTriggerKeyword"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(RuleTriggerKeyword value)
        {
            if (value == RuleTriggerKeyword.FromAccountStarts)
                return "from_account_starts";

            if (value == RuleTriggerKeyword.FromAccountEnds)
                return "from_account_ends";

            if (value == RuleTriggerKeyword.FromAccountIs)
                return "from_account_is";

            if (value == RuleTriggerKeyword.FromAccountContains)
                return "from_account_contains";

            if (value == RuleTriggerKeyword.ToAccountStarts)
                return "to_account_starts";

            if (value == RuleTriggerKeyword.ToAccountEnds)
                return "to_account_ends";

            if (value == RuleTriggerKeyword.ToAccountIs)
                return "to_account_is";

            if (value == RuleTriggerKeyword.ToAccountContains)
                return "to_account_contains";

            if (value == RuleTriggerKeyword.AmountLess)
                return "amount_less";

            if (value == RuleTriggerKeyword.AmountExactly)
                return "amount_exactly";

            if (value == RuleTriggerKeyword.AmountMore)
                return "amount_more";

            if (value == RuleTriggerKeyword.DescriptionStarts)
                return "description_starts";

            if (value == RuleTriggerKeyword.DescriptionEnds)
                return "description_ends";

            if (value == RuleTriggerKeyword.DescriptionContains)
                return "description_contains";

            if (value == RuleTriggerKeyword.DescriptionIs)
                return "description_is";

            if (value == RuleTriggerKeyword.TransactionType)
                return "transaction_type";

            if (value == RuleTriggerKeyword.CategoryIs)
                return "category_is";

            if (value == RuleTriggerKeyword.BudgetIs)
                return "budget_is";

            if (value == RuleTriggerKeyword.TagIs)
                return "tag_is";

            if (value == RuleTriggerKeyword.CurrencyIs)
                return "currency_is";

            if (value == RuleTriggerKeyword.HasAttachments)
                return "has_attachments";

            if (value == RuleTriggerKeyword.HasNoCategory)
                return "has_no_category";

            if (value == RuleTriggerKeyword.HasAnyCategory)
                return "has_any_category";

            if (value == RuleTriggerKeyword.HasNoBudget)
                return "has_no_budget";

            if (value == RuleTriggerKeyword.HasAnyBudget)
                return "has_any_budget";

            if (value == RuleTriggerKeyword.HasNoTag)
                return "has_no_tag";

            if (value == RuleTriggerKeyword.HasAnyTag)
                return "has_any_tag";

            if (value == RuleTriggerKeyword.NotesContains)
                return "notes_contains";

            if (value == RuleTriggerKeyword.NotesStart)
                return "notes_start";

            if (value == RuleTriggerKeyword.NotesEnd)
                return "notes_end";

            if (value == RuleTriggerKeyword.NotesAre)
                return "notes_are";

            if (value == RuleTriggerKeyword.NoNotes)
                return "no_notes";

            if (value == RuleTriggerKeyword.AnyNotes)
                return "any_notes";

            if (value == RuleTriggerKeyword.SourceAccountIs)
                return "source_account_is";

            if (value == RuleTriggerKeyword.DestinationAccountIs)
                return "destination_account_is";

            if (value == RuleTriggerKeyword.SourceAccountStarts)
                return "source_account_starts";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RuleTriggerKeyword"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class RuleTriggerKeywordJsonConverter : JsonConverter<RuleTriggerKeyword>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RuleTriggerKeyword Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RuleTriggerKeyword? result = rawValue == null
                ? null
                : RuleTriggerKeywordValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the RuleTriggerKeyword to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ruleTriggerKeyword"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RuleTriggerKeyword ruleTriggerKeyword, JsonSerializerOptions options)
        {
            writer.WriteStringValue(RuleTriggerKeywordValueConverter.ToJsonValue(ruleTriggerKeyword).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RuleTriggerKeyword"/>
    /// </summary>
    public class RuleTriggerKeywordNullableJsonConverter : JsonConverter<RuleTriggerKeyword?>
    {
        /// <summary>
        /// Returns a RuleTriggerKeyword from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RuleTriggerKeyword? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RuleTriggerKeyword? result = rawValue == null
                ? null
                : RuleTriggerKeywordValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the RuleTriggerKeyword to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ruleTriggerKeyword"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RuleTriggerKeyword? ruleTriggerKeyword, JsonSerializerOptions options)
        {
            writer.WriteStringValue(ruleTriggerKeyword.HasValue ? RuleTriggerKeywordValueConverter.ToJsonValue(ruleTriggerKeyword.Value).ToString() : "null");
        }
    }
}
