// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// RecurrenceRepetitionStore
    /// </summary>
    public partial class RecurrenceRepetitionStore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrenceRepetitionStore" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="moment">Information that defined the type of repetition. - For &#39;daily&#39;, this is empty. - For &#39;weekly&#39;, it is day of the week between 1 and 7 (Monday - Sunday). - For &#39;ndom&#39;, it is &#39;1,2&#39; or &#39;4,5&#39; or something else, where the first number is the week in the month, and the second number is the day in the week (between 1 and 7). &#39;2,3&#39; means: the 2nd Wednesday of the month - For &#39;monthly&#39; it is the day of the month (1 - 31) - For yearly, it is a full date, ie &#39;2025-08-01&#39;. The year you use does not matter. </param>
        /// <param name="skip">How many occurrences to skip. 0 means skip nothing. 1 means every other.</param>
        /// <param name="weekend">How to respond when the recurring transaction falls in the weekend. Possible values: 1. Do nothing, just create it 2. Create no transaction. 3. Skip to the previous Friday. 4. Skip to the next Monday. </param>
        [JsonConstructor]
        public RecurrenceRepetitionStore(RecurrenceRepetitionType type, string moment, Option<int?> skip = default, Option<int?> weekend = default)
        {
            Type = type;
            Moment = moment;
            SkipOption = skip;
            WeekendOption = weekend;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public RecurrenceRepetitionType Type { get; set; }

        /// <summary>
        /// Information that defined the type of repetition. - For &#39;daily&#39;, this is empty. - For &#39;weekly&#39;, it is day of the week between 1 and 7 (Monday - Sunday). - For &#39;ndom&#39;, it is &#39;1,2&#39; or &#39;4,5&#39; or something else, where the first number is the week in the month, and the second number is the day in the week (between 1 and 7). &#39;2,3&#39; means: the 2nd Wednesday of the month - For &#39;monthly&#39; it is the day of the month (1 - 31) - For yearly, it is a full date, ie &#39;2025-08-01&#39;. The year you use does not matter. 
        /// </summary>
        /// <value>Information that defined the type of repetition. - For &#39;daily&#39;, this is empty. - For &#39;weekly&#39;, it is day of the week between 1 and 7 (Monday - Sunday). - For &#39;ndom&#39;, it is &#39;1,2&#39; or &#39;4,5&#39; or something else, where the first number is the week in the month, and the second number is the day in the week (between 1 and 7). &#39;2,3&#39; means: the 2nd Wednesday of the month - For &#39;monthly&#39; it is the day of the month (1 - 31) - For yearly, it is a full date, ie &#39;2025-08-01&#39;. The year you use does not matter. </value>
        /* <example>3</example> */
        [JsonPropertyName("moment")]
        public string Moment { get; set; }

        /// <summary>
        /// Used to track the state of Skip
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SkipOption { get; private set; }

        /// <summary>
        /// How many occurrences to skip. 0 means skip nothing. 1 means every other.
        /// </summary>
        /// <value>How many occurrences to skip. 0 means skip nothing. 1 means every other.</value>
        /* <example>0</example> */
        [JsonPropertyName("skip")]
        public int? Skip { get { return this.SkipOption; } set { this.SkipOption = new(value); } }

        /// <summary>
        /// Used to track the state of Weekend
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WeekendOption { get; private set; }

        /// <summary>
        /// How to respond when the recurring transaction falls in the weekend. Possible values: 1. Do nothing, just create it 2. Create no transaction. 3. Skip to the previous Friday. 4. Skip to the next Monday. 
        /// </summary>
        /// <value>How to respond when the recurring transaction falls in the weekend. Possible values: 1. Do nothing, just create it 2. Create no transaction. 3. Skip to the previous Friday. 4. Skip to the next Monday. </value>
        /* <example>1</example> */
        [JsonPropertyName("weekend")]
        public int? Weekend { get { return this.WeekendOption; } set { this.WeekendOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecurrenceRepetitionStore {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Moment: ").Append(Moment).Append("\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  Weekend: ").Append(Weekend).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RecurrenceRepetitionStore" />
    /// </summary>
    public class RecurrenceRepetitionStoreJsonConverter : JsonConverter<RecurrenceRepetitionStore>
    {
        /// <summary>
        /// Deserializes json to <see cref="RecurrenceRepetitionStore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RecurrenceRepetitionStore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<RecurrenceRepetitionType?> type = default;
            Option<string?> moment = default;
            Option<int?> skip = default;
            Option<int?> weekend = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<RecurrenceRepetitionType?>(RecurrenceRepetitionTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "moment":
                            moment = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "skip":
                            skip = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "weekend":
                            weekend = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class RecurrenceRepetitionStore.", nameof(type));

            if (!moment.IsSet)
                throw new ArgumentException("Property is required for class RecurrenceRepetitionStore.", nameof(moment));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class RecurrenceRepetitionStore.");

            if (moment.IsSet && moment.Value == null)
                throw new ArgumentNullException(nameof(moment), "Property is not nullable for class RecurrenceRepetitionStore.");

            if (skip.IsSet && skip.Value == null)
                throw new ArgumentNullException(nameof(skip), "Property is not nullable for class RecurrenceRepetitionStore.");

            if (weekend.IsSet && weekend.Value == null)
                throw new ArgumentNullException(nameof(weekend), "Property is not nullable for class RecurrenceRepetitionStore.");

            return new RecurrenceRepetitionStore(type.Value!.Value!, moment.Value!, skip, weekend);
        }

        /// <summary>
        /// Serializes a <see cref="RecurrenceRepetitionStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recurrenceRepetitionStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RecurrenceRepetitionStore recurrenceRepetitionStore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, recurrenceRepetitionStore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RecurrenceRepetitionStore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recurrenceRepetitionStore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RecurrenceRepetitionStore recurrenceRepetitionStore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (recurrenceRepetitionStore.Moment == null)
                throw new ArgumentNullException(nameof(recurrenceRepetitionStore.Moment), "Property is required for class RecurrenceRepetitionStore.");

            var typeRawValue = RecurrenceRepetitionTypeValueConverter.ToJsonValue(recurrenceRepetitionStore.Type);
            writer.WriteString("type", typeRawValue);

            writer.WriteString("moment", recurrenceRepetitionStore.Moment);

            if (recurrenceRepetitionStore.SkipOption.IsSet)
                writer.WriteNumber("skip", recurrenceRepetitionStore.SkipOption.Value!.Value);

            if (recurrenceRepetitionStore.WeekendOption.IsSet)
                writer.WriteNumber("weekend", recurrenceRepetitionStore.WeekendOption.Value!.Value);
        }
    }
}
