// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// Title of the configuration value.
    /// </summary>
    /// <value>Title of the configuration value.</value>
    public enum ConfigValueFilter
    {
        /// <summary>
        /// Enum ConfigurationIsDemoSite for value: configuration.is_demo_site
        /// </summary>
        ConfigurationIsDemoSite = 1,

        /// <summary>
        /// Enum ConfigurationPermissionUpdateCheck for value: configuration.permission_update_check
        /// </summary>
        ConfigurationPermissionUpdateCheck = 2,

        /// <summary>
        /// Enum ConfigurationLastUpdateCheck for value: configuration.last_update_check
        /// </summary>
        ConfigurationLastUpdateCheck = 3,

        /// <summary>
        /// Enum ConfigurationSingleUserMode for value: configuration.single_user_mode
        /// </summary>
        ConfigurationSingleUserMode = 4,

        /// <summary>
        /// Enum FireflyVersion for value: firefly.version
        /// </summary>
        FireflyVersion = 5,

        /// <summary>
        /// Enum FireflyDefaultLocation for value: firefly.default_location
        /// </summary>
        FireflyDefaultLocation = 6,

        /// <summary>
        /// Enum FireflyAccountToTransaction for value: firefly.account_to_transaction
        /// </summary>
        FireflyAccountToTransaction = 7,

        /// <summary>
        /// Enum FireflyAllowedOpposingTypes for value: firefly.allowed_opposing_types
        /// </summary>
        FireflyAllowedOpposingTypes = 8,

        /// <summary>
        /// Enum FireflyAccountRoles for value: firefly.accountRoles
        /// </summary>
        FireflyAccountRoles = 9,

        /// <summary>
        /// Enum FireflyValidLiabilities for value: firefly.valid_liabilities
        /// </summary>
        FireflyValidLiabilities = 10,

        /// <summary>
        /// Enum FireflyInterestPeriods for value: firefly.interest_periods
        /// </summary>
        FireflyInterestPeriods = 11,

        /// <summary>
        /// Enum FireflyEnableExternalMap for value: firefly.enable_external_map
        /// </summary>
        FireflyEnableExternalMap = 12,

        /// <summary>
        /// Enum FireflyExpectedSourceTypes for value: firefly.expected_source_types
        /// </summary>
        FireflyExpectedSourceTypes = 13,

        /// <summary>
        /// Enum AppTimezone for value: app.timezone
        /// </summary>
        AppTimezone = 14,

        /// <summary>
        /// Enum FireflyBillPeriods for value: firefly.bill_periods
        /// </summary>
        FireflyBillPeriods = 15,

        /// <summary>
        /// Enum FireflyCreditCardTypes for value: firefly.credit_card_types
        /// </summary>
        FireflyCreditCardTypes = 16,

        /// <summary>
        /// Enum FireflyLanguages for value: firefly.languages
        /// </summary>
        FireflyLanguages = 17,

        /// <summary>
        /// Enum FireflyValidViewRanges for value: firefly.valid_view_ranges
        /// </summary>
        FireflyValidViewRanges = 18
    }

    /// <summary>
    /// Converts <see cref="ConfigValueFilter"/> to and from the JSON value
    /// </summary>
    public static class ConfigValueFilterValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ConfigValueFilter"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConfigValueFilter FromString(string value)
        {
            if (value.Equals("configuration.is_demo_site"))
                return ConfigValueFilter.ConfigurationIsDemoSite;

            if (value.Equals("configuration.permission_update_check"))
                return ConfigValueFilter.ConfigurationPermissionUpdateCheck;

            if (value.Equals("configuration.last_update_check"))
                return ConfigValueFilter.ConfigurationLastUpdateCheck;

            if (value.Equals("configuration.single_user_mode"))
                return ConfigValueFilter.ConfigurationSingleUserMode;

            if (value.Equals("firefly.version"))
                return ConfigValueFilter.FireflyVersion;

            if (value.Equals("firefly.default_location"))
                return ConfigValueFilter.FireflyDefaultLocation;

            if (value.Equals("firefly.account_to_transaction"))
                return ConfigValueFilter.FireflyAccountToTransaction;

            if (value.Equals("firefly.allowed_opposing_types"))
                return ConfigValueFilter.FireflyAllowedOpposingTypes;

            if (value.Equals("firefly.accountRoles"))
                return ConfigValueFilter.FireflyAccountRoles;

            if (value.Equals("firefly.valid_liabilities"))
                return ConfigValueFilter.FireflyValidLiabilities;

            if (value.Equals("firefly.interest_periods"))
                return ConfigValueFilter.FireflyInterestPeriods;

            if (value.Equals("firefly.enable_external_map"))
                return ConfigValueFilter.FireflyEnableExternalMap;

            if (value.Equals("firefly.expected_source_types"))
                return ConfigValueFilter.FireflyExpectedSourceTypes;

            if (value.Equals("app.timezone"))
                return ConfigValueFilter.AppTimezone;

            if (value.Equals("firefly.bill_periods"))
                return ConfigValueFilter.FireflyBillPeriods;

            if (value.Equals("firefly.credit_card_types"))
                return ConfigValueFilter.FireflyCreditCardTypes;

            if (value.Equals("firefly.languages"))
                return ConfigValueFilter.FireflyLanguages;

            if (value.Equals("firefly.valid_view_ranges"))
                return ConfigValueFilter.FireflyValidViewRanges;

            throw new NotImplementedException($"Could not convert value to type ConfigValueFilter: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ConfigValueFilter"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConfigValueFilter? FromStringOrDefault(string value)
        {
            if (value.Equals("configuration.is_demo_site"))
                return ConfigValueFilter.ConfigurationIsDemoSite;

            if (value.Equals("configuration.permission_update_check"))
                return ConfigValueFilter.ConfigurationPermissionUpdateCheck;

            if (value.Equals("configuration.last_update_check"))
                return ConfigValueFilter.ConfigurationLastUpdateCheck;

            if (value.Equals("configuration.single_user_mode"))
                return ConfigValueFilter.ConfigurationSingleUserMode;

            if (value.Equals("firefly.version"))
                return ConfigValueFilter.FireflyVersion;

            if (value.Equals("firefly.default_location"))
                return ConfigValueFilter.FireflyDefaultLocation;

            if (value.Equals("firefly.account_to_transaction"))
                return ConfigValueFilter.FireflyAccountToTransaction;

            if (value.Equals("firefly.allowed_opposing_types"))
                return ConfigValueFilter.FireflyAllowedOpposingTypes;

            if (value.Equals("firefly.accountRoles"))
                return ConfigValueFilter.FireflyAccountRoles;

            if (value.Equals("firefly.valid_liabilities"))
                return ConfigValueFilter.FireflyValidLiabilities;

            if (value.Equals("firefly.interest_periods"))
                return ConfigValueFilter.FireflyInterestPeriods;

            if (value.Equals("firefly.enable_external_map"))
                return ConfigValueFilter.FireflyEnableExternalMap;

            if (value.Equals("firefly.expected_source_types"))
                return ConfigValueFilter.FireflyExpectedSourceTypes;

            if (value.Equals("app.timezone"))
                return ConfigValueFilter.AppTimezone;

            if (value.Equals("firefly.bill_periods"))
                return ConfigValueFilter.FireflyBillPeriods;

            if (value.Equals("firefly.credit_card_types"))
                return ConfigValueFilter.FireflyCreditCardTypes;

            if (value.Equals("firefly.languages"))
                return ConfigValueFilter.FireflyLanguages;

            if (value.Equals("firefly.valid_view_ranges"))
                return ConfigValueFilter.FireflyValidViewRanges;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ConfigValueFilter"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ConfigValueFilter value)
        {
            if (value == ConfigValueFilter.ConfigurationIsDemoSite)
                return "configuration.is_demo_site";

            if (value == ConfigValueFilter.ConfigurationPermissionUpdateCheck)
                return "configuration.permission_update_check";

            if (value == ConfigValueFilter.ConfigurationLastUpdateCheck)
                return "configuration.last_update_check";

            if (value == ConfigValueFilter.ConfigurationSingleUserMode)
                return "configuration.single_user_mode";

            if (value == ConfigValueFilter.FireflyVersion)
                return "firefly.version";

            if (value == ConfigValueFilter.FireflyDefaultLocation)
                return "firefly.default_location";

            if (value == ConfigValueFilter.FireflyAccountToTransaction)
                return "firefly.account_to_transaction";

            if (value == ConfigValueFilter.FireflyAllowedOpposingTypes)
                return "firefly.allowed_opposing_types";

            if (value == ConfigValueFilter.FireflyAccountRoles)
                return "firefly.accountRoles";

            if (value == ConfigValueFilter.FireflyValidLiabilities)
                return "firefly.valid_liabilities";

            if (value == ConfigValueFilter.FireflyInterestPeriods)
                return "firefly.interest_periods";

            if (value == ConfigValueFilter.FireflyEnableExternalMap)
                return "firefly.enable_external_map";

            if (value == ConfigValueFilter.FireflyExpectedSourceTypes)
                return "firefly.expected_source_types";

            if (value == ConfigValueFilter.AppTimezone)
                return "app.timezone";

            if (value == ConfigValueFilter.FireflyBillPeriods)
                return "firefly.bill_periods";

            if (value == ConfigValueFilter.FireflyCreditCardTypes)
                return "firefly.credit_card_types";

            if (value == ConfigValueFilter.FireflyLanguages)
                return "firefly.languages";

            if (value == ConfigValueFilter.FireflyValidViewRanges)
                return "firefly.valid_view_ranges";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConfigValueFilter"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ConfigValueFilterJsonConverter : JsonConverter<ConfigValueFilter>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ConfigValueFilter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ConfigValueFilter? result = rawValue == null
                ? null
                : ConfigValueFilterValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ConfigValueFilter to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="configValueFilter"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ConfigValueFilter configValueFilter, JsonSerializerOptions options)
        {
            writer.WriteStringValue(ConfigValueFilterValueConverter.ToJsonValue(configValueFilter).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConfigValueFilter"/>
    /// </summary>
    public class ConfigValueFilterNullableJsonConverter : JsonConverter<ConfigValueFilter?>
    {
        /// <summary>
        /// Returns a ConfigValueFilter from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ConfigValueFilter? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ConfigValueFilter? result = rawValue == null
                ? null
                : ConfigValueFilterValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ConfigValueFilter to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="configValueFilter"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ConfigValueFilter? configValueFilter, JsonSerializerOptions options)
        {
            writer.WriteStringValue(configValueFilter.HasValue ? ConfigValueFilterValueConverter.ToJsonValue(configValueFilter.Value).ToString() : "null");
        }
    }
}
