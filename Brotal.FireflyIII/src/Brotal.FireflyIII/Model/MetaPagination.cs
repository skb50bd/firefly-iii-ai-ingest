// <auto-generated>
/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Brotal.FireflyIII.Client;

namespace Brotal.FireflyIII.Model
{
    /// <summary>
    /// MetaPagination
    /// </summary>
    public partial class MetaPagination : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetaPagination" /> class.
        /// </summary>
        /// <param name="total">total</param>
        /// <param name="count">count</param>
        /// <param name="perPage">perPage</param>
        /// <param name="currentPage">currentPage</param>
        /// <param name="totalPages">totalPages</param>
        [JsonConstructor]
        public MetaPagination(Option<int?> total = default, Option<int?> count = default, Option<int?> perPage = default, Option<int?> currentPage = default, Option<int?> totalPages = default)
        {
            TotalOption = total;
            CountOption = count;
            PerPageOption = perPage;
            CurrentPageOption = currentPage;
            TotalPagesOption = totalPages;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Total
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalOption { get; private set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        /* <example>3</example> */
        [JsonPropertyName("total")]
        public int? Total { get { return this.TotalOption; } set { this.TotalOption = new(value); } }

        /// <summary>
        /// Used to track the state of Count
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CountOption { get; private set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        /* <example>20</example> */
        [JsonPropertyName("count")]
        public int? Count { get { return this.CountOption; } set { this.CountOption = new(value); } }

        /// <summary>
        /// Used to track the state of PerPage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PerPageOption { get; private set; }

        /// <summary>
        /// Gets or Sets PerPage
        /// </summary>
        /* <example>100</example> */
        [JsonPropertyName("per_page")]
        public int? PerPage { get { return this.PerPageOption; } set { this.PerPageOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrentPage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CurrentPageOption { get; private set; }

        /// <summary>
        /// Gets or Sets CurrentPage
        /// </summary>
        /* <example>1</example> */
        [JsonPropertyName("current_page")]
        public int? CurrentPage { get { return this.CurrentPageOption; } set { this.CurrentPageOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalPages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalPagesOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalPages
        /// </summary>
        /* <example>1</example> */
        [JsonPropertyName("total_pages")]
        public int? TotalPages { get { return this.TotalPagesOption; } set { this.TotalPagesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetaPagination {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  PerPage: ").Append(PerPage).Append("\n");
            sb.Append("  CurrentPage: ").Append(CurrentPage).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MetaPagination" />
    /// </summary>
    public class MetaPaginationJsonConverter : JsonConverter<MetaPagination>
    {
        /// <summary>
        /// Deserializes json to <see cref="MetaPagination" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MetaPagination Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> total = default;
            Option<int?> count = default;
            Option<int?> perPage = default;
            Option<int?> currentPage = default;
            Option<int?> totalPages = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "count":
                            count = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "per_page":
                            perPage = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "current_page":
                            currentPage = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "total_pages":
                            totalPages = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class MetaPagination.");

            if (count.IsSet && count.Value == null)
                throw new ArgumentNullException(nameof(count), "Property is not nullable for class MetaPagination.");

            if (perPage.IsSet && perPage.Value == null)
                throw new ArgumentNullException(nameof(perPage), "Property is not nullable for class MetaPagination.");

            if (currentPage.IsSet && currentPage.Value == null)
                throw new ArgumentNullException(nameof(currentPage), "Property is not nullable for class MetaPagination.");

            if (totalPages.IsSet && totalPages.Value == null)
                throw new ArgumentNullException(nameof(totalPages), "Property is not nullable for class MetaPagination.");

            return new MetaPagination(total, count, perPage, currentPage, totalPages);
        }

        /// <summary>
        /// Serializes a <see cref="MetaPagination" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="metaPagination"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MetaPagination metaPagination, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, metaPagination, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MetaPagination" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="metaPagination"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MetaPagination metaPagination, JsonSerializerOptions jsonSerializerOptions)
        {
            if (metaPagination.TotalOption.IsSet)
                writer.WriteNumber("total", metaPagination.TotalOption.Value!.Value);

            if (metaPagination.CountOption.IsSet)
                writer.WriteNumber("count", metaPagination.CountOption.Value!.Value);

            if (metaPagination.PerPageOption.IsSet)
                writer.WriteNumber("per_page", metaPagination.PerPageOption.Value!.Value);

            if (metaPagination.CurrentPageOption.IsSet)
                writer.WriteNumber("current_page", metaPagination.CurrentPageOption.Value!.Value);

            if (metaPagination.TotalPagesOption.IsSet)
                writer.WriteNumber("total_pages", metaPagination.TotalPagesOption.Value!.Value);
        }
    }
}
