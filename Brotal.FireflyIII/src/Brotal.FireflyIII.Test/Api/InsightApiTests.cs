/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Brotal.FireflyIII.Api;
using Brotal.FireflyIII.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Brotal.FireflyIII.Test.Api
{
    /// <summary>
    ///  Class for testing InsightApi
    /// </summary>
    public sealed class InsightApiTests : ApiTestsBase
    {
        private readonly IInsightApi _instance;

        public InsightApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IInsightApi>();
        }

        /// <summary>
        /// Test InsightExpenseAsset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightExpenseAssetAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightExpenseAssetAsync(start, end, xTraceId, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightExpenseBill
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightExpenseBillAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> bills = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightExpenseBillAsync(start, end, xTraceId, bills, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightExpenseBudget
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightExpenseBudgetAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> budgets = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightExpenseBudgetAsync(start, end, xTraceId, budgets, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightExpenseCategory
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightExpenseCategoryAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> categories = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightExpenseCategoryAsync(start, end, xTraceId, categories, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightExpenseExpense
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightExpenseExpenseAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightExpenseExpenseAsync(start, end, xTraceId, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightExpenseNoBill
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightExpenseNoBillAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightExpenseNoBillAsync(start, end, xTraceId, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightExpenseNoBudget
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightExpenseNoBudgetAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightExpenseNoBudgetAsync(start, end, xTraceId, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightExpenseNoCategory
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightExpenseNoCategoryAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightExpenseNoCategoryAsync(start, end, xTraceId, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightExpenseNoTag
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightExpenseNoTagAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightExpenseNoTagAsync(start, end, xTraceId, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightExpenseTag
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightExpenseTagAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> tags = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightExpenseTagAsync(start, end, xTraceId, tags, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightExpenseTotal
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightExpenseTotalAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightExpenseTotalAsync(start, end, xTraceId, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightIncomeAsset
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightIncomeAssetAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightIncomeAssetAsync(start, end, xTraceId, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightIncomeCategory
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightIncomeCategoryAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> categories = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightIncomeCategoryAsync(start, end, xTraceId, categories, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightIncomeNoCategory
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightIncomeNoCategoryAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightIncomeNoCategoryAsync(start, end, xTraceId, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightIncomeNoTag
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightIncomeNoTagAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightIncomeNoTagAsync(start, end, xTraceId, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightIncomeRevenue
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightIncomeRevenueAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightIncomeRevenueAsync(start, end, xTraceId, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightIncomeTag
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightIncomeTagAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> tags = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightIncomeTagAsync(start, end, xTraceId, tags, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightIncomeTotal
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightIncomeTotalAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightIncomeTotalAsync(start, end, xTraceId, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightTransferCategory
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightTransferCategoryAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> categories = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightTransferCategoryAsync(start, end, xTraceId, categories, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightTransferNoCategory
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightTransferNoCategoryAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightTransferNoCategoryAsync(start, end, xTraceId, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightTransferNoTag
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightTransferNoTagAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightTransferNoTagAsync(start, end, xTraceId, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightTransferTag
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightTransferTagAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> tags = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightTransferTagAsync(start, end, xTraceId, tags, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightTransferTotal
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightTransferTotalAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightTransferTotalAsync(start, end, xTraceId, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test InsightTransfers
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task InsightTransfersAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.InsightTransfersAsync(start, end, xTraceId, accounts);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }
    }
}
