/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Brotal.FireflyIII.Api;
using Brotal.FireflyIII.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Brotal.FireflyIII.Test.Api
{
    /// <summary>
    ///  Class for testing ChartsApi
    /// </summary>
    public sealed class ChartsApiTests : ApiTestsBase
    {
        private readonly IChartsApi _instance;

        public ChartsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IChartsApi>();
        }

        /// <summary>
        /// Test GetChartAccountOverview
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetChartAccountOverviewAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            var response = await _instance.GetChartAccountOverviewAsync(start, end, xTraceId);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test GetChartBalance
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetChartBalanceAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            var response = await _instance.GetChartBalanceAsync(start, end, xTraceId);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test GetChartBudgetOverview
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetChartBudgetOverviewAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            var response = await _instance.GetChartBudgetOverviewAsync(start, end, xTraceId);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }

        /// <summary>
        /// Test GetChartCategoryOverview
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetChartCategoryOverviewAsyncTest()
        {
            DateOnly start = default!;
            DateOnly end = default!;
            Client.Option<Guid> xTraceId = default!;
            var response = await _instance.GetChartCategoryOverviewAsync(start, end, xTraceId);
            var model = response.Unauthorized();
            Assert.IsType<UnauthenticatedResponse>(model);
        }
    }
}
