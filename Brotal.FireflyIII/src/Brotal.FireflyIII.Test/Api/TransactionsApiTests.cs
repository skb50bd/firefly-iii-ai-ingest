/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Brotal.FireflyIII.Api;
using Brotal.FireflyIII.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Brotal.FireflyIII.Test.Api
{
    /// <summary>
    ///  Class for testing TransactionsApi
    /// </summary>
    public sealed class TransactionsApiTests : ApiTestsBase
    {
        private readonly ITransactionsApi _instance;

        public TransactionsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ITransactionsApi>();
        }

        /// <summary>
        /// Test DeleteTransaction
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteTransactionAsyncTest()
        {
            string id = default!;
            Client.Option<Guid> xTraceId = default!;
            await _instance.DeleteTransactionAsync(id, xTraceId);
        }

        /// <summary>
        /// Test DeleteTransactionJournal
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteTransactionJournalAsyncTest()
        {
            string id = default!;
            Client.Option<Guid> xTraceId = default!;
            await _instance.DeleteTransactionJournalAsync(id, xTraceId);
        }

        /// <summary>
        /// Test GetTransaction
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTransactionAsyncTest()
        {
            string id = default!;
            Client.Option<Guid> xTraceId = default!;
            var response = await _instance.GetTransactionAsync(id, xTraceId);
            var model = response.Ok();
            Assert.IsType<TransactionSingle>(model);
        }

        /// <summary>
        /// Test GetTransactionByJournal
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetTransactionByJournalAsyncTest()
        {
            string id = default!;
            Client.Option<Guid> xTraceId = default!;
            var response = await _instance.GetTransactionByJournalAsync(id, xTraceId);
            var model = response.Ok();
            Assert.IsType<TransactionSingle>(model);
        }

        /// <summary>
        /// Test ListAttachmentByTransaction
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListAttachmentByTransactionAsyncTest()
        {
            string id = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<int> limit = default!;
            Client.Option<int> page = default!;
            var response = await _instance.ListAttachmentByTransactionAsync(id, xTraceId, limit, page);
            var model = response.Ok();
            Assert.IsType<AttachmentArray>(model);
        }

        /// <summary>
        /// Test ListEventByTransaction
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListEventByTransactionAsyncTest()
        {
            string id = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<int> limit = default!;
            Client.Option<int> page = default!;
            var response = await _instance.ListEventByTransactionAsync(id, xTraceId, limit, page);
            var model = response.Ok();
            Assert.IsType<PiggyBankEventArray>(model);
        }

        /// <summary>
        /// Test ListLinksByJournal
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListLinksByJournalAsyncTest()
        {
            string id = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<int> limit = default!;
            Client.Option<int> page = default!;
            var response = await _instance.ListLinksByJournalAsync(id, xTraceId, limit, page);
            var model = response.Ok();
            Assert.IsType<TransactionLinkArray>(model);
        }

        /// <summary>
        /// Test ListTransaction
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListTransactionAsyncTest()
        {
            Client.Option<Guid> xTraceId = default!;
            Client.Option<int> limit = default!;
            Client.Option<int> page = default!;
            Client.Option<DateOnly> start = default!;
            Client.Option<DateOnly> end = default!;
            Client.Option<TransactionTypeFilter> type = default!;
            var response = await _instance.ListTransactionAsync(xTraceId, limit, page, start, end, type);
            var model = response.Ok();
            Assert.IsType<TransactionArray>(model);
        }

        /// <summary>
        /// Test StoreTransaction
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task StoreTransactionAsyncTest()
        {
            TransactionStore transactionStore = default!;
            Client.Option<Guid> xTraceId = default!;
            var response = await _instance.StoreTransactionAsync(transactionStore, xTraceId);
            var model = response.Ok();
            Assert.IsType<TransactionSingle>(model);
        }

        /// <summary>
        /// Test UpdateTransaction
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateTransactionAsyncTest()
        {
            string id = default!;
            TransactionUpdate transactionUpdate = default!;
            Client.Option<Guid> xTraceId = default!;
            var response = await _instance.UpdateTransactionAsync(id, transactionUpdate, xTraceId);
            var model = response.Ok();
            Assert.IsType<TransactionSingle>(model);
        }
    }
}
