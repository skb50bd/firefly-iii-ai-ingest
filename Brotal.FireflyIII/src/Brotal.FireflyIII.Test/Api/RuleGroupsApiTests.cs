/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Brotal.FireflyIII.Api;
using Brotal.FireflyIII.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Brotal.FireflyIII.Test.Api
{
    /// <summary>
    ///  Class for testing RuleGroupsApi
    /// </summary>
    public sealed class RuleGroupsApiTests : ApiTestsBase
    {
        private readonly IRuleGroupsApi _instance;

        public RuleGroupsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IRuleGroupsApi>();
        }

        /// <summary>
        /// Test DeleteRuleGroup
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteRuleGroupAsyncTest()
        {
            string id = default!;
            Client.Option<Guid> xTraceId = default!;
            await _instance.DeleteRuleGroupAsync(id, xTraceId);
        }

        /// <summary>
        /// Test FireRuleGroup
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task FireRuleGroupAsyncTest()
        {
            string id = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<DateOnly> start = default!;
            Client.Option<DateOnly> end = default!;
            Client.Option<List<long>> accounts = default!;
            await _instance.FireRuleGroupAsync(id, xTraceId, start, end, accounts);
        }

        /// <summary>
        /// Test GetRuleGroup
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetRuleGroupAsyncTest()
        {
            string id = default!;
            Client.Option<Guid> xTraceId = default!;
            var response = await _instance.GetRuleGroupAsync(id, xTraceId);
            var model = response.Ok();
            Assert.IsType<RuleGroupSingle>(model);
        }

        /// <summary>
        /// Test ListRuleByGroup
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListRuleByGroupAsyncTest()
        {
            string id = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<int> limit = default!;
            Client.Option<int> page = default!;
            var response = await _instance.ListRuleByGroupAsync(id, xTraceId, limit, page);
            var model = response.Ok();
            Assert.IsType<RuleArray>(model);
        }

        /// <summary>
        /// Test ListRuleGroup
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListRuleGroupAsyncTest()
        {
            Client.Option<Guid> xTraceId = default!;
            Client.Option<int> limit = default!;
            Client.Option<int> page = default!;
            var response = await _instance.ListRuleGroupAsync(xTraceId, limit, page);
            var model = response.Ok();
            Assert.IsType<RuleGroupArray>(model);
        }

        /// <summary>
        /// Test StoreRuleGroup
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task StoreRuleGroupAsyncTest()
        {
            RuleGroupStore ruleGroupStore = default!;
            Client.Option<Guid> xTraceId = default!;
            var response = await _instance.StoreRuleGroupAsync(ruleGroupStore, xTraceId);
            var model = response.Ok();
            Assert.IsType<RuleGroupSingle>(model);
        }

        /// <summary>
        /// Test TestRuleGroup
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TestRuleGroupAsyncTest()
        {
            string id = default!;
            Client.Option<Guid> xTraceId = default!;
            Client.Option<int> limit = default!;
            Client.Option<int> page = default!;
            Client.Option<DateOnly> start = default!;
            Client.Option<DateOnly> end = default!;
            Client.Option<int> searchLimit = default!;
            Client.Option<int> triggeredLimit = default!;
            Client.Option<List<long>> accounts = default!;
            var response = await _instance.TestRuleGroupAsync(id, xTraceId, limit, page, start, end, searchLimit, triggeredLimit, accounts);
            var model = response.Ok();
            Assert.IsType<TransactionArray>(model);
        }

        /// <summary>
        /// Test UpdateRuleGroup
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateRuleGroupAsyncTest()
        {
            string id = default!;
            RuleGroupUpdate ruleGroupUpdate = default!;
            Client.Option<Guid> xTraceId = default!;
            var response = await _instance.UpdateRuleGroupAsync(id, ruleGroupUpdate, xTraceId);
            var model = response.Ok();
            Assert.IsType<RuleGroupSingle>(model);
        }
    }
}
