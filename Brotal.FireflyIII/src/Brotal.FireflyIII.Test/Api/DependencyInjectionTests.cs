/*
 * Firefly III API v6.3.0
 *
 * This is the documentation of the Firefly III API. Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. <br><br> Please keep in mind that the demo site does **not** accept requests from `curl`, `colly`, `wget`, etc. You must use a browser or a tool like Insomnia to make your test requests. <br><br> To learn more about the idiosyncrasies of this API, please read about the API in the [Firefly III API documentation](https://docs.firefly-iii.org/references/firefly-iii/api/). <br><br> <small>This file was last generated on 2025-08-16 @ 20:21:49 (Europe/Amsterdam)</small> 
 *
 * The version of the OpenAPI document: v6.3.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using Brotal.FireflyIII.Client;
using Brotal.FireflyIII.Api;
using Brotal.FireflyIII.Extensions;
using Xunit;

namespace Brotal.FireflyIII.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken1);

                OAuthToken oauthToken1 = new("token", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(oauthToken1);
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken1);

                OAuthToken oauthToken = new("token", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(oauthToken);
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken1);

                    OAuthToken oauthToken1 = new("token", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(oauthToken1);
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken1);

                    OAuthToken oauthToken1 = new("token", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(oauthToken1);
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var aboutApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAboutApi>();
            Assert.True(aboutApi.HttpClient.BaseAddress != null);

            var accountsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAccountsApi>();
            Assert.True(accountsApi.HttpClient.BaseAddress != null);

            var attachmentsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAttachmentsApi>();
            Assert.True(attachmentsApi.HttpClient.BaseAddress != null);

            var autocompleteApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAutocompleteApi>();
            Assert.True(autocompleteApi.HttpClient.BaseAddress != null);

            var availableBudgetsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAvailableBudgetsApi>();
            Assert.True(availableBudgetsApi.HttpClient.BaseAddress != null);

            var billsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IBillsApi>();
            Assert.True(billsApi.HttpClient.BaseAddress != null);

            var budgetsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IBudgetsApi>();
            Assert.True(budgetsApi.HttpClient.BaseAddress != null);

            var categoriesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICategoriesApi>();
            Assert.True(categoriesApi.HttpClient.BaseAddress != null);

            var chartsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IChartsApi>();
            Assert.True(chartsApi.HttpClient.BaseAddress != null);

            var configurationApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IConfigurationApi>();
            Assert.True(configurationApi.HttpClient.BaseAddress != null);

            var currenciesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICurrenciesApi>();
            Assert.True(currenciesApi.HttpClient.BaseAddress != null);

            var currencyExchangeRatesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICurrencyExchangeRatesApi>();
            Assert.True(currencyExchangeRatesApi.HttpClient.BaseAddress != null);

            var dataApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IDataApi>();
            Assert.True(dataApi.HttpClient.BaseAddress != null);

            var insightApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IInsightApi>();
            Assert.True(insightApi.HttpClient.BaseAddress != null);

            var linksApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ILinksApi>();
            Assert.True(linksApi.HttpClient.BaseAddress != null);

            var objectGroupsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IObjectGroupsApi>();
            Assert.True(objectGroupsApi.HttpClient.BaseAddress != null);

            var piggyBanksApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPiggyBanksApi>();
            Assert.True(piggyBanksApi.HttpClient.BaseAddress != null);

            var preferencesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPreferencesApi>();
            Assert.True(preferencesApi.HttpClient.BaseAddress != null);

            var recurrencesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IRecurrencesApi>();
            Assert.True(recurrencesApi.HttpClient.BaseAddress != null);

            var ruleGroupsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IRuleGroupsApi>();
            Assert.True(ruleGroupsApi.HttpClient.BaseAddress != null);

            var rulesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IRulesApi>();
            Assert.True(rulesApi.HttpClient.BaseAddress != null);

            var searchApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISearchApi>();
            Assert.True(searchApi.HttpClient.BaseAddress != null);

            var summaryApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISummaryApi>();
            Assert.True(summaryApi.HttpClient.BaseAddress != null);

            var tagsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ITagsApi>();
            Assert.True(tagsApi.HttpClient.BaseAddress != null);

            var transactionsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ITransactionsApi>();
            Assert.True(transactionsApi.HttpClient.BaseAddress != null);

            var userGroupsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IUserGroupsApi>();
            Assert.True(userGroupsApi.HttpClient.BaseAddress != null);

            var usersApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);

            var webhooksApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IWebhooksApi>();
            Assert.True(webhooksApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var aboutApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAboutApi>();
            Assert.True(aboutApi.HttpClient.BaseAddress != null);

            var accountsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAccountsApi>();
            Assert.True(accountsApi.HttpClient.BaseAddress != null);

            var attachmentsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAttachmentsApi>();
            Assert.True(attachmentsApi.HttpClient.BaseAddress != null);

            var autocompleteApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAutocompleteApi>();
            Assert.True(autocompleteApi.HttpClient.BaseAddress != null);

            var availableBudgetsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAvailableBudgetsApi>();
            Assert.True(availableBudgetsApi.HttpClient.BaseAddress != null);

            var billsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IBillsApi>();
            Assert.True(billsApi.HttpClient.BaseAddress != null);

            var budgetsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IBudgetsApi>();
            Assert.True(budgetsApi.HttpClient.BaseAddress != null);

            var categoriesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICategoriesApi>();
            Assert.True(categoriesApi.HttpClient.BaseAddress != null);

            var chartsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IChartsApi>();
            Assert.True(chartsApi.HttpClient.BaseAddress != null);

            var configurationApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IConfigurationApi>();
            Assert.True(configurationApi.HttpClient.BaseAddress != null);

            var currenciesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICurrenciesApi>();
            Assert.True(currenciesApi.HttpClient.BaseAddress != null);

            var currencyExchangeRatesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICurrencyExchangeRatesApi>();
            Assert.True(currencyExchangeRatesApi.HttpClient.BaseAddress != null);

            var dataApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IDataApi>();
            Assert.True(dataApi.HttpClient.BaseAddress != null);

            var insightApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IInsightApi>();
            Assert.True(insightApi.HttpClient.BaseAddress != null);

            var linksApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ILinksApi>();
            Assert.True(linksApi.HttpClient.BaseAddress != null);

            var objectGroupsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IObjectGroupsApi>();
            Assert.True(objectGroupsApi.HttpClient.BaseAddress != null);

            var piggyBanksApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPiggyBanksApi>();
            Assert.True(piggyBanksApi.HttpClient.BaseAddress != null);

            var preferencesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPreferencesApi>();
            Assert.True(preferencesApi.HttpClient.BaseAddress != null);

            var recurrencesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IRecurrencesApi>();
            Assert.True(recurrencesApi.HttpClient.BaseAddress != null);

            var ruleGroupsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IRuleGroupsApi>();
            Assert.True(ruleGroupsApi.HttpClient.BaseAddress != null);

            var rulesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IRulesApi>();
            Assert.True(rulesApi.HttpClient.BaseAddress != null);

            var searchApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISearchApi>();
            Assert.True(searchApi.HttpClient.BaseAddress != null);

            var summaryApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISummaryApi>();
            Assert.True(summaryApi.HttpClient.BaseAddress != null);

            var tagsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ITagsApi>();
            Assert.True(tagsApi.HttpClient.BaseAddress != null);

            var transactionsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ITransactionsApi>();
            Assert.True(transactionsApi.HttpClient.BaseAddress != null);

            var userGroupsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IUserGroupsApi>();
            Assert.True(userGroupsApi.HttpClient.BaseAddress != null);

            var usersApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);

            var webhooksApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IWebhooksApi>();
            Assert.True(webhooksApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var aboutApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAboutApi>();
            Assert.True(aboutApi.HttpClient.BaseAddress != null);
            
            var accountsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAccountsApi>();
            Assert.True(accountsApi.HttpClient.BaseAddress != null);
            
            var attachmentsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAttachmentsApi>();
            Assert.True(attachmentsApi.HttpClient.BaseAddress != null);
            
            var autocompleteApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAutocompleteApi>();
            Assert.True(autocompleteApi.HttpClient.BaseAddress != null);
            
            var availableBudgetsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAvailableBudgetsApi>();
            Assert.True(availableBudgetsApi.HttpClient.BaseAddress != null);
            
            var billsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IBillsApi>();
            Assert.True(billsApi.HttpClient.BaseAddress != null);
            
            var budgetsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IBudgetsApi>();
            Assert.True(budgetsApi.HttpClient.BaseAddress != null);
            
            var categoriesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICategoriesApi>();
            Assert.True(categoriesApi.HttpClient.BaseAddress != null);
            
            var chartsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IChartsApi>();
            Assert.True(chartsApi.HttpClient.BaseAddress != null);
            
            var configurationApi = _hostUsingAddWithAClient.Services.GetRequiredService<IConfigurationApi>();
            Assert.True(configurationApi.HttpClient.BaseAddress != null);
            
            var currenciesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICurrenciesApi>();
            Assert.True(currenciesApi.HttpClient.BaseAddress != null);
            
            var currencyExchangeRatesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICurrencyExchangeRatesApi>();
            Assert.True(currencyExchangeRatesApi.HttpClient.BaseAddress != null);
            
            var dataApi = _hostUsingAddWithAClient.Services.GetRequiredService<IDataApi>();
            Assert.True(dataApi.HttpClient.BaseAddress != null);
            
            var insightApi = _hostUsingAddWithAClient.Services.GetRequiredService<IInsightApi>();
            Assert.True(insightApi.HttpClient.BaseAddress != null);
            
            var linksApi = _hostUsingAddWithAClient.Services.GetRequiredService<ILinksApi>();
            Assert.True(linksApi.HttpClient.BaseAddress != null);
            
            var objectGroupsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IObjectGroupsApi>();
            Assert.True(objectGroupsApi.HttpClient.BaseAddress != null);
            
            var piggyBanksApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPiggyBanksApi>();
            Assert.True(piggyBanksApi.HttpClient.BaseAddress != null);
            
            var preferencesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPreferencesApi>();
            Assert.True(preferencesApi.HttpClient.BaseAddress != null);
            
            var recurrencesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IRecurrencesApi>();
            Assert.True(recurrencesApi.HttpClient.BaseAddress != null);
            
            var ruleGroupsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IRuleGroupsApi>();
            Assert.True(ruleGroupsApi.HttpClient.BaseAddress != null);
            
            var rulesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IRulesApi>();
            Assert.True(rulesApi.HttpClient.BaseAddress != null);
            
            var searchApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISearchApi>();
            Assert.True(searchApi.HttpClient.BaseAddress != null);
            
            var summaryApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISummaryApi>();
            Assert.True(summaryApi.HttpClient.BaseAddress != null);
            
            var tagsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ITagsApi>();
            Assert.True(tagsApi.HttpClient.BaseAddress != null);
            
            var transactionsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ITransactionsApi>();
            Assert.True(transactionsApi.HttpClient.BaseAddress != null);
            
            var userGroupsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IUserGroupsApi>();
            Assert.True(userGroupsApi.HttpClient.BaseAddress != null);
            
            var usersApi = _hostUsingAddWithAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);
            
            var webhooksApi = _hostUsingAddWithAClient.Services.GetRequiredService<IWebhooksApi>();
            Assert.True(webhooksApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var aboutApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAboutApi>();
            Assert.True(aboutApi.HttpClient.BaseAddress != null);

            var accountsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAccountsApi>();
            Assert.True(accountsApi.HttpClient.BaseAddress != null);

            var attachmentsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAttachmentsApi>();
            Assert.True(attachmentsApi.HttpClient.BaseAddress != null);

            var autocompleteApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAutocompleteApi>();
            Assert.True(autocompleteApi.HttpClient.BaseAddress != null);

            var availableBudgetsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAvailableBudgetsApi>();
            Assert.True(availableBudgetsApi.HttpClient.BaseAddress != null);

            var billsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IBillsApi>();
            Assert.True(billsApi.HttpClient.BaseAddress != null);

            var budgetsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IBudgetsApi>();
            Assert.True(budgetsApi.HttpClient.BaseAddress != null);

            var categoriesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICategoriesApi>();
            Assert.True(categoriesApi.HttpClient.BaseAddress != null);

            var chartsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IChartsApi>();
            Assert.True(chartsApi.HttpClient.BaseAddress != null);

            var configurationApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IConfigurationApi>();
            Assert.True(configurationApi.HttpClient.BaseAddress != null);

            var currenciesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICurrenciesApi>();
            Assert.True(currenciesApi.HttpClient.BaseAddress != null);

            var currencyExchangeRatesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICurrencyExchangeRatesApi>();
            Assert.True(currencyExchangeRatesApi.HttpClient.BaseAddress != null);

            var dataApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IDataApi>();
            Assert.True(dataApi.HttpClient.BaseAddress != null);

            var insightApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IInsightApi>();
            Assert.True(insightApi.HttpClient.BaseAddress != null);

            var linksApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ILinksApi>();
            Assert.True(linksApi.HttpClient.BaseAddress != null);

            var objectGroupsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IObjectGroupsApi>();
            Assert.True(objectGroupsApi.HttpClient.BaseAddress != null);

            var piggyBanksApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPiggyBanksApi>();
            Assert.True(piggyBanksApi.HttpClient.BaseAddress != null);

            var preferencesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPreferencesApi>();
            Assert.True(preferencesApi.HttpClient.BaseAddress != null);

            var recurrencesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IRecurrencesApi>();
            Assert.True(recurrencesApi.HttpClient.BaseAddress != null);

            var ruleGroupsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IRuleGroupsApi>();
            Assert.True(ruleGroupsApi.HttpClient.BaseAddress != null);

            var rulesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IRulesApi>();
            Assert.True(rulesApi.HttpClient.BaseAddress != null);

            var searchApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISearchApi>();
            Assert.True(searchApi.HttpClient.BaseAddress != null);

            var summaryApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISummaryApi>();
            Assert.True(summaryApi.HttpClient.BaseAddress != null);

            var tagsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ITagsApi>();
            Assert.True(tagsApi.HttpClient.BaseAddress != null);

            var transactionsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ITransactionsApi>();
            Assert.True(transactionsApi.HttpClient.BaseAddress != null);

            var userGroupsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IUserGroupsApi>();
            Assert.True(userGroupsApi.HttpClient.BaseAddress != null);

            var usersApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);

            var webhooksApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IWebhooksApi>();
            Assert.True(webhooksApi.HttpClient.BaseAddress != null);
        }
    }
}
