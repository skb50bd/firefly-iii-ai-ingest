// <auto-generated />
using System;
using Brotal.FireflyBuddy.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Brotal.FireflyBuddy.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250906121524_Initial_Create")]
    partial class Initial_Create
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("buddy")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Brotal.FireflyBuddy.Data.AnalysisResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IngestMessageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsConfident")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTransactional")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IngestMessageId")
                        .IsUnique();

                    b.HasIndex("IsConfident");

                    b.HasIndex("IsTransactional");

                    b.ToTable("AnalysisResults", "buddy");
                });

            modelBuilder.Entity("Brotal.FireflyBuddy.Data.IngestMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProcessingError")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasFilter("\"ExternalId\" IS NOT NULL");

                    b.HasIndex("Status");

                    b.ToTable("IngestMessages", "buddy");
                });

            modelBuilder.Entity("Brotal.FireflyBuddy.Data.TransactionDraft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BudgetName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DestinationAccountName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ExternalUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FireflyTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("IngestMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("SourceAccountName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubmissionError")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubscriptionName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Date");

                    b.HasIndex("IngestMessageId")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.ToTable("TransactionDrafts", "buddy");
                });

            modelBuilder.Entity("Brotal.FireflyBuddy.Data.AnalysisResult", b =>
                {
                    b.HasOne("Brotal.FireflyBuddy.Data.IngestMessage", "IngestMessage")
                        .WithOne("AnalysisResult")
                        .HasForeignKey("Brotal.FireflyBuddy.Data.AnalysisResult", "IngestMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IngestMessage");
                });

            modelBuilder.Entity("Brotal.FireflyBuddy.Data.TransactionDraft", b =>
                {
                    b.HasOne("Brotal.FireflyBuddy.Data.IngestMessage", "IngestMessage")
                        .WithOne("TransactionDraft")
                        .HasForeignKey("Brotal.FireflyBuddy.Data.TransactionDraft", "IngestMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IngestMessage");
                });

            modelBuilder.Entity("Brotal.FireflyBuddy.Data.IngestMessage", b =>
                {
                    b.Navigation("AnalysisResult");

                    b.Navigation("TransactionDraft");
                });
#pragma warning restore 612, 618
        }
    }
}
